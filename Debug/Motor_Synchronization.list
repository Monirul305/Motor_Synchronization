
Motor_Synchronization.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a684  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  0800a868  0800a868  0000b868  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad74  0800ad74  0000c204  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ad74  0800ad74  0000bd74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad7c  0800ad7c  0000c204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad7c  0800ad7c  0000bd7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ad80  0800ad80  0000bd80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000204  20000000  0800ad84  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c1c  20000208  0800af88  0000c208  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000e24  0800af88  0000ce24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c19d  00000000  00000000  0000c234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f98  00000000  00000000  000183d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  0001a370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000082e  00000000  00000000  0001ae28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f0a6  00000000  00000000  0001b656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec4d  00000000  00000000  0003a6fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b9c50  00000000  00000000  00049349  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00102f99  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000426c  00000000  00000000  00102fdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000082  00000000  00000000  00107248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000208 	.word	0x20000208
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a84c 	.word	0x0800a84c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000020c 	.word	0x2000020c
 800021c:	0800a84c 	.word	0x0800a84c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_frsub>:
 8000cd8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000cdc:	e002      	b.n	8000ce4 <__addsf3>
 8000cde:	bf00      	nop

08000ce0 <__aeabi_fsub>:
 8000ce0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000ce4 <__addsf3>:
 8000ce4:	0042      	lsls	r2, r0, #1
 8000ce6:	bf1f      	itttt	ne
 8000ce8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cec:	ea92 0f03 	teqne	r2, r3
 8000cf0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cf4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf8:	d06a      	beq.n	8000dd0 <__addsf3+0xec>
 8000cfa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cfe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000d02:	bfc1      	itttt	gt
 8000d04:	18d2      	addgt	r2, r2, r3
 8000d06:	4041      	eorgt	r1, r0
 8000d08:	4048      	eorgt	r0, r1
 8000d0a:	4041      	eorgt	r1, r0
 8000d0c:	bfb8      	it	lt
 8000d0e:	425b      	neglt	r3, r3
 8000d10:	2b19      	cmp	r3, #25
 8000d12:	bf88      	it	hi
 8000d14:	4770      	bxhi	lr
 8000d16:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d1a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d1e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000d22:	bf18      	it	ne
 8000d24:	4240      	negne	r0, r0
 8000d26:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000d2a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000d2e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000d32:	bf18      	it	ne
 8000d34:	4249      	negne	r1, r1
 8000d36:	ea92 0f03 	teq	r2, r3
 8000d3a:	d03f      	beq.n	8000dbc <__addsf3+0xd8>
 8000d3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000d40:	fa41 fc03 	asr.w	ip, r1, r3
 8000d44:	eb10 000c 	adds.w	r0, r0, ip
 8000d48:	f1c3 0320 	rsb	r3, r3, #32
 8000d4c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d50:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d54:	d502      	bpl.n	8000d5c <__addsf3+0x78>
 8000d56:	4249      	negs	r1, r1
 8000d58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d5c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000d60:	d313      	bcc.n	8000d8a <__addsf3+0xa6>
 8000d62:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000d66:	d306      	bcc.n	8000d76 <__addsf3+0x92>
 8000d68:	0840      	lsrs	r0, r0, #1
 8000d6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d6e:	f102 0201 	add.w	r2, r2, #1
 8000d72:	2afe      	cmp	r2, #254	@ 0xfe
 8000d74:	d251      	bcs.n	8000e1a <__addsf3+0x136>
 8000d76:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000d7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d7e:	bf08      	it	eq
 8000d80:	f020 0001 	biceq.w	r0, r0, #1
 8000d84:	ea40 0003 	orr.w	r0, r0, r3
 8000d88:	4770      	bx	lr
 8000d8a:	0049      	lsls	r1, r1, #1
 8000d8c:	eb40 0000 	adc.w	r0, r0, r0
 8000d90:	3a01      	subs	r2, #1
 8000d92:	bf28      	it	cs
 8000d94:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d98:	d2ed      	bcs.n	8000d76 <__addsf3+0x92>
 8000d9a:	fab0 fc80 	clz	ip, r0
 8000d9e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000da2:	ebb2 020c 	subs.w	r2, r2, ip
 8000da6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000daa:	bfaa      	itet	ge
 8000dac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000db0:	4252      	neglt	r2, r2
 8000db2:	4318      	orrge	r0, r3
 8000db4:	bfbc      	itt	lt
 8000db6:	40d0      	lsrlt	r0, r2
 8000db8:	4318      	orrlt	r0, r3
 8000dba:	4770      	bx	lr
 8000dbc:	f092 0f00 	teq	r2, #0
 8000dc0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000dc4:	bf06      	itte	eq
 8000dc6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000dca:	3201      	addeq	r2, #1
 8000dcc:	3b01      	subne	r3, #1
 8000dce:	e7b5      	b.n	8000d3c <__addsf3+0x58>
 8000dd0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000dd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd8:	bf18      	it	ne
 8000dda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dde:	d021      	beq.n	8000e24 <__addsf3+0x140>
 8000de0:	ea92 0f03 	teq	r2, r3
 8000de4:	d004      	beq.n	8000df0 <__addsf3+0x10c>
 8000de6:	f092 0f00 	teq	r2, #0
 8000dea:	bf08      	it	eq
 8000dec:	4608      	moveq	r0, r1
 8000dee:	4770      	bx	lr
 8000df0:	ea90 0f01 	teq	r0, r1
 8000df4:	bf1c      	itt	ne
 8000df6:	2000      	movne	r0, #0
 8000df8:	4770      	bxne	lr
 8000dfa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000dfe:	d104      	bne.n	8000e0a <__addsf3+0x126>
 8000e00:	0040      	lsls	r0, r0, #1
 8000e02:	bf28      	it	cs
 8000e04:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000e08:	4770      	bx	lr
 8000e0a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000e0e:	bf3c      	itt	cc
 8000e10:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000e14:	4770      	bxcc	lr
 8000e16:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000e1a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000e1e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e22:	4770      	bx	lr
 8000e24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000e28:	bf16      	itet	ne
 8000e2a:	4608      	movne	r0, r1
 8000e2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000e30:	4601      	movne	r1, r0
 8000e32:	0242      	lsls	r2, r0, #9
 8000e34:	bf06      	itte	eq
 8000e36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000e3a:	ea90 0f01 	teqeq	r0, r1
 8000e3e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000e42:	4770      	bx	lr

08000e44 <__aeabi_ui2f>:
 8000e44:	f04f 0300 	mov.w	r3, #0
 8000e48:	e004      	b.n	8000e54 <__aeabi_i2f+0x8>
 8000e4a:	bf00      	nop

08000e4c <__aeabi_i2f>:
 8000e4c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000e50:	bf48      	it	mi
 8000e52:	4240      	negmi	r0, r0
 8000e54:	ea5f 0c00 	movs.w	ip, r0
 8000e58:	bf08      	it	eq
 8000e5a:	4770      	bxeq	lr
 8000e5c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000e60:	4601      	mov	r1, r0
 8000e62:	f04f 0000 	mov.w	r0, #0
 8000e66:	e01c      	b.n	8000ea2 <__aeabi_l2f+0x2a>

08000e68 <__aeabi_ul2f>:
 8000e68:	ea50 0201 	orrs.w	r2, r0, r1
 8000e6c:	bf08      	it	eq
 8000e6e:	4770      	bxeq	lr
 8000e70:	f04f 0300 	mov.w	r3, #0
 8000e74:	e00a      	b.n	8000e8c <__aeabi_l2f+0x14>
 8000e76:	bf00      	nop

08000e78 <__aeabi_l2f>:
 8000e78:	ea50 0201 	orrs.w	r2, r0, r1
 8000e7c:	bf08      	it	eq
 8000e7e:	4770      	bxeq	lr
 8000e80:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e84:	d502      	bpl.n	8000e8c <__aeabi_l2f+0x14>
 8000e86:	4240      	negs	r0, r0
 8000e88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e8c:	ea5f 0c01 	movs.w	ip, r1
 8000e90:	bf02      	ittt	eq
 8000e92:	4684      	moveq	ip, r0
 8000e94:	4601      	moveq	r1, r0
 8000e96:	2000      	moveq	r0, #0
 8000e98:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e9c:	bf08      	it	eq
 8000e9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ea2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000ea6:	fabc f28c 	clz	r2, ip
 8000eaa:	3a08      	subs	r2, #8
 8000eac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000eb0:	db10      	blt.n	8000ed4 <__aeabi_l2f+0x5c>
 8000eb2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000ebc:	f1c2 0220 	rsb	r2, r2, #32
 8000ec0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000ec4:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec8:	eb43 0002 	adc.w	r0, r3, r2
 8000ecc:	bf08      	it	eq
 8000ece:	f020 0001 	biceq.w	r0, r0, #1
 8000ed2:	4770      	bx	lr
 8000ed4:	f102 0220 	add.w	r2, r2, #32
 8000ed8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000edc:	f1c2 0220 	rsb	r2, r2, #32
 8000ee0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ee4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ee8:	eb43 0002 	adc.w	r0, r3, r2
 8000eec:	bf08      	it	eq
 8000eee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ef2:	4770      	bx	lr

08000ef4 <__aeabi_uldivmod>:
 8000ef4:	b953      	cbnz	r3, 8000f0c <__aeabi_uldivmod+0x18>
 8000ef6:	b94a      	cbnz	r2, 8000f0c <__aeabi_uldivmod+0x18>
 8000ef8:	2900      	cmp	r1, #0
 8000efa:	bf08      	it	eq
 8000efc:	2800      	cmpeq	r0, #0
 8000efe:	bf1c      	itt	ne
 8000f00:	f04f 31ff 	movne.w	r1, #4294967295
 8000f04:	f04f 30ff 	movne.w	r0, #4294967295
 8000f08:	f000 b9de 	b.w	80012c8 <__aeabi_idiv0>
 8000f0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f14:	f000 f85c 	bl	8000fd0 <__udivmoddi4>
 8000f18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f20:	b004      	add	sp, #16
 8000f22:	4770      	bx	lr

08000f24 <__aeabi_d2lz>:
 8000f24:	b538      	push	{r3, r4, r5, lr}
 8000f26:	2200      	movs	r2, #0
 8000f28:	2300      	movs	r3, #0
 8000f2a:	4604      	mov	r4, r0
 8000f2c:	460d      	mov	r5, r1
 8000f2e:	f7ff fdfd 	bl	8000b2c <__aeabi_dcmplt>
 8000f32:	b928      	cbnz	r0, 8000f40 <__aeabi_d2lz+0x1c>
 8000f34:	4620      	mov	r0, r4
 8000f36:	4629      	mov	r1, r5
 8000f38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f3c:	f000 b82a 	b.w	8000f94 <__aeabi_d2ulz>
 8000f40:	4620      	mov	r0, r4
 8000f42:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000f46:	f000 f825 	bl	8000f94 <__aeabi_d2ulz>
 8000f4a:	4240      	negs	r0, r0
 8000f4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f50:	bd38      	pop	{r3, r4, r5, pc}
 8000f52:	bf00      	nop

08000f54 <__aeabi_f2ulz>:
 8000f54:	b5d0      	push	{r4, r6, r7, lr}
 8000f56:	f7ff fb1f 	bl	8000598 <__aeabi_f2d>
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f8c <__aeabi_f2ulz+0x38>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	4606      	mov	r6, r0
 8000f60:	460f      	mov	r7, r1
 8000f62:	f7ff fb71 	bl	8000648 <__aeabi_dmul>
 8000f66:	f7ff fe47 	bl	8000bf8 <__aeabi_d2uiz>
 8000f6a:	4604      	mov	r4, r0
 8000f6c:	f7ff faf2 	bl	8000554 <__aeabi_ui2d>
 8000f70:	4b07      	ldr	r3, [pc, #28]	@ (8000f90 <__aeabi_f2ulz+0x3c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	f7ff fb68 	bl	8000648 <__aeabi_dmul>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	460b      	mov	r3, r1
 8000f7c:	4630      	mov	r0, r6
 8000f7e:	4639      	mov	r1, r7
 8000f80:	f7ff f9aa 	bl	80002d8 <__aeabi_dsub>
 8000f84:	f7ff fe38 	bl	8000bf8 <__aeabi_d2uiz>
 8000f88:	4621      	mov	r1, r4
 8000f8a:	bdd0      	pop	{r4, r6, r7, pc}
 8000f8c:	3df00000 	.word	0x3df00000
 8000f90:	41f00000 	.word	0x41f00000

08000f94 <__aeabi_d2ulz>:
 8000f94:	b5d0      	push	{r4, r6, r7, lr}
 8000f96:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc8 <__aeabi_d2ulz+0x34>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	4606      	mov	r6, r0
 8000f9c:	460f      	mov	r7, r1
 8000f9e:	f7ff fb53 	bl	8000648 <__aeabi_dmul>
 8000fa2:	f7ff fe29 	bl	8000bf8 <__aeabi_d2uiz>
 8000fa6:	4604      	mov	r4, r0
 8000fa8:	f7ff fad4 	bl	8000554 <__aeabi_ui2d>
 8000fac:	4b07      	ldr	r3, [pc, #28]	@ (8000fcc <__aeabi_d2ulz+0x38>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f7ff fb4a 	bl	8000648 <__aeabi_dmul>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	4630      	mov	r0, r6
 8000fba:	4639      	mov	r1, r7
 8000fbc:	f7ff f98c 	bl	80002d8 <__aeabi_dsub>
 8000fc0:	f7ff fe1a 	bl	8000bf8 <__aeabi_d2uiz>
 8000fc4:	4621      	mov	r1, r4
 8000fc6:	bdd0      	pop	{r4, r6, r7, pc}
 8000fc8:	3df00000 	.word	0x3df00000
 8000fcc:	41f00000 	.word	0x41f00000

08000fd0 <__udivmoddi4>:
 8000fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fd4:	9d08      	ldr	r5, [sp, #32]
 8000fd6:	468e      	mov	lr, r1
 8000fd8:	4604      	mov	r4, r0
 8000fda:	4688      	mov	r8, r1
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d14a      	bne.n	8001076 <__udivmoddi4+0xa6>
 8000fe0:	428a      	cmp	r2, r1
 8000fe2:	4617      	mov	r7, r2
 8000fe4:	d962      	bls.n	80010ac <__udivmoddi4+0xdc>
 8000fe6:	fab2 f682 	clz	r6, r2
 8000fea:	b14e      	cbz	r6, 8001000 <__udivmoddi4+0x30>
 8000fec:	f1c6 0320 	rsb	r3, r6, #32
 8000ff0:	fa01 f806 	lsl.w	r8, r1, r6
 8000ff4:	fa20 f303 	lsr.w	r3, r0, r3
 8000ff8:	40b7      	lsls	r7, r6
 8000ffa:	ea43 0808 	orr.w	r8, r3, r8
 8000ffe:	40b4      	lsls	r4, r6
 8001000:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001004:	fa1f fc87 	uxth.w	ip, r7
 8001008:	fbb8 f1fe 	udiv	r1, r8, lr
 800100c:	0c23      	lsrs	r3, r4, #16
 800100e:	fb0e 8811 	mls	r8, lr, r1, r8
 8001012:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8001016:	fb01 f20c 	mul.w	r2, r1, ip
 800101a:	429a      	cmp	r2, r3
 800101c:	d909      	bls.n	8001032 <__udivmoddi4+0x62>
 800101e:	18fb      	adds	r3, r7, r3
 8001020:	f101 30ff 	add.w	r0, r1, #4294967295
 8001024:	f080 80ea 	bcs.w	80011fc <__udivmoddi4+0x22c>
 8001028:	429a      	cmp	r2, r3
 800102a:	f240 80e7 	bls.w	80011fc <__udivmoddi4+0x22c>
 800102e:	3902      	subs	r1, #2
 8001030:	443b      	add	r3, r7
 8001032:	1a9a      	subs	r2, r3, r2
 8001034:	b2a3      	uxth	r3, r4
 8001036:	fbb2 f0fe 	udiv	r0, r2, lr
 800103a:	fb0e 2210 	mls	r2, lr, r0, r2
 800103e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001042:	fb00 fc0c 	mul.w	ip, r0, ip
 8001046:	459c      	cmp	ip, r3
 8001048:	d909      	bls.n	800105e <__udivmoddi4+0x8e>
 800104a:	18fb      	adds	r3, r7, r3
 800104c:	f100 32ff 	add.w	r2, r0, #4294967295
 8001050:	f080 80d6 	bcs.w	8001200 <__udivmoddi4+0x230>
 8001054:	459c      	cmp	ip, r3
 8001056:	f240 80d3 	bls.w	8001200 <__udivmoddi4+0x230>
 800105a:	443b      	add	r3, r7
 800105c:	3802      	subs	r0, #2
 800105e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001062:	eba3 030c 	sub.w	r3, r3, ip
 8001066:	2100      	movs	r1, #0
 8001068:	b11d      	cbz	r5, 8001072 <__udivmoddi4+0xa2>
 800106a:	40f3      	lsrs	r3, r6
 800106c:	2200      	movs	r2, #0
 800106e:	e9c5 3200 	strd	r3, r2, [r5]
 8001072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001076:	428b      	cmp	r3, r1
 8001078:	d905      	bls.n	8001086 <__udivmoddi4+0xb6>
 800107a:	b10d      	cbz	r5, 8001080 <__udivmoddi4+0xb0>
 800107c:	e9c5 0100 	strd	r0, r1, [r5]
 8001080:	2100      	movs	r1, #0
 8001082:	4608      	mov	r0, r1
 8001084:	e7f5      	b.n	8001072 <__udivmoddi4+0xa2>
 8001086:	fab3 f183 	clz	r1, r3
 800108a:	2900      	cmp	r1, #0
 800108c:	d146      	bne.n	800111c <__udivmoddi4+0x14c>
 800108e:	4573      	cmp	r3, lr
 8001090:	d302      	bcc.n	8001098 <__udivmoddi4+0xc8>
 8001092:	4282      	cmp	r2, r0
 8001094:	f200 8105 	bhi.w	80012a2 <__udivmoddi4+0x2d2>
 8001098:	1a84      	subs	r4, r0, r2
 800109a:	eb6e 0203 	sbc.w	r2, lr, r3
 800109e:	2001      	movs	r0, #1
 80010a0:	4690      	mov	r8, r2
 80010a2:	2d00      	cmp	r5, #0
 80010a4:	d0e5      	beq.n	8001072 <__udivmoddi4+0xa2>
 80010a6:	e9c5 4800 	strd	r4, r8, [r5]
 80010aa:	e7e2      	b.n	8001072 <__udivmoddi4+0xa2>
 80010ac:	2a00      	cmp	r2, #0
 80010ae:	f000 8090 	beq.w	80011d2 <__udivmoddi4+0x202>
 80010b2:	fab2 f682 	clz	r6, r2
 80010b6:	2e00      	cmp	r6, #0
 80010b8:	f040 80a4 	bne.w	8001204 <__udivmoddi4+0x234>
 80010bc:	1a8a      	subs	r2, r1, r2
 80010be:	0c03      	lsrs	r3, r0, #16
 80010c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80010c4:	b280      	uxth	r0, r0
 80010c6:	b2bc      	uxth	r4, r7
 80010c8:	2101      	movs	r1, #1
 80010ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80010ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80010d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80010d6:	fb04 f20c 	mul.w	r2, r4, ip
 80010da:	429a      	cmp	r2, r3
 80010dc:	d907      	bls.n	80010ee <__udivmoddi4+0x11e>
 80010de:	18fb      	adds	r3, r7, r3
 80010e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80010e4:	d202      	bcs.n	80010ec <__udivmoddi4+0x11c>
 80010e6:	429a      	cmp	r2, r3
 80010e8:	f200 80e0 	bhi.w	80012ac <__udivmoddi4+0x2dc>
 80010ec:	46c4      	mov	ip, r8
 80010ee:	1a9b      	subs	r3, r3, r2
 80010f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80010f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80010f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80010fc:	fb02 f404 	mul.w	r4, r2, r4
 8001100:	429c      	cmp	r4, r3
 8001102:	d907      	bls.n	8001114 <__udivmoddi4+0x144>
 8001104:	18fb      	adds	r3, r7, r3
 8001106:	f102 30ff 	add.w	r0, r2, #4294967295
 800110a:	d202      	bcs.n	8001112 <__udivmoddi4+0x142>
 800110c:	429c      	cmp	r4, r3
 800110e:	f200 80ca 	bhi.w	80012a6 <__udivmoddi4+0x2d6>
 8001112:	4602      	mov	r2, r0
 8001114:	1b1b      	subs	r3, r3, r4
 8001116:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800111a:	e7a5      	b.n	8001068 <__udivmoddi4+0x98>
 800111c:	f1c1 0620 	rsb	r6, r1, #32
 8001120:	408b      	lsls	r3, r1
 8001122:	fa22 f706 	lsr.w	r7, r2, r6
 8001126:	431f      	orrs	r7, r3
 8001128:	fa0e f401 	lsl.w	r4, lr, r1
 800112c:	fa20 f306 	lsr.w	r3, r0, r6
 8001130:	fa2e fe06 	lsr.w	lr, lr, r6
 8001134:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8001138:	4323      	orrs	r3, r4
 800113a:	fa00 f801 	lsl.w	r8, r0, r1
 800113e:	fa1f fc87 	uxth.w	ip, r7
 8001142:	fbbe f0f9 	udiv	r0, lr, r9
 8001146:	0c1c      	lsrs	r4, r3, #16
 8001148:	fb09 ee10 	mls	lr, r9, r0, lr
 800114c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8001150:	fb00 fe0c 	mul.w	lr, r0, ip
 8001154:	45a6      	cmp	lr, r4
 8001156:	fa02 f201 	lsl.w	r2, r2, r1
 800115a:	d909      	bls.n	8001170 <__udivmoddi4+0x1a0>
 800115c:	193c      	adds	r4, r7, r4
 800115e:	f100 3aff 	add.w	sl, r0, #4294967295
 8001162:	f080 809c 	bcs.w	800129e <__udivmoddi4+0x2ce>
 8001166:	45a6      	cmp	lr, r4
 8001168:	f240 8099 	bls.w	800129e <__udivmoddi4+0x2ce>
 800116c:	3802      	subs	r0, #2
 800116e:	443c      	add	r4, r7
 8001170:	eba4 040e 	sub.w	r4, r4, lr
 8001174:	fa1f fe83 	uxth.w	lr, r3
 8001178:	fbb4 f3f9 	udiv	r3, r4, r9
 800117c:	fb09 4413 	mls	r4, r9, r3, r4
 8001180:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8001184:	fb03 fc0c 	mul.w	ip, r3, ip
 8001188:	45a4      	cmp	ip, r4
 800118a:	d908      	bls.n	800119e <__udivmoddi4+0x1ce>
 800118c:	193c      	adds	r4, r7, r4
 800118e:	f103 3eff 	add.w	lr, r3, #4294967295
 8001192:	f080 8082 	bcs.w	800129a <__udivmoddi4+0x2ca>
 8001196:	45a4      	cmp	ip, r4
 8001198:	d97f      	bls.n	800129a <__udivmoddi4+0x2ca>
 800119a:	3b02      	subs	r3, #2
 800119c:	443c      	add	r4, r7
 800119e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80011a2:	eba4 040c 	sub.w	r4, r4, ip
 80011a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80011aa:	4564      	cmp	r4, ip
 80011ac:	4673      	mov	r3, lr
 80011ae:	46e1      	mov	r9, ip
 80011b0:	d362      	bcc.n	8001278 <__udivmoddi4+0x2a8>
 80011b2:	d05f      	beq.n	8001274 <__udivmoddi4+0x2a4>
 80011b4:	b15d      	cbz	r5, 80011ce <__udivmoddi4+0x1fe>
 80011b6:	ebb8 0203 	subs.w	r2, r8, r3
 80011ba:	eb64 0409 	sbc.w	r4, r4, r9
 80011be:	fa04 f606 	lsl.w	r6, r4, r6
 80011c2:	fa22 f301 	lsr.w	r3, r2, r1
 80011c6:	431e      	orrs	r6, r3
 80011c8:	40cc      	lsrs	r4, r1
 80011ca:	e9c5 6400 	strd	r6, r4, [r5]
 80011ce:	2100      	movs	r1, #0
 80011d0:	e74f      	b.n	8001072 <__udivmoddi4+0xa2>
 80011d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80011d6:	0c01      	lsrs	r1, r0, #16
 80011d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80011dc:	b280      	uxth	r0, r0
 80011de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80011e2:	463b      	mov	r3, r7
 80011e4:	4638      	mov	r0, r7
 80011e6:	463c      	mov	r4, r7
 80011e8:	46b8      	mov	r8, r7
 80011ea:	46be      	mov	lr, r7
 80011ec:	2620      	movs	r6, #32
 80011ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80011f2:	eba2 0208 	sub.w	r2, r2, r8
 80011f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80011fa:	e766      	b.n	80010ca <__udivmoddi4+0xfa>
 80011fc:	4601      	mov	r1, r0
 80011fe:	e718      	b.n	8001032 <__udivmoddi4+0x62>
 8001200:	4610      	mov	r0, r2
 8001202:	e72c      	b.n	800105e <__udivmoddi4+0x8e>
 8001204:	f1c6 0220 	rsb	r2, r6, #32
 8001208:	fa2e f302 	lsr.w	r3, lr, r2
 800120c:	40b7      	lsls	r7, r6
 800120e:	40b1      	lsls	r1, r6
 8001210:	fa20 f202 	lsr.w	r2, r0, r2
 8001214:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001218:	430a      	orrs	r2, r1
 800121a:	fbb3 f8fe 	udiv	r8, r3, lr
 800121e:	b2bc      	uxth	r4, r7
 8001220:	fb0e 3318 	mls	r3, lr, r8, r3
 8001224:	0c11      	lsrs	r1, r2, #16
 8001226:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800122a:	fb08 f904 	mul.w	r9, r8, r4
 800122e:	40b0      	lsls	r0, r6
 8001230:	4589      	cmp	r9, r1
 8001232:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8001236:	b280      	uxth	r0, r0
 8001238:	d93e      	bls.n	80012b8 <__udivmoddi4+0x2e8>
 800123a:	1879      	adds	r1, r7, r1
 800123c:	f108 3cff 	add.w	ip, r8, #4294967295
 8001240:	d201      	bcs.n	8001246 <__udivmoddi4+0x276>
 8001242:	4589      	cmp	r9, r1
 8001244:	d81f      	bhi.n	8001286 <__udivmoddi4+0x2b6>
 8001246:	eba1 0109 	sub.w	r1, r1, r9
 800124a:	fbb1 f9fe 	udiv	r9, r1, lr
 800124e:	fb09 f804 	mul.w	r8, r9, r4
 8001252:	fb0e 1119 	mls	r1, lr, r9, r1
 8001256:	b292      	uxth	r2, r2
 8001258:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800125c:	4542      	cmp	r2, r8
 800125e:	d229      	bcs.n	80012b4 <__udivmoddi4+0x2e4>
 8001260:	18ba      	adds	r2, r7, r2
 8001262:	f109 31ff 	add.w	r1, r9, #4294967295
 8001266:	d2c4      	bcs.n	80011f2 <__udivmoddi4+0x222>
 8001268:	4542      	cmp	r2, r8
 800126a:	d2c2      	bcs.n	80011f2 <__udivmoddi4+0x222>
 800126c:	f1a9 0102 	sub.w	r1, r9, #2
 8001270:	443a      	add	r2, r7
 8001272:	e7be      	b.n	80011f2 <__udivmoddi4+0x222>
 8001274:	45f0      	cmp	r8, lr
 8001276:	d29d      	bcs.n	80011b4 <__udivmoddi4+0x1e4>
 8001278:	ebbe 0302 	subs.w	r3, lr, r2
 800127c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001280:	3801      	subs	r0, #1
 8001282:	46e1      	mov	r9, ip
 8001284:	e796      	b.n	80011b4 <__udivmoddi4+0x1e4>
 8001286:	eba7 0909 	sub.w	r9, r7, r9
 800128a:	4449      	add	r1, r9
 800128c:	f1a8 0c02 	sub.w	ip, r8, #2
 8001290:	fbb1 f9fe 	udiv	r9, r1, lr
 8001294:	fb09 f804 	mul.w	r8, r9, r4
 8001298:	e7db      	b.n	8001252 <__udivmoddi4+0x282>
 800129a:	4673      	mov	r3, lr
 800129c:	e77f      	b.n	800119e <__udivmoddi4+0x1ce>
 800129e:	4650      	mov	r0, sl
 80012a0:	e766      	b.n	8001170 <__udivmoddi4+0x1a0>
 80012a2:	4608      	mov	r0, r1
 80012a4:	e6fd      	b.n	80010a2 <__udivmoddi4+0xd2>
 80012a6:	443b      	add	r3, r7
 80012a8:	3a02      	subs	r2, #2
 80012aa:	e733      	b.n	8001114 <__udivmoddi4+0x144>
 80012ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80012b0:	443b      	add	r3, r7
 80012b2:	e71c      	b.n	80010ee <__udivmoddi4+0x11e>
 80012b4:	4649      	mov	r1, r9
 80012b6:	e79c      	b.n	80011f2 <__udivmoddi4+0x222>
 80012b8:	eba1 0109 	sub.w	r1, r1, r9
 80012bc:	46c4      	mov	ip, r8
 80012be:	fbb1 f9fe 	udiv	r9, r1, lr
 80012c2:	fb09 f804 	mul.w	r8, r9, r4
 80012c6:	e7c4      	b.n	8001252 <__udivmoddi4+0x282>

080012c8 <__aeabi_idiv0>:
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop

080012cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001310 <MX_GPIO_Init+0x44>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d6:	4a0e      	ldr	r2, [pc, #56]	@ (8001310 <MX_GPIO_Init+0x44>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012de:	4b0c      	ldr	r3, [pc, #48]	@ (8001310 <MX_GPIO_Init+0x44>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ea:	4b09      	ldr	r3, [pc, #36]	@ (8001310 <MX_GPIO_Init+0x44>)
 80012ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ee:	4a08      	ldr	r2, [pc, #32]	@ (8001310 <MX_GPIO_Init+0x44>)
 80012f0:	f043 0302 	orr.w	r3, r3, #2
 80012f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012f6:	4b06      	ldr	r3, [pc, #24]	@ (8001310 <MX_GPIO_Init+0x44>)
 80012f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	603b      	str	r3, [r7, #0]
 8001300:	683b      	ldr	r3, [r7, #0]

}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	40021000 	.word	0x40021000

08001314 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001318:	f000 face 	bl	80018b8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800131c:	f000 f824 	bl	8001368 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001320:	f7ff ffd4 	bl	80012cc <MX_GPIO_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Initialize leds */
	BSP_LED_Init(LED_GREEN);
 8001324:	2000      	movs	r0, #0
 8001326:	f000 f9c7 	bl	80016b8 <BSP_LED_Init>

	/* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
	BspCOMInit.BaudRate = 115200;
 800132a:	4b0e      	ldr	r3, [pc, #56]	@ (8001364 <main+0x50>)
 800132c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001330:	601a      	str	r2, [r3, #0]
	BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8001332:	4b0c      	ldr	r3, [pc, #48]	@ (8001364 <main+0x50>)
 8001334:	2200      	movs	r2, #0
 8001336:	605a      	str	r2, [r3, #4]
	BspCOMInit.StopBits = COM_STOPBITS_1;
 8001338:	4b0a      	ldr	r3, [pc, #40]	@ (8001364 <main+0x50>)
 800133a:	2200      	movs	r2, #0
 800133c:	811a      	strh	r2, [r3, #8]
	BspCOMInit.Parity = COM_PARITY_NONE;
 800133e:	4b09      	ldr	r3, [pc, #36]	@ (8001364 <main+0x50>)
 8001340:	2200      	movs	r2, #0
 8001342:	815a      	strh	r2, [r3, #10]
	BspCOMInit.HwFlowCtl = COM_HWCONTROL_NONE;
 8001344:	4b07      	ldr	r3, [pc, #28]	@ (8001364 <main+0x50>)
 8001346:	2200      	movs	r2, #0
 8001348:	819a      	strh	r2, [r3, #12]
	if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE) {
 800134a:	4906      	ldr	r1, [pc, #24]	@ (8001364 <main+0x50>)
 800134c:	2000      	movs	r0, #0
 800134e:	f000 f9e9 	bl	8001724 <BSP_COM_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <main+0x48>
		Error_Handler();
 8001358:	f000 f851 	bl	80013fe <Error_Handler>
	}

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	TunePID();
 800135c:	f002 f940 	bl	80035e0 <TunePID>
//	VerifyBaseSpeed1();
//	VerifyBaseSpeed2();

	while (1) {
 8001360:	bf00      	nop
 8001362:	e7fd      	b.n	8001360 <main+0x4c>
 8001364:	20000224 	.word	0x20000224

08001368 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001368:	b580      	push	{r7, lr}
 800136a:	b094      	sub	sp, #80	@ 0x50
 800136c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800136e:	f107 0318 	add.w	r3, r7, #24
 8001372:	2238      	movs	r2, #56	@ 0x38
 8001374:	2100      	movs	r1, #0
 8001376:	4618      	mov	r0, r3
 8001378:	f005 fdde 	bl	8006f38 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]
 8001388:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800138a:	2000      	movs	r0, #0
 800138c:	f000 fd82 	bl	8001e94 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001390:	2302      	movs	r3, #2
 8001392:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001394:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001398:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800139a:	2340      	movs	r3, #64	@ 0x40
 800139c:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800139e:	2302      	movs	r3, #2
 80013a0:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013a2:	2302      	movs	r3, #2
 80013a4:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80013a6:	2304      	movs	r3, #4
 80013a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLN = 85;
 80013aa:	2355      	movs	r3, #85	@ 0x55
 80013ac:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013ae:	2302      	movs	r3, #2
 80013b0:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013b2:	2302      	movs	r3, #2
 80013b4:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013b6:	2302      	movs	r3, #2
 80013b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80013ba:	f107 0318 	add.w	r3, r7, #24
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 fe0c 	bl	8001fdc <HAL_RCC_OscConfig>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <SystemClock_Config+0x66>
		Error_Handler();
 80013ca:	f000 f818 	bl	80013fe <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80013ce:	230f      	movs	r3, #15
 80013d0:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d2:	2303      	movs	r3, #3
 80013d4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013da:	2300      	movs	r3, #0
 80013dc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013de:	2300      	movs	r3, #0
 80013e0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 80013e2:	1d3b      	adds	r3, r7, #4
 80013e4:	2104      	movs	r1, #4
 80013e6:	4618      	mov	r0, r3
 80013e8:	f001 f90a 	bl	8002600 <HAL_RCC_ClockConfig>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <SystemClock_Config+0x8e>
		Error_Handler();
 80013f2:	f000 f804 	bl	80013fe <Error_Handler>
	}
}
 80013f6:	bf00      	nop
 80013f8:	3750      	adds	r7, #80	@ 0x50
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001402:	b672      	cpsid	i
}
 8001404:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001406:	bf00      	nop
 8001408:	e7fd      	b.n	8001406 <Error_Handler+0x8>
	...

0800140c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001412:	4b0f      	ldr	r3, [pc, #60]	@ (8001450 <HAL_MspInit+0x44>)
 8001414:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001416:	4a0e      	ldr	r2, [pc, #56]	@ (8001450 <HAL_MspInit+0x44>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	6613      	str	r3, [r2, #96]	@ 0x60
 800141e:	4b0c      	ldr	r3, [pc, #48]	@ (8001450 <HAL_MspInit+0x44>)
 8001420:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	607b      	str	r3, [r7, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800142a:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <HAL_MspInit+0x44>)
 800142c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800142e:	4a08      	ldr	r2, [pc, #32]	@ (8001450 <HAL_MspInit+0x44>)
 8001430:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001434:	6593      	str	r3, [r2, #88]	@ 0x58
 8001436:	4b06      	ldr	r3, [pc, #24]	@ (8001450 <HAL_MspInit+0x44>)
 8001438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800143a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800143e:	603b      	str	r3, [r7, #0]
 8001440:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	40021000 	.word	0x40021000

08001454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001458:	bf00      	nop
 800145a:	e7fd      	b.n	8001458 <NMI_Handler+0x4>

0800145c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001460:	bf00      	nop
 8001462:	e7fd      	b.n	8001460 <HardFault_Handler+0x4>

08001464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001468:	bf00      	nop
 800146a:	e7fd      	b.n	8001468 <MemManage_Handler+0x4>

0800146c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001470:	bf00      	nop
 8001472:	e7fd      	b.n	8001470 <BusFault_Handler+0x4>

08001474 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001478:	bf00      	nop
 800147a:	e7fd      	b.n	8001478 <UsageFault_Handler+0x4>

0800147c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001480:	bf00      	nop
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr

0800148a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800148a:	b480      	push	{r7}
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800148e:	bf00      	nop
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr

08001498 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014aa:	f000 fa57 	bl	800195c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0
  return 1;
 80014b6:	2301      	movs	r3, #1
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <_kill>:

int _kill(int pid, int sig)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
 80014ca:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014cc:	f005 fd86 	bl	8006fdc <__errno>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2216      	movs	r2, #22
 80014d4:	601a      	str	r2, [r3, #0]
  return -1;
 80014d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <_exit>:

void _exit (int status)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014ea:	f04f 31ff 	mov.w	r1, #4294967295
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f7ff ffe7 	bl	80014c2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014f4:	bf00      	nop
 80014f6:	e7fd      	b.n	80014f4 <_exit+0x12>

080014f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
 8001508:	e00a      	b.n	8001520 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800150a:	f3af 8000 	nop.w
 800150e:	4601      	mov	r1, r0
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	1c5a      	adds	r2, r3, #1
 8001514:	60ba      	str	r2, [r7, #8]
 8001516:	b2ca      	uxtb	r2, r1
 8001518:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	3301      	adds	r3, #1
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	697a      	ldr	r2, [r7, #20]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	429a      	cmp	r2, r3
 8001526:	dbf0      	blt.n	800150a <_read+0x12>
  }

  return len;
 8001528:	687b      	ldr	r3, [r7, #4]
}
 800152a:	4618      	mov	r0, r3
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b086      	sub	sp, #24
 8001536:	af00      	add	r7, sp, #0
 8001538:	60f8      	str	r0, [r7, #12]
 800153a:	60b9      	str	r1, [r7, #8]
 800153c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]
 8001542:	e009      	b.n	8001558 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001544:	68bb      	ldr	r3, [r7, #8]
 8001546:	1c5a      	adds	r2, r3, #1
 8001548:	60ba      	str	r2, [r7, #8]
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	4618      	mov	r0, r3
 800154e:	f000 f94b 	bl	80017e8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	3301      	adds	r3, #1
 8001556:	617b      	str	r3, [r7, #20]
 8001558:	697a      	ldr	r2, [r7, #20]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	429a      	cmp	r2, r3
 800155e:	dbf1      	blt.n	8001544 <_write+0x12>
  }
  return len;
 8001560:	687b      	ldr	r3, [r7, #4]
}
 8001562:	4618      	mov	r0, r3
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <_close>:

int _close(int file)
{
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001572:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001576:	4618      	mov	r0, r3
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001582:	b480      	push	{r7}
 8001584:	b083      	sub	sp, #12
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
 800158a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001592:	605a      	str	r2, [r3, #4]
  return 0;
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <_isatty>:

int _isatty(int file)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b083      	sub	sp, #12
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015aa:	2301      	movs	r3, #1
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b085      	sub	sp, #20
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
	...

080015d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015dc:	4a14      	ldr	r2, [pc, #80]	@ (8001630 <_sbrk+0x5c>)
 80015de:	4b15      	ldr	r3, [pc, #84]	@ (8001634 <_sbrk+0x60>)
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015e8:	4b13      	ldr	r3, [pc, #76]	@ (8001638 <_sbrk+0x64>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d102      	bne.n	80015f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015f0:	4b11      	ldr	r3, [pc, #68]	@ (8001638 <_sbrk+0x64>)
 80015f2:	4a12      	ldr	r2, [pc, #72]	@ (800163c <_sbrk+0x68>)
 80015f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015f6:	4b10      	ldr	r3, [pc, #64]	@ (8001638 <_sbrk+0x64>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4413      	add	r3, r2
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	429a      	cmp	r2, r3
 8001602:	d207      	bcs.n	8001614 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001604:	f005 fcea 	bl	8006fdc <__errno>
 8001608:	4603      	mov	r3, r0
 800160a:	220c      	movs	r2, #12
 800160c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800160e:	f04f 33ff 	mov.w	r3, #4294967295
 8001612:	e009      	b.n	8001628 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001614:	4b08      	ldr	r3, [pc, #32]	@ (8001638 <_sbrk+0x64>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800161a:	4b07      	ldr	r3, [pc, #28]	@ (8001638 <_sbrk+0x64>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4413      	add	r3, r2
 8001622:	4a05      	ldr	r2, [pc, #20]	@ (8001638 <_sbrk+0x64>)
 8001624:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001626:	68fb      	ldr	r3, [r7, #12]
}
 8001628:	4618      	mov	r0, r3
 800162a:	3718      	adds	r7, #24
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	20008000 	.word	0x20008000
 8001634:	00000400 	.word	0x00000400
 8001638:	20000234 	.word	0x20000234
 800163c:	20000e28 	.word	0x20000e28

08001640 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001644:	4b06      	ldr	r3, [pc, #24]	@ (8001660 <SystemInit+0x20>)
 8001646:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800164a:	4a05      	ldr	r2, [pc, #20]	@ (8001660 <SystemInit+0x20>)
 800164c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001650:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001664:	480d      	ldr	r0, [pc, #52]	@ (800169c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001666:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001668:	f7ff ffea 	bl	8001640 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800166c:	480c      	ldr	r0, [pc, #48]	@ (80016a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800166e:	490d      	ldr	r1, [pc, #52]	@ (80016a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001670:	4a0d      	ldr	r2, [pc, #52]	@ (80016a8 <LoopForever+0xe>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001674:	e002      	b.n	800167c <LoopCopyDataInit>

08001676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800167a:	3304      	adds	r3, #4

0800167c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800167c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800167e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001680:	d3f9      	bcc.n	8001676 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001682:	4a0a      	ldr	r2, [pc, #40]	@ (80016ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001684:	4c0a      	ldr	r4, [pc, #40]	@ (80016b0 <LoopForever+0x16>)
  movs r3, #0
 8001686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001688:	e001      	b.n	800168e <LoopFillZerobss>

0800168a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800168a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800168c:	3204      	adds	r2, #4

0800168e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800168e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001690:	d3fb      	bcc.n	800168a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001692:	f005 fca9 	bl	8006fe8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001696:	f7ff fe3d 	bl	8001314 <main>

0800169a <LoopForever>:

LoopForever:
    b LoopForever
 800169a:	e7fe      	b.n	800169a <LoopForever>
  ldr   r0, =_estack
 800169c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80016a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a4:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 80016a8:	0800ad84 	.word	0x0800ad84
  ldr r2, =_sbss
 80016ac:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 80016b0:	20000e24 	.word	0x20000e24

080016b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016b4:	e7fe      	b.n	80016b4 <ADC1_2_IRQHandler>
	...

080016b8 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 80016c2:	4b16      	ldr	r3, [pc, #88]	@ (800171c <BSP_LED_Init+0x64>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c6:	4a15      	ldr	r2, [pc, #84]	@ (800171c <BSP_LED_Init+0x64>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ce:	4b13      	ldr	r3, [pc, #76]	@ (800171c <BSP_LED_Init+0x64>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	60bb      	str	r3, [r7, #8]
 80016d8:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 80016da:	2320      	movs	r3, #32
 80016dc:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80016de:	2301      	movs	r3, #1
 80016e0:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e6:	2303      	movs	r3, #3
 80016e8:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80016ea:	79fb      	ldrb	r3, [r7, #7]
 80016ec:	4a0c      	ldr	r2, [pc, #48]	@ (8001720 <BSP_LED_Init+0x68>)
 80016ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016f2:	f107 020c 	add.w	r2, r7, #12
 80016f6:	4611      	mov	r1, r2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f000 fa31 	bl	8001b60 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	4a07      	ldr	r2, [pc, #28]	@ (8001720 <BSP_LED_Init+0x68>)
 8001702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001706:	2120      	movs	r1, #32
 8001708:	2200      	movs	r2, #0
 800170a:	4618      	mov	r0, r3
 800170c:	f000 fbaa 	bl	8001e64 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3720      	adds	r7, #32
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40021000 	.word	0x40021000
 8001720:	20000004 	.word	0x20000004

08001724 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	4603      	mov	r3, r0
 800172c:	6039      	str	r1, [r7, #0]
 800172e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001730:	2300      	movs	r3, #0
 8001732:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d903      	bls.n	8001742 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800173a:	f06f 0301 	mvn.w	r3, #1
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	e018      	b.n	8001774 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	2294      	movs	r2, #148	@ 0x94
 8001746:	fb02 f303 	mul.w	r3, r2, r3
 800174a:	4a0d      	ldr	r2, [pc, #52]	@ (8001780 <BSP_COM_Init+0x5c>)
 800174c:	4413      	add	r3, r2
 800174e:	4618      	mov	r0, r3
 8001750:	f000 f866 	bl	8001820 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001754:	79fb      	ldrb	r3, [r7, #7]
 8001756:	2294      	movs	r2, #148	@ 0x94
 8001758:	fb02 f303 	mul.w	r3, r2, r3
 800175c:	4a08      	ldr	r2, [pc, #32]	@ (8001780 <BSP_COM_Init+0x5c>)
 800175e:	4413      	add	r3, r2
 8001760:	6839      	ldr	r1, [r7, #0]
 8001762:	4618      	mov	r0, r3
 8001764:	f000 f80e 	bl	8001784 <MX_LPUART1_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d002      	beq.n	8001774 <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 800176e:	f06f 0303 	mvn.w	r3, #3
 8001772:	e000      	b.n	8001776 <BSP_COM_Init+0x52>
    }
  }

  return ret;
 8001774:	68fb      	ldr	r3, [r7, #12]
}
 8001776:	4618      	mov	r0, r3
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	20000238 	.word	0x20000238

08001784 <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 800178e:	4b15      	ldr	r3, [pc, #84]	@ (80017e4 <MX_LPUART1_Init+0x60>)
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	220c      	movs	r2, #12
 80017a2:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	895b      	ldrh	r3, [r3, #10]
 80017a8:	461a      	mov	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	891b      	ldrh	r3, [r3, #8]
 80017ba:	461a      	mov	r2, r3
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	899b      	ldrh	r3, [r3, #12]
 80017c4:	461a      	mov	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80017d0:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f001 f930 	bl	8002a38 <HAL_UART_Init>
 80017d8:	4603      	mov	r3, r0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3708      	adds	r7, #8
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000008 	.word	0x20000008

080017e8 <__io_putchar>:

/**
  * @brief  Redirect console output to COM
  */
PUTCHAR_PROTOTYPE
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  (void) HAL_UART_Transmit(&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 80017f0:	4b09      	ldr	r3, [pc, #36]	@ (8001818 <__io_putchar+0x30>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	461a      	mov	r2, r3
 80017f6:	2394      	movs	r3, #148	@ 0x94
 80017f8:	fb02 f303 	mul.w	r3, r2, r3
 80017fc:	4a07      	ldr	r2, [pc, #28]	@ (800181c <__io_putchar+0x34>)
 80017fe:	1898      	adds	r0, r3, r2
 8001800:	1d39      	adds	r1, r7, #4
 8001802:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001806:	2201      	movs	r2, #1
 8001808:	f001 f970 	bl	8002aec <HAL_UART_Transmit>
  return ch;
 800180c:	687b      	ldr	r3, [r7, #4]
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	200002cc 	.word	0x200002cc
 800181c:	20000238 	.word	0x20000238

08001820 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08a      	sub	sp, #40	@ 0x28
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001828:	4b22      	ldr	r3, [pc, #136]	@ (80018b4 <COM1_MspInit+0x94>)
 800182a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800182c:	4a21      	ldr	r2, [pc, #132]	@ (80018b4 <COM1_MspInit+0x94>)
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001834:	4b1f      	ldr	r3, [pc, #124]	@ (80018b4 <COM1_MspInit+0x94>)
 8001836:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	613b      	str	r3, [r7, #16]
 800183e:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001840:	4b1c      	ldr	r3, [pc, #112]	@ (80018b4 <COM1_MspInit+0x94>)
 8001842:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001844:	4a1b      	ldr	r2, [pc, #108]	@ (80018b4 <COM1_MspInit+0x94>)
 8001846:	f043 0301 	orr.w	r3, r3, #1
 800184a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800184c:	4b19      	ldr	r3, [pc, #100]	@ (80018b4 <COM1_MspInit+0x94>)
 800184e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001850:	f003 0301 	and.w	r3, r3, #1
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001858:	4b16      	ldr	r3, [pc, #88]	@ (80018b4 <COM1_MspInit+0x94>)
 800185a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800185c:	4a15      	ldr	r2, [pc, #84]	@ (80018b4 <COM1_MspInit+0x94>)
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001864:	4b13      	ldr	r3, [pc, #76]	@ (80018b4 <COM1_MspInit+0x94>)
 8001866:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	60bb      	str	r3, [r7, #8]
 800186e:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001870:	2304      	movs	r3, #4
 8001872:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001878:	2302      	movs	r3, #2
 800187a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800187c:	2301      	movs	r3, #1
 800187e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001880:	230c      	movs	r3, #12
 8001882:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001884:	f107 0314 	add.w	r3, r7, #20
 8001888:	4619      	mov	r1, r3
 800188a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800188e:	f000 f967 	bl	8001b60 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001892:	2308      	movs	r3, #8
 8001894:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001896:	2302      	movs	r3, #2
 8001898:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800189a:	230c      	movs	r3, #12
 800189c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800189e:	f107 0314 	add.w	r3, r7, #20
 80018a2:	4619      	mov	r1, r3
 80018a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018a8:	f000 f95a 	bl	8001b60 <HAL_GPIO_Init>
}
 80018ac:	bf00      	nop
 80018ae:	3728      	adds	r7, #40	@ 0x28
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40021000 	.word	0x40021000

080018b8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018be:	2300      	movs	r3, #0
 80018c0:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018c2:	2003      	movs	r0, #3
 80018c4:	f000 f91a 	bl	8001afc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018c8:	2000      	movs	r0, #0
 80018ca:	f000 f80d 	bl	80018e8 <HAL_InitTick>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d002      	beq.n	80018da <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018d4:	2301      	movs	r3, #1
 80018d6:	71fb      	strb	r3, [r7, #7]
 80018d8:	e001      	b.n	80018de <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018da:	f7ff fd97 	bl	800140c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018de:	79fb      	ldrb	r3, [r7, #7]

}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80018f0:	2300      	movs	r3, #0
 80018f2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80018f4:	4b16      	ldr	r3, [pc, #88]	@ (8001950 <HAL_InitTick+0x68>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d022      	beq.n	8001942 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80018fc:	4b15      	ldr	r3, [pc, #84]	@ (8001954 <HAL_InitTick+0x6c>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4b13      	ldr	r3, [pc, #76]	@ (8001950 <HAL_InitTick+0x68>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001908:	fbb1 f3f3 	udiv	r3, r1, r3
 800190c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001910:	4618      	mov	r0, r3
 8001912:	f000 f918 	bl	8001b46 <HAL_SYSTICK_Config>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d10f      	bne.n	800193c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2b0f      	cmp	r3, #15
 8001920:	d809      	bhi.n	8001936 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001922:	2200      	movs	r2, #0
 8001924:	6879      	ldr	r1, [r7, #4]
 8001926:	f04f 30ff 	mov.w	r0, #4294967295
 800192a:	f000 f8f2 	bl	8001b12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800192e:	4a0a      	ldr	r2, [pc, #40]	@ (8001958 <HAL_InitTick+0x70>)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6013      	str	r3, [r2, #0]
 8001934:	e007      	b.n	8001946 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	73fb      	strb	r3, [r7, #15]
 800193a:	e004      	b.n	8001946 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800193c:	2301      	movs	r3, #1
 800193e:	73fb      	strb	r3, [r7, #15]
 8001940:	e001      	b.n	8001946 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001946:	7bfb      	ldrb	r3, [r7, #15]
}
 8001948:	4618      	mov	r0, r3
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20000010 	.word	0x20000010
 8001954:	20000000 	.word	0x20000000
 8001958:	2000000c 	.word	0x2000000c

0800195c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001960:	4b05      	ldr	r3, [pc, #20]	@ (8001978 <HAL_IncTick+0x1c>)
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	4b05      	ldr	r3, [pc, #20]	@ (800197c <HAL_IncTick+0x20>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4413      	add	r3, r2
 800196a:	4a03      	ldr	r2, [pc, #12]	@ (8001978 <HAL_IncTick+0x1c>)
 800196c:	6013      	str	r3, [r2, #0]
}
 800196e:	bf00      	nop
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	200002d0 	.word	0x200002d0
 800197c:	20000010 	.word	0x20000010

08001980 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  return uwTick;
 8001984:	4b03      	ldr	r3, [pc, #12]	@ (8001994 <HAL_GetTick+0x14>)
 8001986:	681b      	ldr	r3, [r3, #0]
}
 8001988:	4618      	mov	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	200002d0 	.word	0x200002d0

08001998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019a8:	4b0c      	ldr	r3, [pc, #48]	@ (80019dc <__NVIC_SetPriorityGrouping+0x44>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ae:	68ba      	ldr	r2, [r7, #8]
 80019b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019b4:	4013      	ands	r3, r2
 80019b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ca:	4a04      	ldr	r2, [pc, #16]	@ (80019dc <__NVIC_SetPriorityGrouping+0x44>)
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	60d3      	str	r3, [r2, #12]
}
 80019d0:	bf00      	nop
 80019d2:	3714      	adds	r7, #20
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	e000ed00 	.word	0xe000ed00

080019e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019e4:	4b04      	ldr	r3, [pc, #16]	@ (80019f8 <__NVIC_GetPriorityGrouping+0x18>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	0a1b      	lsrs	r3, r3, #8
 80019ea:	f003 0307 	and.w	r3, r3, #7
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	6039      	str	r1, [r7, #0]
 8001a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	db0a      	blt.n	8001a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	490c      	ldr	r1, [pc, #48]	@ (8001a48 <__NVIC_SetPriority+0x4c>)
 8001a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1a:	0112      	lsls	r2, r2, #4
 8001a1c:	b2d2      	uxtb	r2, r2
 8001a1e:	440b      	add	r3, r1
 8001a20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a24:	e00a      	b.n	8001a3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	4908      	ldr	r1, [pc, #32]	@ (8001a4c <__NVIC_SetPriority+0x50>)
 8001a2c:	79fb      	ldrb	r3, [r7, #7]
 8001a2e:	f003 030f 	and.w	r3, r3, #15
 8001a32:	3b04      	subs	r3, #4
 8001a34:	0112      	lsls	r2, r2, #4
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	440b      	add	r3, r1
 8001a3a:	761a      	strb	r2, [r3, #24]
}
 8001a3c:	bf00      	nop
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	e000e100 	.word	0xe000e100
 8001a4c:	e000ed00 	.word	0xe000ed00

08001a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b089      	sub	sp, #36	@ 0x24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	f1c3 0307 	rsb	r3, r3, #7
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	bf28      	it	cs
 8001a6e:	2304      	movcs	r3, #4
 8001a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	3304      	adds	r3, #4
 8001a76:	2b06      	cmp	r3, #6
 8001a78:	d902      	bls.n	8001a80 <NVIC_EncodePriority+0x30>
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3b03      	subs	r3, #3
 8001a7e:	e000      	b.n	8001a82 <NVIC_EncodePriority+0x32>
 8001a80:	2300      	movs	r3, #0
 8001a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a84:	f04f 32ff 	mov.w	r2, #4294967295
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	43da      	mvns	r2, r3
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	401a      	ands	r2, r3
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a98:	f04f 31ff 	mov.w	r1, #4294967295
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa2:	43d9      	mvns	r1, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa8:	4313      	orrs	r3, r2
         );
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3724      	adds	r7, #36	@ 0x24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
	...

08001ab8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ac8:	d301      	bcc.n	8001ace <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aca:	2301      	movs	r3, #1
 8001acc:	e00f      	b.n	8001aee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ace:	4a0a      	ldr	r2, [pc, #40]	@ (8001af8 <SysTick_Config+0x40>)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	3b01      	subs	r3, #1
 8001ad4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ad6:	210f      	movs	r1, #15
 8001ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8001adc:	f7ff ff8e 	bl	80019fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ae0:	4b05      	ldr	r3, [pc, #20]	@ (8001af8 <SysTick_Config+0x40>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ae6:	4b04      	ldr	r3, [pc, #16]	@ (8001af8 <SysTick_Config+0x40>)
 8001ae8:	2207      	movs	r2, #7
 8001aea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001aec:	2300      	movs	r3, #0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	e000e010 	.word	0xe000e010

08001afc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7ff ff47 	bl	8001998 <__NVIC_SetPriorityGrouping>
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b086      	sub	sp, #24
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	4603      	mov	r3, r0
 8001b1a:	60b9      	str	r1, [r7, #8]
 8001b1c:	607a      	str	r2, [r7, #4]
 8001b1e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b20:	f7ff ff5e 	bl	80019e0 <__NVIC_GetPriorityGrouping>
 8001b24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	68b9      	ldr	r1, [r7, #8]
 8001b2a:	6978      	ldr	r0, [r7, #20]
 8001b2c:	f7ff ff90 	bl	8001a50 <NVIC_EncodePriority>
 8001b30:	4602      	mov	r2, r0
 8001b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b36:	4611      	mov	r1, r2
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff ff5f 	bl	80019fc <__NVIC_SetPriority>
}
 8001b3e:	bf00      	nop
 8001b40:	3718      	adds	r7, #24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b082      	sub	sp, #8
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f7ff ffb2 	bl	8001ab8 <SysTick_Config>
 8001b54:	4603      	mov	r3, r0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
	...

08001b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b087      	sub	sp, #28
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b6e:	e15a      	b.n	8001e26 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	2101      	movs	r1, #1
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	fa01 f303 	lsl.w	r3, r1, r3
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f000 814c 	beq.w	8001e20 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 0303 	and.w	r3, r3, #3
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d005      	beq.n	8001ba0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d130      	bne.n	8001c02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	2203      	movs	r2, #3
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	68da      	ldr	r2, [r3, #12]
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43db      	mvns	r3, r3
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	4013      	ands	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	091b      	lsrs	r3, r3, #4
 8001bec:	f003 0201 	and.w	r2, r3, #1
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	2b03      	cmp	r3, #3
 8001c0c:	d017      	beq.n	8001c3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	2203      	movs	r2, #3
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4013      	ands	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	4313      	orrs	r3, r2
 8001c36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	693a      	ldr	r2, [r7, #16]
 8001c3c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	2b02      	cmp	r3, #2
 8001c48:	d123      	bne.n	8001c92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	08da      	lsrs	r2, r3, #3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	3208      	adds	r2, #8
 8001c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	220f      	movs	r2, #15
 8001c62:	fa02 f303 	lsl.w	r3, r2, r3
 8001c66:	43db      	mvns	r3, r3
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	691a      	ldr	r2, [r3, #16]
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	693a      	ldr	r2, [r7, #16]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	08da      	lsrs	r2, r3, #3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3208      	adds	r2, #8
 8001c8c:	6939      	ldr	r1, [r7, #16]
 8001c8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	2203      	movs	r2, #3
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 0203 	and.w	r2, r3, #3
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	f000 80a6 	beq.w	8001e20 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd4:	4b5b      	ldr	r3, [pc, #364]	@ (8001e44 <HAL_GPIO_Init+0x2e4>)
 8001cd6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cd8:	4a5a      	ldr	r2, [pc, #360]	@ (8001e44 <HAL_GPIO_Init+0x2e4>)
 8001cda:	f043 0301 	orr.w	r3, r3, #1
 8001cde:	6613      	str	r3, [r2, #96]	@ 0x60
 8001ce0:	4b58      	ldr	r3, [pc, #352]	@ (8001e44 <HAL_GPIO_Init+0x2e4>)
 8001ce2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	60bb      	str	r3, [r7, #8]
 8001cea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cec:	4a56      	ldr	r2, [pc, #344]	@ (8001e48 <HAL_GPIO_Init+0x2e8>)
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	089b      	lsrs	r3, r3, #2
 8001cf2:	3302      	adds	r3, #2
 8001cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	f003 0303 	and.w	r3, r3, #3
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	220f      	movs	r2, #15
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001d16:	d01f      	beq.n	8001d58 <HAL_GPIO_Init+0x1f8>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4a4c      	ldr	r2, [pc, #304]	@ (8001e4c <HAL_GPIO_Init+0x2ec>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d019      	beq.n	8001d54 <HAL_GPIO_Init+0x1f4>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4a4b      	ldr	r2, [pc, #300]	@ (8001e50 <HAL_GPIO_Init+0x2f0>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d013      	beq.n	8001d50 <HAL_GPIO_Init+0x1f0>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a4a      	ldr	r2, [pc, #296]	@ (8001e54 <HAL_GPIO_Init+0x2f4>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d00d      	beq.n	8001d4c <HAL_GPIO_Init+0x1ec>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	4a49      	ldr	r2, [pc, #292]	@ (8001e58 <HAL_GPIO_Init+0x2f8>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d007      	beq.n	8001d48 <HAL_GPIO_Init+0x1e8>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	4a48      	ldr	r2, [pc, #288]	@ (8001e5c <HAL_GPIO_Init+0x2fc>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d101      	bne.n	8001d44 <HAL_GPIO_Init+0x1e4>
 8001d40:	2305      	movs	r3, #5
 8001d42:	e00a      	b.n	8001d5a <HAL_GPIO_Init+0x1fa>
 8001d44:	2306      	movs	r3, #6
 8001d46:	e008      	b.n	8001d5a <HAL_GPIO_Init+0x1fa>
 8001d48:	2304      	movs	r3, #4
 8001d4a:	e006      	b.n	8001d5a <HAL_GPIO_Init+0x1fa>
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e004      	b.n	8001d5a <HAL_GPIO_Init+0x1fa>
 8001d50:	2302      	movs	r3, #2
 8001d52:	e002      	b.n	8001d5a <HAL_GPIO_Init+0x1fa>
 8001d54:	2301      	movs	r3, #1
 8001d56:	e000      	b.n	8001d5a <HAL_GPIO_Init+0x1fa>
 8001d58:	2300      	movs	r3, #0
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	f002 0203 	and.w	r2, r2, #3
 8001d60:	0092      	lsls	r2, r2, #2
 8001d62:	4093      	lsls	r3, r2
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4313      	orrs	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d6a:	4937      	ldr	r1, [pc, #220]	@ (8001e48 <HAL_GPIO_Init+0x2e8>)
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	089b      	lsrs	r3, r3, #2
 8001d70:	3302      	adds	r3, #2
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d78:	4b39      	ldr	r3, [pc, #228]	@ (8001e60 <HAL_GPIO_Init+0x300>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	43db      	mvns	r3, r3
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	4013      	ands	r3, r2
 8001d86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d003      	beq.n	8001d9c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d9c:	4a30      	ldr	r2, [pc, #192]	@ (8001e60 <HAL_GPIO_Init+0x300>)
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001da2:	4b2f      	ldr	r3, [pc, #188]	@ (8001e60 <HAL_GPIO_Init+0x300>)
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	43db      	mvns	r3, r3
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	4013      	ands	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d003      	beq.n	8001dc6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001dc6:	4a26      	ldr	r2, [pc, #152]	@ (8001e60 <HAL_GPIO_Init+0x300>)
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001dcc:	4b24      	ldr	r3, [pc, #144]	@ (8001e60 <HAL_GPIO_Init+0x300>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	693a      	ldr	r2, [r7, #16]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d003      	beq.n	8001df0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001de8:	693a      	ldr	r2, [r7, #16]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001df0:	4a1b      	ldr	r2, [pc, #108]	@ (8001e60 <HAL_GPIO_Init+0x300>)
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001df6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e60 <HAL_GPIO_Init+0x300>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	4013      	ands	r3, r2
 8001e04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e1a:	4a11      	ldr	r2, [pc, #68]	@ (8001e60 <HAL_GPIO_Init+0x300>)
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	3301      	adds	r3, #1
 8001e24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f47f ae9d 	bne.w	8001b70 <HAL_GPIO_Init+0x10>
  }
}
 8001e36:	bf00      	nop
 8001e38:	bf00      	nop
 8001e3a:	371c      	adds	r7, #28
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	40021000 	.word	0x40021000
 8001e48:	40010000 	.word	0x40010000
 8001e4c:	48000400 	.word	0x48000400
 8001e50:	48000800 	.word	0x48000800
 8001e54:	48000c00 	.word	0x48000c00
 8001e58:	48001000 	.word	0x48001000
 8001e5c:	48001400 	.word	0x48001400
 8001e60:	40010400 	.word	0x40010400

08001e64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	807b      	strh	r3, [r7, #2]
 8001e70:	4613      	mov	r3, r2
 8001e72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e74:	787b      	ldrb	r3, [r7, #1]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e7a:	887a      	ldrh	r2, [r7, #2]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e80:	e002      	b.n	8001e88 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e82:	887a      	ldrh	r2, [r7, #2]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d141      	bne.n	8001f26 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ea2:	4b4b      	ldr	r3, [pc, #300]	@ (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001eaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001eae:	d131      	bne.n	8001f14 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001eb0:	4b47      	ldr	r3, [pc, #284]	@ (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001eb6:	4a46      	ldr	r2, [pc, #280]	@ (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ebc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ec0:	4b43      	ldr	r3, [pc, #268]	@ (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001ec8:	4a41      	ldr	r2, [pc, #260]	@ (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ece:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ed0:	4b40      	ldr	r3, [pc, #256]	@ (8001fd4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2232      	movs	r2, #50	@ 0x32
 8001ed6:	fb02 f303 	mul.w	r3, r2, r3
 8001eda:	4a3f      	ldr	r2, [pc, #252]	@ (8001fd8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001edc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee0:	0c9b      	lsrs	r3, r3, #18
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ee6:	e002      	b.n	8001eee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	3b01      	subs	r3, #1
 8001eec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001eee:	4b38      	ldr	r3, [pc, #224]	@ (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ef6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001efa:	d102      	bne.n	8001f02 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f2      	bne.n	8001ee8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f02:	4b33      	ldr	r3, [pc, #204]	@ (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f04:	695b      	ldr	r3, [r3, #20]
 8001f06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f0e:	d158      	bne.n	8001fc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f10:	2303      	movs	r3, #3
 8001f12:	e057      	b.n	8001fc4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f14:	4b2e      	ldr	r3, [pc, #184]	@ (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f1a:	4a2d      	ldr	r2, [pc, #180]	@ (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f20:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001f24:	e04d      	b.n	8001fc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f2c:	d141      	bne.n	8001fb2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f2e:	4b28      	ldr	r3, [pc, #160]	@ (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f3a:	d131      	bne.n	8001fa0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f3c:	4b24      	ldr	r3, [pc, #144]	@ (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f42:	4a23      	ldr	r2, [pc, #140]	@ (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f48:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f4c:	4b20      	ldr	r3, [pc, #128]	@ (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001f54:	4a1e      	ldr	r2, [pc, #120]	@ (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f56:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f5a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f5c:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2232      	movs	r2, #50	@ 0x32
 8001f62:	fb02 f303 	mul.w	r3, r2, r3
 8001f66:	4a1c      	ldr	r2, [pc, #112]	@ (8001fd8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f68:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6c:	0c9b      	lsrs	r3, r3, #18
 8001f6e:	3301      	adds	r3, #1
 8001f70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f72:	e002      	b.n	8001f7a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f7a:	4b15      	ldr	r3, [pc, #84]	@ (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f86:	d102      	bne.n	8001f8e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f2      	bne.n	8001f74 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f8e:	4b10      	ldr	r3, [pc, #64]	@ (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f9a:	d112      	bne.n	8001fc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e011      	b.n	8001fc4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001fac:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001fb0:	e007      	b.n	8001fc2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fb2:	4b07      	ldr	r3, [pc, #28]	@ (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fba:	4a05      	ldr	r2, [pc, #20]	@ (8001fd0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fbc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fc0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	40007000 	.word	0x40007000
 8001fd4:	20000000 	.word	0x20000000
 8001fd8:	431bde83 	.word	0x431bde83

08001fdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b088      	sub	sp, #32
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e2fe      	b.n	80025ec <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 0301 	and.w	r3, r3, #1
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d075      	beq.n	80020e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ffa:	4b97      	ldr	r3, [pc, #604]	@ (8002258 <HAL_RCC_OscConfig+0x27c>)
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f003 030c 	and.w	r3, r3, #12
 8002002:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002004:	4b94      	ldr	r3, [pc, #592]	@ (8002258 <HAL_RCC_OscConfig+0x27c>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	f003 0303 	and.w	r3, r3, #3
 800200c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	2b0c      	cmp	r3, #12
 8002012:	d102      	bne.n	800201a <HAL_RCC_OscConfig+0x3e>
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	2b03      	cmp	r3, #3
 8002018:	d002      	beq.n	8002020 <HAL_RCC_OscConfig+0x44>
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	2b08      	cmp	r3, #8
 800201e:	d10b      	bne.n	8002038 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002020:	4b8d      	ldr	r3, [pc, #564]	@ (8002258 <HAL_RCC_OscConfig+0x27c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d05b      	beq.n	80020e4 <HAL_RCC_OscConfig+0x108>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d157      	bne.n	80020e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e2d9      	b.n	80025ec <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002040:	d106      	bne.n	8002050 <HAL_RCC_OscConfig+0x74>
 8002042:	4b85      	ldr	r3, [pc, #532]	@ (8002258 <HAL_RCC_OscConfig+0x27c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a84      	ldr	r2, [pc, #528]	@ (8002258 <HAL_RCC_OscConfig+0x27c>)
 8002048:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	e01d      	b.n	800208c <HAL_RCC_OscConfig+0xb0>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002058:	d10c      	bne.n	8002074 <HAL_RCC_OscConfig+0x98>
 800205a:	4b7f      	ldr	r3, [pc, #508]	@ (8002258 <HAL_RCC_OscConfig+0x27c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a7e      	ldr	r2, [pc, #504]	@ (8002258 <HAL_RCC_OscConfig+0x27c>)
 8002060:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002064:	6013      	str	r3, [r2, #0]
 8002066:	4b7c      	ldr	r3, [pc, #496]	@ (8002258 <HAL_RCC_OscConfig+0x27c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a7b      	ldr	r2, [pc, #492]	@ (8002258 <HAL_RCC_OscConfig+0x27c>)
 800206c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	e00b      	b.n	800208c <HAL_RCC_OscConfig+0xb0>
 8002074:	4b78      	ldr	r3, [pc, #480]	@ (8002258 <HAL_RCC_OscConfig+0x27c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a77      	ldr	r2, [pc, #476]	@ (8002258 <HAL_RCC_OscConfig+0x27c>)
 800207a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800207e:	6013      	str	r3, [r2, #0]
 8002080:	4b75      	ldr	r3, [pc, #468]	@ (8002258 <HAL_RCC_OscConfig+0x27c>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a74      	ldr	r2, [pc, #464]	@ (8002258 <HAL_RCC_OscConfig+0x27c>)
 8002086:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800208a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d013      	beq.n	80020bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002094:	f7ff fc74 	bl	8001980 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800209c:	f7ff fc70 	bl	8001980 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b64      	cmp	r3, #100	@ 0x64
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e29e      	b.n	80025ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020ae:	4b6a      	ldr	r3, [pc, #424]	@ (8002258 <HAL_RCC_OscConfig+0x27c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0f0      	beq.n	800209c <HAL_RCC_OscConfig+0xc0>
 80020ba:	e014      	b.n	80020e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020bc:	f7ff fc60 	bl	8001980 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020c4:	f7ff fc5c 	bl	8001980 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b64      	cmp	r3, #100	@ 0x64
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e28a      	b.n	80025ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020d6:	4b60      	ldr	r3, [pc, #384]	@ (8002258 <HAL_RCC_OscConfig+0x27c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f0      	bne.n	80020c4 <HAL_RCC_OscConfig+0xe8>
 80020e2:	e000      	b.n	80020e6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d075      	beq.n	80021de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020f2:	4b59      	ldr	r3, [pc, #356]	@ (8002258 <HAL_RCC_OscConfig+0x27c>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 030c 	and.w	r3, r3, #12
 80020fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020fc:	4b56      	ldr	r3, [pc, #344]	@ (8002258 <HAL_RCC_OscConfig+0x27c>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	f003 0303 	and.w	r3, r3, #3
 8002104:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	2b0c      	cmp	r3, #12
 800210a:	d102      	bne.n	8002112 <HAL_RCC_OscConfig+0x136>
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	2b02      	cmp	r3, #2
 8002110:	d002      	beq.n	8002118 <HAL_RCC_OscConfig+0x13c>
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	2b04      	cmp	r3, #4
 8002116:	d11f      	bne.n	8002158 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002118:	4b4f      	ldr	r3, [pc, #316]	@ (8002258 <HAL_RCC_OscConfig+0x27c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002120:	2b00      	cmp	r3, #0
 8002122:	d005      	beq.n	8002130 <HAL_RCC_OscConfig+0x154>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d101      	bne.n	8002130 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e25d      	b.n	80025ec <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002130:	4b49      	ldr	r3, [pc, #292]	@ (8002258 <HAL_RCC_OscConfig+0x27c>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	061b      	lsls	r3, r3, #24
 800213e:	4946      	ldr	r1, [pc, #280]	@ (8002258 <HAL_RCC_OscConfig+0x27c>)
 8002140:	4313      	orrs	r3, r2
 8002142:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002144:	4b45      	ldr	r3, [pc, #276]	@ (800225c <HAL_RCC_OscConfig+0x280>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff fbcd 	bl	80018e8 <HAL_InitTick>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d043      	beq.n	80021dc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e249      	b.n	80025ec <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d023      	beq.n	80021a8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002160:	4b3d      	ldr	r3, [pc, #244]	@ (8002258 <HAL_RCC_OscConfig+0x27c>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a3c      	ldr	r2, [pc, #240]	@ (8002258 <HAL_RCC_OscConfig+0x27c>)
 8002166:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800216a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800216c:	f7ff fc08 	bl	8001980 <HAL_GetTick>
 8002170:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002172:	e008      	b.n	8002186 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002174:	f7ff fc04 	bl	8001980 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	693b      	ldr	r3, [r7, #16]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d901      	bls.n	8002186 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002182:	2303      	movs	r3, #3
 8002184:	e232      	b.n	80025ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002186:	4b34      	ldr	r3, [pc, #208]	@ (8002258 <HAL_RCC_OscConfig+0x27c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800218e:	2b00      	cmp	r3, #0
 8002190:	d0f0      	beq.n	8002174 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002192:	4b31      	ldr	r3, [pc, #196]	@ (8002258 <HAL_RCC_OscConfig+0x27c>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	061b      	lsls	r3, r3, #24
 80021a0:	492d      	ldr	r1, [pc, #180]	@ (8002258 <HAL_RCC_OscConfig+0x27c>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	604b      	str	r3, [r1, #4]
 80021a6:	e01a      	b.n	80021de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002258 <HAL_RCC_OscConfig+0x27c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a2a      	ldr	r2, [pc, #168]	@ (8002258 <HAL_RCC_OscConfig+0x27c>)
 80021ae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80021b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b4:	f7ff fbe4 	bl	8001980 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021bc:	f7ff fbe0 	bl	8001980 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e20e      	b.n	80025ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021ce:	4b22      	ldr	r3, [pc, #136]	@ (8002258 <HAL_RCC_OscConfig+0x27c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f0      	bne.n	80021bc <HAL_RCC_OscConfig+0x1e0>
 80021da:	e000      	b.n	80021de <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021dc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0308 	and.w	r3, r3, #8
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d041      	beq.n	800226e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d01c      	beq.n	800222c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021f2:	4b19      	ldr	r3, [pc, #100]	@ (8002258 <HAL_RCC_OscConfig+0x27c>)
 80021f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80021f8:	4a17      	ldr	r2, [pc, #92]	@ (8002258 <HAL_RCC_OscConfig+0x27c>)
 80021fa:	f043 0301 	orr.w	r3, r3, #1
 80021fe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002202:	f7ff fbbd 	bl	8001980 <HAL_GetTick>
 8002206:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002208:	e008      	b.n	800221c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800220a:	f7ff fbb9 	bl	8001980 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	2b02      	cmp	r3, #2
 8002216:	d901      	bls.n	800221c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e1e7      	b.n	80025ec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800221c:	4b0e      	ldr	r3, [pc, #56]	@ (8002258 <HAL_RCC_OscConfig+0x27c>)
 800221e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	2b00      	cmp	r3, #0
 8002228:	d0ef      	beq.n	800220a <HAL_RCC_OscConfig+0x22e>
 800222a:	e020      	b.n	800226e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800222c:	4b0a      	ldr	r3, [pc, #40]	@ (8002258 <HAL_RCC_OscConfig+0x27c>)
 800222e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002232:	4a09      	ldr	r2, [pc, #36]	@ (8002258 <HAL_RCC_OscConfig+0x27c>)
 8002234:	f023 0301 	bic.w	r3, r3, #1
 8002238:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800223c:	f7ff fba0 	bl	8001980 <HAL_GetTick>
 8002240:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002242:	e00d      	b.n	8002260 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002244:	f7ff fb9c 	bl	8001980 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d906      	bls.n	8002260 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	e1ca      	b.n	80025ec <HAL_RCC_OscConfig+0x610>
 8002256:	bf00      	nop
 8002258:	40021000 	.word	0x40021000
 800225c:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002260:	4b8c      	ldr	r3, [pc, #560]	@ (8002494 <HAL_RCC_OscConfig+0x4b8>)
 8002262:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1ea      	bne.n	8002244 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 0304 	and.w	r3, r3, #4
 8002276:	2b00      	cmp	r3, #0
 8002278:	f000 80a6 	beq.w	80023c8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800227c:	2300      	movs	r3, #0
 800227e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002280:	4b84      	ldr	r3, [pc, #528]	@ (8002494 <HAL_RCC_OscConfig+0x4b8>)
 8002282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002284:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d101      	bne.n	8002290 <HAL_RCC_OscConfig+0x2b4>
 800228c:	2301      	movs	r3, #1
 800228e:	e000      	b.n	8002292 <HAL_RCC_OscConfig+0x2b6>
 8002290:	2300      	movs	r3, #0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00d      	beq.n	80022b2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002296:	4b7f      	ldr	r3, [pc, #508]	@ (8002494 <HAL_RCC_OscConfig+0x4b8>)
 8002298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800229a:	4a7e      	ldr	r2, [pc, #504]	@ (8002494 <HAL_RCC_OscConfig+0x4b8>)
 800229c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80022a2:	4b7c      	ldr	r3, [pc, #496]	@ (8002494 <HAL_RCC_OscConfig+0x4b8>)
 80022a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80022ae:	2301      	movs	r3, #1
 80022b0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022b2:	4b79      	ldr	r3, [pc, #484]	@ (8002498 <HAL_RCC_OscConfig+0x4bc>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d118      	bne.n	80022f0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022be:	4b76      	ldr	r3, [pc, #472]	@ (8002498 <HAL_RCC_OscConfig+0x4bc>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a75      	ldr	r2, [pc, #468]	@ (8002498 <HAL_RCC_OscConfig+0x4bc>)
 80022c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022ca:	f7ff fb59 	bl	8001980 <HAL_GetTick>
 80022ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d2:	f7ff fb55 	bl	8001980 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e183      	b.n	80025ec <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022e4:	4b6c      	ldr	r3, [pc, #432]	@ (8002498 <HAL_RCC_OscConfig+0x4bc>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d0f0      	beq.n	80022d2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d108      	bne.n	800230a <HAL_RCC_OscConfig+0x32e>
 80022f8:	4b66      	ldr	r3, [pc, #408]	@ (8002494 <HAL_RCC_OscConfig+0x4b8>)
 80022fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80022fe:	4a65      	ldr	r2, [pc, #404]	@ (8002494 <HAL_RCC_OscConfig+0x4b8>)
 8002300:	f043 0301 	orr.w	r3, r3, #1
 8002304:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002308:	e024      	b.n	8002354 <HAL_RCC_OscConfig+0x378>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	2b05      	cmp	r3, #5
 8002310:	d110      	bne.n	8002334 <HAL_RCC_OscConfig+0x358>
 8002312:	4b60      	ldr	r3, [pc, #384]	@ (8002494 <HAL_RCC_OscConfig+0x4b8>)
 8002314:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002318:	4a5e      	ldr	r2, [pc, #376]	@ (8002494 <HAL_RCC_OscConfig+0x4b8>)
 800231a:	f043 0304 	orr.w	r3, r3, #4
 800231e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002322:	4b5c      	ldr	r3, [pc, #368]	@ (8002494 <HAL_RCC_OscConfig+0x4b8>)
 8002324:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002328:	4a5a      	ldr	r2, [pc, #360]	@ (8002494 <HAL_RCC_OscConfig+0x4b8>)
 800232a:	f043 0301 	orr.w	r3, r3, #1
 800232e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002332:	e00f      	b.n	8002354 <HAL_RCC_OscConfig+0x378>
 8002334:	4b57      	ldr	r3, [pc, #348]	@ (8002494 <HAL_RCC_OscConfig+0x4b8>)
 8002336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800233a:	4a56      	ldr	r2, [pc, #344]	@ (8002494 <HAL_RCC_OscConfig+0x4b8>)
 800233c:	f023 0301 	bic.w	r3, r3, #1
 8002340:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002344:	4b53      	ldr	r3, [pc, #332]	@ (8002494 <HAL_RCC_OscConfig+0x4b8>)
 8002346:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800234a:	4a52      	ldr	r2, [pc, #328]	@ (8002494 <HAL_RCC_OscConfig+0x4b8>)
 800234c:	f023 0304 	bic.w	r3, r3, #4
 8002350:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d016      	beq.n	800238a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800235c:	f7ff fb10 	bl	8001980 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002362:	e00a      	b.n	800237a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002364:	f7ff fb0c 	bl	8001980 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002372:	4293      	cmp	r3, r2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e138      	b.n	80025ec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800237a:	4b46      	ldr	r3, [pc, #280]	@ (8002494 <HAL_RCC_OscConfig+0x4b8>)
 800237c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002380:	f003 0302 	and.w	r3, r3, #2
 8002384:	2b00      	cmp	r3, #0
 8002386:	d0ed      	beq.n	8002364 <HAL_RCC_OscConfig+0x388>
 8002388:	e015      	b.n	80023b6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800238a:	f7ff faf9 	bl	8001980 <HAL_GetTick>
 800238e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002390:	e00a      	b.n	80023a8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002392:	f7ff faf5 	bl	8001980 <HAL_GetTick>
 8002396:	4602      	mov	r2, r0
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e121      	b.n	80025ec <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023a8:	4b3a      	ldr	r3, [pc, #232]	@ (8002494 <HAL_RCC_OscConfig+0x4b8>)
 80023aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1ed      	bne.n	8002392 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023b6:	7ffb      	ldrb	r3, [r7, #31]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d105      	bne.n	80023c8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023bc:	4b35      	ldr	r3, [pc, #212]	@ (8002494 <HAL_RCC_OscConfig+0x4b8>)
 80023be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c0:	4a34      	ldr	r2, [pc, #208]	@ (8002494 <HAL_RCC_OscConfig+0x4b8>)
 80023c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023c6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0320 	and.w	r3, r3, #32
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d03c      	beq.n	800244e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d01c      	beq.n	8002416 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80023dc:	4b2d      	ldr	r3, [pc, #180]	@ (8002494 <HAL_RCC_OscConfig+0x4b8>)
 80023de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80023e2:	4a2c      	ldr	r2, [pc, #176]	@ (8002494 <HAL_RCC_OscConfig+0x4b8>)
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ec:	f7ff fac8 	bl	8001980 <HAL_GetTick>
 80023f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80023f2:	e008      	b.n	8002406 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023f4:	f7ff fac4 	bl	8001980 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d901      	bls.n	8002406 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	e0f2      	b.n	80025ec <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002406:	4b23      	ldr	r3, [pc, #140]	@ (8002494 <HAL_RCC_OscConfig+0x4b8>)
 8002408:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0ef      	beq.n	80023f4 <HAL_RCC_OscConfig+0x418>
 8002414:	e01b      	b.n	800244e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002416:	4b1f      	ldr	r3, [pc, #124]	@ (8002494 <HAL_RCC_OscConfig+0x4b8>)
 8002418:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800241c:	4a1d      	ldr	r2, [pc, #116]	@ (8002494 <HAL_RCC_OscConfig+0x4b8>)
 800241e:	f023 0301 	bic.w	r3, r3, #1
 8002422:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002426:	f7ff faab 	bl	8001980 <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800242c:	e008      	b.n	8002440 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800242e:	f7ff faa7 	bl	8001980 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d901      	bls.n	8002440 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e0d5      	b.n	80025ec <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002440:	4b14      	ldr	r3, [pc, #80]	@ (8002494 <HAL_RCC_OscConfig+0x4b8>)
 8002442:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d1ef      	bne.n	800242e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	2b00      	cmp	r3, #0
 8002454:	f000 80c9 	beq.w	80025ea <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002458:	4b0e      	ldr	r3, [pc, #56]	@ (8002494 <HAL_RCC_OscConfig+0x4b8>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 030c 	and.w	r3, r3, #12
 8002460:	2b0c      	cmp	r3, #12
 8002462:	f000 8083 	beq.w	800256c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	2b02      	cmp	r3, #2
 800246c:	d15e      	bne.n	800252c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800246e:	4b09      	ldr	r3, [pc, #36]	@ (8002494 <HAL_RCC_OscConfig+0x4b8>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a08      	ldr	r2, [pc, #32]	@ (8002494 <HAL_RCC_OscConfig+0x4b8>)
 8002474:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002478:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800247a:	f7ff fa81 	bl	8001980 <HAL_GetTick>
 800247e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002480:	e00c      	b.n	800249c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002482:	f7ff fa7d 	bl	8001980 <HAL_GetTick>
 8002486:	4602      	mov	r2, r0
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	1ad3      	subs	r3, r2, r3
 800248c:	2b02      	cmp	r3, #2
 800248e:	d905      	bls.n	800249c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	e0ab      	b.n	80025ec <HAL_RCC_OscConfig+0x610>
 8002494:	40021000 	.word	0x40021000
 8002498:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800249c:	4b55      	ldr	r3, [pc, #340]	@ (80025f4 <HAL_RCC_OscConfig+0x618>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1ec      	bne.n	8002482 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024a8:	4b52      	ldr	r3, [pc, #328]	@ (80025f4 <HAL_RCC_OscConfig+0x618>)
 80024aa:	68da      	ldr	r2, [r3, #12]
 80024ac:	4b52      	ldr	r3, [pc, #328]	@ (80025f8 <HAL_RCC_OscConfig+0x61c>)
 80024ae:	4013      	ands	r3, r2
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	6a11      	ldr	r1, [r2, #32]
 80024b4:	687a      	ldr	r2, [r7, #4]
 80024b6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80024b8:	3a01      	subs	r2, #1
 80024ba:	0112      	lsls	r2, r2, #4
 80024bc:	4311      	orrs	r1, r2
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80024c2:	0212      	lsls	r2, r2, #8
 80024c4:	4311      	orrs	r1, r2
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80024ca:	0852      	lsrs	r2, r2, #1
 80024cc:	3a01      	subs	r2, #1
 80024ce:	0552      	lsls	r2, r2, #21
 80024d0:	4311      	orrs	r1, r2
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80024d6:	0852      	lsrs	r2, r2, #1
 80024d8:	3a01      	subs	r2, #1
 80024da:	0652      	lsls	r2, r2, #25
 80024dc:	4311      	orrs	r1, r2
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80024e2:	06d2      	lsls	r2, r2, #27
 80024e4:	430a      	orrs	r2, r1
 80024e6:	4943      	ldr	r1, [pc, #268]	@ (80025f4 <HAL_RCC_OscConfig+0x618>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024ec:	4b41      	ldr	r3, [pc, #260]	@ (80025f4 <HAL_RCC_OscConfig+0x618>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a40      	ldr	r2, [pc, #256]	@ (80025f4 <HAL_RCC_OscConfig+0x618>)
 80024f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024f6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80024f8:	4b3e      	ldr	r3, [pc, #248]	@ (80025f4 <HAL_RCC_OscConfig+0x618>)
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	4a3d      	ldr	r2, [pc, #244]	@ (80025f4 <HAL_RCC_OscConfig+0x618>)
 80024fe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002502:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002504:	f7ff fa3c 	bl	8001980 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800250a:	e008      	b.n	800251e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800250c:	f7ff fa38 	bl	8001980 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d901      	bls.n	800251e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e066      	b.n	80025ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800251e:	4b35      	ldr	r3, [pc, #212]	@ (80025f4 <HAL_RCC_OscConfig+0x618>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002526:	2b00      	cmp	r3, #0
 8002528:	d0f0      	beq.n	800250c <HAL_RCC_OscConfig+0x530>
 800252a:	e05e      	b.n	80025ea <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800252c:	4b31      	ldr	r3, [pc, #196]	@ (80025f4 <HAL_RCC_OscConfig+0x618>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a30      	ldr	r2, [pc, #192]	@ (80025f4 <HAL_RCC_OscConfig+0x618>)
 8002532:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002536:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002538:	f7ff fa22 	bl	8001980 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002540:	f7ff fa1e 	bl	8001980 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e04c      	b.n	80025ec <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002552:	4b28      	ldr	r3, [pc, #160]	@ (80025f4 <HAL_RCC_OscConfig+0x618>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800255e:	4b25      	ldr	r3, [pc, #148]	@ (80025f4 <HAL_RCC_OscConfig+0x618>)
 8002560:	68da      	ldr	r2, [r3, #12]
 8002562:	4924      	ldr	r1, [pc, #144]	@ (80025f4 <HAL_RCC_OscConfig+0x618>)
 8002564:	4b25      	ldr	r3, [pc, #148]	@ (80025fc <HAL_RCC_OscConfig+0x620>)
 8002566:	4013      	ands	r3, r2
 8002568:	60cb      	str	r3, [r1, #12]
 800256a:	e03e      	b.n	80025ea <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	69db      	ldr	r3, [r3, #28]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d101      	bne.n	8002578 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002574:	2301      	movs	r3, #1
 8002576:	e039      	b.n	80025ec <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002578:	4b1e      	ldr	r3, [pc, #120]	@ (80025f4 <HAL_RCC_OscConfig+0x618>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f003 0203 	and.w	r2, r3, #3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	429a      	cmp	r2, r3
 800258a:	d12c      	bne.n	80025e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002596:	3b01      	subs	r3, #1
 8002598:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800259a:	429a      	cmp	r2, r3
 800259c:	d123      	bne.n	80025e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d11b      	bne.n	80025e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025b8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d113      	bne.n	80025e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c8:	085b      	lsrs	r3, r3, #1
 80025ca:	3b01      	subs	r3, #1
 80025cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d109      	bne.n	80025e6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80025d2:	697b      	ldr	r3, [r7, #20]
 80025d4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025dc:	085b      	lsrs	r3, r3, #1
 80025de:	3b01      	subs	r3, #1
 80025e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d001      	beq.n	80025ea <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	3720      	adds	r7, #32
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40021000 	.word	0x40021000
 80025f8:	019f800c 	.word	0x019f800c
 80025fc:	feeefffc 	.word	0xfeeefffc

08002600 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800260a:	2300      	movs	r3, #0
 800260c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d101      	bne.n	8002618 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e11e      	b.n	8002856 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002618:	4b91      	ldr	r3, [pc, #580]	@ (8002860 <HAL_RCC_ClockConfig+0x260>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 030f 	and.w	r3, r3, #15
 8002620:	683a      	ldr	r2, [r7, #0]
 8002622:	429a      	cmp	r2, r3
 8002624:	d910      	bls.n	8002648 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002626:	4b8e      	ldr	r3, [pc, #568]	@ (8002860 <HAL_RCC_ClockConfig+0x260>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f023 020f 	bic.w	r2, r3, #15
 800262e:	498c      	ldr	r1, [pc, #560]	@ (8002860 <HAL_RCC_ClockConfig+0x260>)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	4313      	orrs	r3, r2
 8002634:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002636:	4b8a      	ldr	r3, [pc, #552]	@ (8002860 <HAL_RCC_ClockConfig+0x260>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 030f 	and.w	r3, r3, #15
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	429a      	cmp	r2, r3
 8002642:	d001      	beq.n	8002648 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e106      	b.n	8002856 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b00      	cmp	r3, #0
 8002652:	d073      	beq.n	800273c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2b03      	cmp	r3, #3
 800265a:	d129      	bne.n	80026b0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800265c:	4b81      	ldr	r3, [pc, #516]	@ (8002864 <HAL_RCC_ClockConfig+0x264>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e0f4      	b.n	8002856 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800266c:	f000 f99e 	bl	80029ac <RCC_GetSysClockFreqFromPLLSource>
 8002670:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	4a7c      	ldr	r2, [pc, #496]	@ (8002868 <HAL_RCC_ClockConfig+0x268>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d93f      	bls.n	80026fa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800267a:	4b7a      	ldr	r3, [pc, #488]	@ (8002864 <HAL_RCC_ClockConfig+0x264>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d009      	beq.n	800269a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800268e:	2b00      	cmp	r3, #0
 8002690:	d033      	beq.n	80026fa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002696:	2b00      	cmp	r3, #0
 8002698:	d12f      	bne.n	80026fa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800269a:	4b72      	ldr	r3, [pc, #456]	@ (8002864 <HAL_RCC_ClockConfig+0x264>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80026a2:	4a70      	ldr	r2, [pc, #448]	@ (8002864 <HAL_RCC_ClockConfig+0x264>)
 80026a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026a8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80026aa:	2380      	movs	r3, #128	@ 0x80
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	e024      	b.n	80026fa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d107      	bne.n	80026c8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026b8:	4b6a      	ldr	r3, [pc, #424]	@ (8002864 <HAL_RCC_ClockConfig+0x264>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d109      	bne.n	80026d8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e0c6      	b.n	8002856 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026c8:	4b66      	ldr	r3, [pc, #408]	@ (8002864 <HAL_RCC_ClockConfig+0x264>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e0be      	b.n	8002856 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80026d8:	f000 f8ce 	bl	8002878 <HAL_RCC_GetSysClockFreq>
 80026dc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	4a61      	ldr	r2, [pc, #388]	@ (8002868 <HAL_RCC_ClockConfig+0x268>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d909      	bls.n	80026fa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80026e6:	4b5f      	ldr	r3, [pc, #380]	@ (8002864 <HAL_RCC_ClockConfig+0x264>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80026ee:	4a5d      	ldr	r2, [pc, #372]	@ (8002864 <HAL_RCC_ClockConfig+0x264>)
 80026f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026f4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80026f6:	2380      	movs	r3, #128	@ 0x80
 80026f8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80026fa:	4b5a      	ldr	r3, [pc, #360]	@ (8002864 <HAL_RCC_ClockConfig+0x264>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f023 0203 	bic.w	r2, r3, #3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	4957      	ldr	r1, [pc, #348]	@ (8002864 <HAL_RCC_ClockConfig+0x264>)
 8002708:	4313      	orrs	r3, r2
 800270a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800270c:	f7ff f938 	bl	8001980 <HAL_GetTick>
 8002710:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002712:	e00a      	b.n	800272a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002714:	f7ff f934 	bl	8001980 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002722:	4293      	cmp	r3, r2
 8002724:	d901      	bls.n	800272a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e095      	b.n	8002856 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800272a:	4b4e      	ldr	r3, [pc, #312]	@ (8002864 <HAL_RCC_ClockConfig+0x264>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f003 020c 	and.w	r2, r3, #12
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	429a      	cmp	r2, r3
 800273a:	d1eb      	bne.n	8002714 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d023      	beq.n	8002790 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	2b00      	cmp	r3, #0
 8002752:	d005      	beq.n	8002760 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002754:	4b43      	ldr	r3, [pc, #268]	@ (8002864 <HAL_RCC_ClockConfig+0x264>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	4a42      	ldr	r2, [pc, #264]	@ (8002864 <HAL_RCC_ClockConfig+0x264>)
 800275a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800275e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0308 	and.w	r3, r3, #8
 8002768:	2b00      	cmp	r3, #0
 800276a:	d007      	beq.n	800277c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800276c:	4b3d      	ldr	r3, [pc, #244]	@ (8002864 <HAL_RCC_ClockConfig+0x264>)
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002774:	4a3b      	ldr	r2, [pc, #236]	@ (8002864 <HAL_RCC_ClockConfig+0x264>)
 8002776:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800277a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800277c:	4b39      	ldr	r3, [pc, #228]	@ (8002864 <HAL_RCC_ClockConfig+0x264>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	4936      	ldr	r1, [pc, #216]	@ (8002864 <HAL_RCC_ClockConfig+0x264>)
 800278a:	4313      	orrs	r3, r2
 800278c:	608b      	str	r3, [r1, #8]
 800278e:	e008      	b.n	80027a2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	2b80      	cmp	r3, #128	@ 0x80
 8002794:	d105      	bne.n	80027a2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002796:	4b33      	ldr	r3, [pc, #204]	@ (8002864 <HAL_RCC_ClockConfig+0x264>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	4a32      	ldr	r2, [pc, #200]	@ (8002864 <HAL_RCC_ClockConfig+0x264>)
 800279c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80027a0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027a2:	4b2f      	ldr	r3, [pc, #188]	@ (8002860 <HAL_RCC_ClockConfig+0x260>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 030f 	and.w	r3, r3, #15
 80027aa:	683a      	ldr	r2, [r7, #0]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d21d      	bcs.n	80027ec <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002860 <HAL_RCC_ClockConfig+0x260>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f023 020f 	bic.w	r2, r3, #15
 80027b8:	4929      	ldr	r1, [pc, #164]	@ (8002860 <HAL_RCC_ClockConfig+0x260>)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	4313      	orrs	r3, r2
 80027be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80027c0:	f7ff f8de 	bl	8001980 <HAL_GetTick>
 80027c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027c6:	e00a      	b.n	80027de <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c8:	f7ff f8da 	bl	8001980 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e03b      	b.n	8002856 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027de:	4b20      	ldr	r3, [pc, #128]	@ (8002860 <HAL_RCC_ClockConfig+0x260>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d1ed      	bne.n	80027c8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0304 	and.w	r3, r3, #4
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d008      	beq.n	800280a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002864 <HAL_RCC_ClockConfig+0x264>)
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	4917      	ldr	r1, [pc, #92]	@ (8002864 <HAL_RCC_ClockConfig+0x264>)
 8002806:	4313      	orrs	r3, r2
 8002808:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0308 	and.w	r3, r3, #8
 8002812:	2b00      	cmp	r3, #0
 8002814:	d009      	beq.n	800282a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002816:	4b13      	ldr	r3, [pc, #76]	@ (8002864 <HAL_RCC_ClockConfig+0x264>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	00db      	lsls	r3, r3, #3
 8002824:	490f      	ldr	r1, [pc, #60]	@ (8002864 <HAL_RCC_ClockConfig+0x264>)
 8002826:	4313      	orrs	r3, r2
 8002828:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800282a:	f000 f825 	bl	8002878 <HAL_RCC_GetSysClockFreq>
 800282e:	4602      	mov	r2, r0
 8002830:	4b0c      	ldr	r3, [pc, #48]	@ (8002864 <HAL_RCC_ClockConfig+0x264>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	091b      	lsrs	r3, r3, #4
 8002836:	f003 030f 	and.w	r3, r3, #15
 800283a:	490c      	ldr	r1, [pc, #48]	@ (800286c <HAL_RCC_ClockConfig+0x26c>)
 800283c:	5ccb      	ldrb	r3, [r1, r3]
 800283e:	f003 031f 	and.w	r3, r3, #31
 8002842:	fa22 f303 	lsr.w	r3, r2, r3
 8002846:	4a0a      	ldr	r2, [pc, #40]	@ (8002870 <HAL_RCC_ClockConfig+0x270>)
 8002848:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800284a:	4b0a      	ldr	r3, [pc, #40]	@ (8002874 <HAL_RCC_ClockConfig+0x274>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff f84a 	bl	80018e8 <HAL_InitTick>
 8002854:	4603      	mov	r3, r0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3718      	adds	r7, #24
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40022000 	.word	0x40022000
 8002864:	40021000 	.word	0x40021000
 8002868:	04c4b400 	.word	0x04c4b400
 800286c:	0800a8bc 	.word	0x0800a8bc
 8002870:	20000000 	.word	0x20000000
 8002874:	2000000c 	.word	0x2000000c

08002878 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002878:	b480      	push	{r7}
 800287a:	b087      	sub	sp, #28
 800287c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800287e:	4b2c      	ldr	r3, [pc, #176]	@ (8002930 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002880:	689b      	ldr	r3, [r3, #8]
 8002882:	f003 030c 	and.w	r3, r3, #12
 8002886:	2b04      	cmp	r3, #4
 8002888:	d102      	bne.n	8002890 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800288a:	4b2a      	ldr	r3, [pc, #168]	@ (8002934 <HAL_RCC_GetSysClockFreq+0xbc>)
 800288c:	613b      	str	r3, [r7, #16]
 800288e:	e047      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002890:	4b27      	ldr	r3, [pc, #156]	@ (8002930 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f003 030c 	and.w	r3, r3, #12
 8002898:	2b08      	cmp	r3, #8
 800289a:	d102      	bne.n	80028a2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800289c:	4b26      	ldr	r3, [pc, #152]	@ (8002938 <HAL_RCC_GetSysClockFreq+0xc0>)
 800289e:	613b      	str	r3, [r7, #16]
 80028a0:	e03e      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80028a2:	4b23      	ldr	r3, [pc, #140]	@ (8002930 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 030c 	and.w	r3, r3, #12
 80028aa:	2b0c      	cmp	r3, #12
 80028ac:	d136      	bne.n	800291c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028ae:	4b20      	ldr	r3, [pc, #128]	@ (8002930 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	f003 0303 	and.w	r3, r3, #3
 80028b6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028b8:	4b1d      	ldr	r3, [pc, #116]	@ (8002930 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	091b      	lsrs	r3, r3, #4
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	3301      	adds	r3, #1
 80028c4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2b03      	cmp	r3, #3
 80028ca:	d10c      	bne.n	80028e6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028cc:	4a1a      	ldr	r2, [pc, #104]	@ (8002938 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d4:	4a16      	ldr	r2, [pc, #88]	@ (8002930 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028d6:	68d2      	ldr	r2, [r2, #12]
 80028d8:	0a12      	lsrs	r2, r2, #8
 80028da:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80028de:	fb02 f303 	mul.w	r3, r2, r3
 80028e2:	617b      	str	r3, [r7, #20]
      break;
 80028e4:	e00c      	b.n	8002900 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028e6:	4a13      	ldr	r2, [pc, #76]	@ (8002934 <HAL_RCC_GetSysClockFreq+0xbc>)
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ee:	4a10      	ldr	r2, [pc, #64]	@ (8002930 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028f0:	68d2      	ldr	r2, [r2, #12]
 80028f2:	0a12      	lsrs	r2, r2, #8
 80028f4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80028f8:	fb02 f303 	mul.w	r3, r2, r3
 80028fc:	617b      	str	r3, [r7, #20]
      break;
 80028fe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002900:	4b0b      	ldr	r3, [pc, #44]	@ (8002930 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	0e5b      	lsrs	r3, r3, #25
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	3301      	adds	r3, #1
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	fbb2 f3f3 	udiv	r3, r2, r3
 8002918:	613b      	str	r3, [r7, #16]
 800291a:	e001      	b.n	8002920 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800291c:	2300      	movs	r3, #0
 800291e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002920:	693b      	ldr	r3, [r7, #16]
}
 8002922:	4618      	mov	r0, r3
 8002924:	371c      	adds	r7, #28
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	40021000 	.word	0x40021000
 8002934:	00f42400 	.word	0x00f42400
 8002938:	007a1200 	.word	0x007a1200

0800293c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002940:	4b03      	ldr	r3, [pc, #12]	@ (8002950 <HAL_RCC_GetHCLKFreq+0x14>)
 8002942:	681b      	ldr	r3, [r3, #0]
}
 8002944:	4618      	mov	r0, r3
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	20000000 	.word	0x20000000

08002954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002958:	f7ff fff0 	bl	800293c <HAL_RCC_GetHCLKFreq>
 800295c:	4602      	mov	r2, r0
 800295e:	4b06      	ldr	r3, [pc, #24]	@ (8002978 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	0a1b      	lsrs	r3, r3, #8
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	4904      	ldr	r1, [pc, #16]	@ (800297c <HAL_RCC_GetPCLK1Freq+0x28>)
 800296a:	5ccb      	ldrb	r3, [r1, r3]
 800296c:	f003 031f 	and.w	r3, r3, #31
 8002970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002974:	4618      	mov	r0, r3
 8002976:	bd80      	pop	{r7, pc}
 8002978:	40021000 	.word	0x40021000
 800297c:	0800a8cc 	.word	0x0800a8cc

08002980 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002984:	f7ff ffda 	bl	800293c <HAL_RCC_GetHCLKFreq>
 8002988:	4602      	mov	r2, r0
 800298a:	4b06      	ldr	r3, [pc, #24]	@ (80029a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	0adb      	lsrs	r3, r3, #11
 8002990:	f003 0307 	and.w	r3, r3, #7
 8002994:	4904      	ldr	r1, [pc, #16]	@ (80029a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002996:	5ccb      	ldrb	r3, [r1, r3]
 8002998:	f003 031f 	and.w	r3, r3, #31
 800299c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40021000 	.word	0x40021000
 80029a8:	0800a8cc 	.word	0x0800a8cc

080029ac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b087      	sub	sp, #28
 80029b0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029b2:	4b1e      	ldr	r3, [pc, #120]	@ (8002a2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029bc:	4b1b      	ldr	r3, [pc, #108]	@ (8002a2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	091b      	lsrs	r3, r3, #4
 80029c2:	f003 030f 	and.w	r3, r3, #15
 80029c6:	3301      	adds	r3, #1
 80029c8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	2b03      	cmp	r3, #3
 80029ce:	d10c      	bne.n	80029ea <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029d0:	4a17      	ldr	r2, [pc, #92]	@ (8002a30 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029d8:	4a14      	ldr	r2, [pc, #80]	@ (8002a2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029da:	68d2      	ldr	r2, [r2, #12]
 80029dc:	0a12      	lsrs	r2, r2, #8
 80029de:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80029e2:	fb02 f303 	mul.w	r3, r2, r3
 80029e6:	617b      	str	r3, [r7, #20]
    break;
 80029e8:	e00c      	b.n	8002a04 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029ea:	4a12      	ldr	r2, [pc, #72]	@ (8002a34 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f2:	4a0e      	ldr	r2, [pc, #56]	@ (8002a2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80029f4:	68d2      	ldr	r2, [r2, #12]
 80029f6:	0a12      	lsrs	r2, r2, #8
 80029f8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80029fc:	fb02 f303 	mul.w	r3, r2, r3
 8002a00:	617b      	str	r3, [r7, #20]
    break;
 8002a02:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a04:	4b09      	ldr	r3, [pc, #36]	@ (8002a2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	0e5b      	lsrs	r3, r3, #25
 8002a0a:	f003 0303 	and.w	r3, r3, #3
 8002a0e:	3301      	adds	r3, #1
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002a14:	697a      	ldr	r2, [r7, #20]
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002a1e:	687b      	ldr	r3, [r7, #4]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	371c      	adds	r7, #28
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	007a1200 	.word	0x007a1200
 8002a34:	00f42400 	.word	0x00f42400

08002a38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e042      	b.n	8002ad0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d106      	bne.n	8002a62 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a5c:	6878      	ldr	r0, [r7, #4]
 8002a5e:	f000 f83b 	bl	8002ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2224      	movs	r2, #36	@ 0x24
 8002a66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 0201 	bic.w	r2, r2, #1
 8002a78:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d002      	beq.n	8002a88 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 fb8c 	bl	80031a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 f8bd 	bl	8002c08 <UART_SetConfig>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d101      	bne.n	8002a98 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e01b      	b.n	8002ad0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002aa6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	689a      	ldr	r2, [r3, #8]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ab6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f042 0201 	orr.w	r2, r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 fc0b 	bl	80032e4 <UART_CheckIdleState>
 8002ace:	4603      	mov	r3, r0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08a      	sub	sp, #40	@ 0x28
 8002af0:	af02      	add	r7, sp, #8
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	603b      	str	r3, [r7, #0]
 8002af8:	4613      	mov	r3, r2
 8002afa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b02:	2b20      	cmp	r3, #32
 8002b04:	d17b      	bne.n	8002bfe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d002      	beq.n	8002b12 <HAL_UART_Transmit+0x26>
 8002b0c:	88fb      	ldrh	r3, [r7, #6]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e074      	b.n	8002c00 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	2221      	movs	r2, #33	@ 0x21
 8002b22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b26:	f7fe ff2b 	bl	8001980 <HAL_GetTick>
 8002b2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	88fa      	ldrh	r2, [r7, #6]
 8002b30:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	88fa      	ldrh	r2, [r7, #6]
 8002b38:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b44:	d108      	bne.n	8002b58 <HAL_UART_Transmit+0x6c>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d104      	bne.n	8002b58 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	61bb      	str	r3, [r7, #24]
 8002b56:	e003      	b.n	8002b60 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b60:	e030      	b.n	8002bc4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	9300      	str	r3, [sp, #0]
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	2180      	movs	r1, #128	@ 0x80
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f000 fc63 	bl	8003438 <UART_WaitOnFlagUntilTimeout>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e03d      	b.n	8002c00 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d10b      	bne.n	8002ba2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	881b      	ldrh	r3, [r3, #0]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b98:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002b9a:	69bb      	ldr	r3, [r7, #24]
 8002b9c:	3302      	adds	r3, #2
 8002b9e:	61bb      	str	r3, [r7, #24]
 8002ba0:	e007      	b.n	8002bb2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	781a      	ldrb	r2, [r3, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002bb8:	b29b      	uxth	r3, r3
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1c8      	bne.n	8002b62 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	9300      	str	r3, [sp, #0]
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	2140      	movs	r1, #64	@ 0x40
 8002bda:	68f8      	ldr	r0, [r7, #12]
 8002bdc:	f000 fc2c 	bl	8003438 <UART_WaitOnFlagUntilTimeout>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d005      	beq.n	8002bf2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2220      	movs	r2, #32
 8002bea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e006      	b.n	8002c00 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	e000      	b.n	8002c00 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002bfe:	2302      	movs	r3, #2
  }
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3720      	adds	r7, #32
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c0c:	b08c      	sub	sp, #48	@ 0x30
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c12:	2300      	movs	r3, #0
 8002c14:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	431a      	orrs	r2, r3
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	431a      	orrs	r2, r3
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	69db      	ldr	r3, [r3, #28]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	4bab      	ldr	r3, [pc, #684]	@ (8002ee4 <UART_SetConfig+0x2dc>)
 8002c38:	4013      	ands	r3, r2
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	6812      	ldr	r2, [r2, #0]
 8002c3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c40:	430b      	orrs	r3, r1
 8002c42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	68da      	ldr	r2, [r3, #12]
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4aa0      	ldr	r2, [pc, #640]	@ (8002ee8 <UART_SetConfig+0x2e0>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d004      	beq.n	8002c74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c70:	4313      	orrs	r3, r2
 8002c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8002c7e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8002c82:	697a      	ldr	r2, [r7, #20]
 8002c84:	6812      	ldr	r2, [r2, #0]
 8002c86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c88:	430b      	orrs	r3, r1
 8002c8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c92:	f023 010f 	bic.w	r1, r3, #15
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a91      	ldr	r2, [pc, #580]	@ (8002eec <UART_SetConfig+0x2e4>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d125      	bne.n	8002cf8 <UART_SetConfig+0xf0>
 8002cac:	4b90      	ldr	r3, [pc, #576]	@ (8002ef0 <UART_SetConfig+0x2e8>)
 8002cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	2b03      	cmp	r3, #3
 8002cb8:	d81a      	bhi.n	8002cf0 <UART_SetConfig+0xe8>
 8002cba:	a201      	add	r2, pc, #4	@ (adr r2, 8002cc0 <UART_SetConfig+0xb8>)
 8002cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc0:	08002cd1 	.word	0x08002cd1
 8002cc4:	08002ce1 	.word	0x08002ce1
 8002cc8:	08002cd9 	.word	0x08002cd9
 8002ccc:	08002ce9 	.word	0x08002ce9
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cd6:	e0d6      	b.n	8002e86 <UART_SetConfig+0x27e>
 8002cd8:	2302      	movs	r3, #2
 8002cda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cde:	e0d2      	b.n	8002e86 <UART_SetConfig+0x27e>
 8002ce0:	2304      	movs	r3, #4
 8002ce2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002ce6:	e0ce      	b.n	8002e86 <UART_SetConfig+0x27e>
 8002ce8:	2308      	movs	r3, #8
 8002cea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cee:	e0ca      	b.n	8002e86 <UART_SetConfig+0x27e>
 8002cf0:	2310      	movs	r3, #16
 8002cf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002cf6:	e0c6      	b.n	8002e86 <UART_SetConfig+0x27e>
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a7d      	ldr	r2, [pc, #500]	@ (8002ef4 <UART_SetConfig+0x2ec>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d138      	bne.n	8002d74 <UART_SetConfig+0x16c>
 8002d02:	4b7b      	ldr	r3, [pc, #492]	@ (8002ef0 <UART_SetConfig+0x2e8>)
 8002d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d08:	f003 030c 	and.w	r3, r3, #12
 8002d0c:	2b0c      	cmp	r3, #12
 8002d0e:	d82d      	bhi.n	8002d6c <UART_SetConfig+0x164>
 8002d10:	a201      	add	r2, pc, #4	@ (adr r2, 8002d18 <UART_SetConfig+0x110>)
 8002d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d16:	bf00      	nop
 8002d18:	08002d4d 	.word	0x08002d4d
 8002d1c:	08002d6d 	.word	0x08002d6d
 8002d20:	08002d6d 	.word	0x08002d6d
 8002d24:	08002d6d 	.word	0x08002d6d
 8002d28:	08002d5d 	.word	0x08002d5d
 8002d2c:	08002d6d 	.word	0x08002d6d
 8002d30:	08002d6d 	.word	0x08002d6d
 8002d34:	08002d6d 	.word	0x08002d6d
 8002d38:	08002d55 	.word	0x08002d55
 8002d3c:	08002d6d 	.word	0x08002d6d
 8002d40:	08002d6d 	.word	0x08002d6d
 8002d44:	08002d6d 	.word	0x08002d6d
 8002d48:	08002d65 	.word	0x08002d65
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d52:	e098      	b.n	8002e86 <UART_SetConfig+0x27e>
 8002d54:	2302      	movs	r3, #2
 8002d56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d5a:	e094      	b.n	8002e86 <UART_SetConfig+0x27e>
 8002d5c:	2304      	movs	r3, #4
 8002d5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d62:	e090      	b.n	8002e86 <UART_SetConfig+0x27e>
 8002d64:	2308      	movs	r3, #8
 8002d66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d6a:	e08c      	b.n	8002e86 <UART_SetConfig+0x27e>
 8002d6c:	2310      	movs	r3, #16
 8002d6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002d72:	e088      	b.n	8002e86 <UART_SetConfig+0x27e>
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a5f      	ldr	r2, [pc, #380]	@ (8002ef8 <UART_SetConfig+0x2f0>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d125      	bne.n	8002dca <UART_SetConfig+0x1c2>
 8002d7e:	4b5c      	ldr	r3, [pc, #368]	@ (8002ef0 <UART_SetConfig+0x2e8>)
 8002d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d84:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002d88:	2b30      	cmp	r3, #48	@ 0x30
 8002d8a:	d016      	beq.n	8002dba <UART_SetConfig+0x1b2>
 8002d8c:	2b30      	cmp	r3, #48	@ 0x30
 8002d8e:	d818      	bhi.n	8002dc2 <UART_SetConfig+0x1ba>
 8002d90:	2b20      	cmp	r3, #32
 8002d92:	d00a      	beq.n	8002daa <UART_SetConfig+0x1a2>
 8002d94:	2b20      	cmp	r3, #32
 8002d96:	d814      	bhi.n	8002dc2 <UART_SetConfig+0x1ba>
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d002      	beq.n	8002da2 <UART_SetConfig+0x19a>
 8002d9c:	2b10      	cmp	r3, #16
 8002d9e:	d008      	beq.n	8002db2 <UART_SetConfig+0x1aa>
 8002da0:	e00f      	b.n	8002dc2 <UART_SetConfig+0x1ba>
 8002da2:	2300      	movs	r3, #0
 8002da4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002da8:	e06d      	b.n	8002e86 <UART_SetConfig+0x27e>
 8002daa:	2302      	movs	r3, #2
 8002dac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002db0:	e069      	b.n	8002e86 <UART_SetConfig+0x27e>
 8002db2:	2304      	movs	r3, #4
 8002db4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002db8:	e065      	b.n	8002e86 <UART_SetConfig+0x27e>
 8002dba:	2308      	movs	r3, #8
 8002dbc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dc0:	e061      	b.n	8002e86 <UART_SetConfig+0x27e>
 8002dc2:	2310      	movs	r3, #16
 8002dc4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dc8:	e05d      	b.n	8002e86 <UART_SetConfig+0x27e>
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a4b      	ldr	r2, [pc, #300]	@ (8002efc <UART_SetConfig+0x2f4>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d125      	bne.n	8002e20 <UART_SetConfig+0x218>
 8002dd4:	4b46      	ldr	r3, [pc, #280]	@ (8002ef0 <UART_SetConfig+0x2e8>)
 8002dd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dda:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002dde:	2bc0      	cmp	r3, #192	@ 0xc0
 8002de0:	d016      	beq.n	8002e10 <UART_SetConfig+0x208>
 8002de2:	2bc0      	cmp	r3, #192	@ 0xc0
 8002de4:	d818      	bhi.n	8002e18 <UART_SetConfig+0x210>
 8002de6:	2b80      	cmp	r3, #128	@ 0x80
 8002de8:	d00a      	beq.n	8002e00 <UART_SetConfig+0x1f8>
 8002dea:	2b80      	cmp	r3, #128	@ 0x80
 8002dec:	d814      	bhi.n	8002e18 <UART_SetConfig+0x210>
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d002      	beq.n	8002df8 <UART_SetConfig+0x1f0>
 8002df2:	2b40      	cmp	r3, #64	@ 0x40
 8002df4:	d008      	beq.n	8002e08 <UART_SetConfig+0x200>
 8002df6:	e00f      	b.n	8002e18 <UART_SetConfig+0x210>
 8002df8:	2300      	movs	r3, #0
 8002dfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002dfe:	e042      	b.n	8002e86 <UART_SetConfig+0x27e>
 8002e00:	2302      	movs	r3, #2
 8002e02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e06:	e03e      	b.n	8002e86 <UART_SetConfig+0x27e>
 8002e08:	2304      	movs	r3, #4
 8002e0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e0e:	e03a      	b.n	8002e86 <UART_SetConfig+0x27e>
 8002e10:	2308      	movs	r3, #8
 8002e12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e16:	e036      	b.n	8002e86 <UART_SetConfig+0x27e>
 8002e18:	2310      	movs	r3, #16
 8002e1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e1e:	e032      	b.n	8002e86 <UART_SetConfig+0x27e>
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a30      	ldr	r2, [pc, #192]	@ (8002ee8 <UART_SetConfig+0x2e0>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d12a      	bne.n	8002e80 <UART_SetConfig+0x278>
 8002e2a:	4b31      	ldr	r3, [pc, #196]	@ (8002ef0 <UART_SetConfig+0x2e8>)
 8002e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e30:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002e34:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002e38:	d01a      	beq.n	8002e70 <UART_SetConfig+0x268>
 8002e3a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002e3e:	d81b      	bhi.n	8002e78 <UART_SetConfig+0x270>
 8002e40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e44:	d00c      	beq.n	8002e60 <UART_SetConfig+0x258>
 8002e46:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e4a:	d815      	bhi.n	8002e78 <UART_SetConfig+0x270>
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d003      	beq.n	8002e58 <UART_SetConfig+0x250>
 8002e50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e54:	d008      	beq.n	8002e68 <UART_SetConfig+0x260>
 8002e56:	e00f      	b.n	8002e78 <UART_SetConfig+0x270>
 8002e58:	2300      	movs	r3, #0
 8002e5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e5e:	e012      	b.n	8002e86 <UART_SetConfig+0x27e>
 8002e60:	2302      	movs	r3, #2
 8002e62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e66:	e00e      	b.n	8002e86 <UART_SetConfig+0x27e>
 8002e68:	2304      	movs	r3, #4
 8002e6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e6e:	e00a      	b.n	8002e86 <UART_SetConfig+0x27e>
 8002e70:	2308      	movs	r3, #8
 8002e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e76:	e006      	b.n	8002e86 <UART_SetConfig+0x27e>
 8002e78:	2310      	movs	r3, #16
 8002e7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8002e7e:	e002      	b.n	8002e86 <UART_SetConfig+0x27e>
 8002e80:	2310      	movs	r3, #16
 8002e82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a17      	ldr	r2, [pc, #92]	@ (8002ee8 <UART_SetConfig+0x2e0>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	f040 80a8 	bne.w	8002fe2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002e92:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002e96:	2b08      	cmp	r3, #8
 8002e98:	d834      	bhi.n	8002f04 <UART_SetConfig+0x2fc>
 8002e9a:	a201      	add	r2, pc, #4	@ (adr r2, 8002ea0 <UART_SetConfig+0x298>)
 8002e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea0:	08002ec5 	.word	0x08002ec5
 8002ea4:	08002f05 	.word	0x08002f05
 8002ea8:	08002ecd 	.word	0x08002ecd
 8002eac:	08002f05 	.word	0x08002f05
 8002eb0:	08002ed3 	.word	0x08002ed3
 8002eb4:	08002f05 	.word	0x08002f05
 8002eb8:	08002f05 	.word	0x08002f05
 8002ebc:	08002f05 	.word	0x08002f05
 8002ec0:	08002edb 	.word	0x08002edb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ec4:	f7ff fd46 	bl	8002954 <HAL_RCC_GetPCLK1Freq>
 8002ec8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002eca:	e021      	b.n	8002f10 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8002f00 <UART_SetConfig+0x2f8>)
 8002ece:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002ed0:	e01e      	b.n	8002f10 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ed2:	f7ff fcd1 	bl	8002878 <HAL_RCC_GetSysClockFreq>
 8002ed6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8002ed8:	e01a      	b.n	8002f10 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002eda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ede:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8002ee0:	e016      	b.n	8002f10 <UART_SetConfig+0x308>
 8002ee2:	bf00      	nop
 8002ee4:	cfff69f3 	.word	0xcfff69f3
 8002ee8:	40008000 	.word	0x40008000
 8002eec:	40013800 	.word	0x40013800
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	40004400 	.word	0x40004400
 8002ef8:	40004800 	.word	0x40004800
 8002efc:	40004c00 	.word	0x40004c00
 8002f00:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002f04:	2300      	movs	r3, #0
 8002f06:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8002f0e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f000 812a 	beq.w	800316c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f1c:	4a9e      	ldr	r2, [pc, #632]	@ (8003198 <UART_SetConfig+0x590>)
 8002f1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f22:	461a      	mov	r2, r3
 8002f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f26:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	4613      	mov	r3, r2
 8002f32:	005b      	lsls	r3, r3, #1
 8002f34:	4413      	add	r3, r2
 8002f36:	69ba      	ldr	r2, [r7, #24]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d305      	bcc.n	8002f48 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d903      	bls.n	8002f50 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002f4e:	e10d      	b.n	800316c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f52:	2200      	movs	r2, #0
 8002f54:	60bb      	str	r3, [r7, #8]
 8002f56:	60fa      	str	r2, [r7, #12]
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5c:	4a8e      	ldr	r2, [pc, #568]	@ (8003198 <UART_SetConfig+0x590>)
 8002f5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	2200      	movs	r2, #0
 8002f66:	603b      	str	r3, [r7, #0]
 8002f68:	607a      	str	r2, [r7, #4]
 8002f6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f72:	f7fd ffbf 	bl	8000ef4 <__aeabi_uldivmod>
 8002f76:	4602      	mov	r2, r0
 8002f78:	460b      	mov	r3, r1
 8002f7a:	4610      	mov	r0, r2
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	f04f 0200 	mov.w	r2, #0
 8002f82:	f04f 0300 	mov.w	r3, #0
 8002f86:	020b      	lsls	r3, r1, #8
 8002f88:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002f8c:	0202      	lsls	r2, r0, #8
 8002f8e:	6979      	ldr	r1, [r7, #20]
 8002f90:	6849      	ldr	r1, [r1, #4]
 8002f92:	0849      	lsrs	r1, r1, #1
 8002f94:	2000      	movs	r0, #0
 8002f96:	460c      	mov	r4, r1
 8002f98:	4605      	mov	r5, r0
 8002f9a:	eb12 0804 	adds.w	r8, r2, r4
 8002f9e:	eb43 0905 	adc.w	r9, r3, r5
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	469a      	mov	sl, r3
 8002faa:	4693      	mov	fp, r2
 8002fac:	4652      	mov	r2, sl
 8002fae:	465b      	mov	r3, fp
 8002fb0:	4640      	mov	r0, r8
 8002fb2:	4649      	mov	r1, r9
 8002fb4:	f7fd ff9e 	bl	8000ef4 <__aeabi_uldivmod>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	460b      	mov	r3, r1
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002fc0:	6a3b      	ldr	r3, [r7, #32]
 8002fc2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002fc6:	d308      	bcc.n	8002fda <UART_SetConfig+0x3d2>
 8002fc8:	6a3b      	ldr	r3, [r7, #32]
 8002fca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002fce:	d204      	bcs.n	8002fda <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6a3a      	ldr	r2, [r7, #32]
 8002fd6:	60da      	str	r2, [r3, #12]
 8002fd8:	e0c8      	b.n	800316c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8002fe0:	e0c4      	b.n	800316c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	69db      	ldr	r3, [r3, #28]
 8002fe6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fea:	d167      	bne.n	80030bc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8002fec:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002ff0:	2b08      	cmp	r3, #8
 8002ff2:	d828      	bhi.n	8003046 <UART_SetConfig+0x43e>
 8002ff4:	a201      	add	r2, pc, #4	@ (adr r2, 8002ffc <UART_SetConfig+0x3f4>)
 8002ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ffa:	bf00      	nop
 8002ffc:	08003021 	.word	0x08003021
 8003000:	08003029 	.word	0x08003029
 8003004:	08003031 	.word	0x08003031
 8003008:	08003047 	.word	0x08003047
 800300c:	08003037 	.word	0x08003037
 8003010:	08003047 	.word	0x08003047
 8003014:	08003047 	.word	0x08003047
 8003018:	08003047 	.word	0x08003047
 800301c:	0800303f 	.word	0x0800303f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003020:	f7ff fc98 	bl	8002954 <HAL_RCC_GetPCLK1Freq>
 8003024:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003026:	e014      	b.n	8003052 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003028:	f7ff fcaa 	bl	8002980 <HAL_RCC_GetPCLK2Freq>
 800302c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800302e:	e010      	b.n	8003052 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003030:	4b5a      	ldr	r3, [pc, #360]	@ (800319c <UART_SetConfig+0x594>)
 8003032:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003034:	e00d      	b.n	8003052 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003036:	f7ff fc1f 	bl	8002878 <HAL_RCC_GetSysClockFreq>
 800303a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800303c:	e009      	b.n	8003052 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800303e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003042:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003044:	e005      	b.n	8003052 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003046:	2300      	movs	r3, #0
 8003048:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003050:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003054:	2b00      	cmp	r3, #0
 8003056:	f000 8089 	beq.w	800316c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305e:	4a4e      	ldr	r2, [pc, #312]	@ (8003198 <UART_SetConfig+0x590>)
 8003060:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003064:	461a      	mov	r2, r3
 8003066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003068:	fbb3 f3f2 	udiv	r3, r3, r2
 800306c:	005a      	lsls	r2, r3, #1
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	085b      	lsrs	r3, r3, #1
 8003074:	441a      	add	r2, r3
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	fbb2 f3f3 	udiv	r3, r2, r3
 800307e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003080:	6a3b      	ldr	r3, [r7, #32]
 8003082:	2b0f      	cmp	r3, #15
 8003084:	d916      	bls.n	80030b4 <UART_SetConfig+0x4ac>
 8003086:	6a3b      	ldr	r3, [r7, #32]
 8003088:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800308c:	d212      	bcs.n	80030b4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800308e:	6a3b      	ldr	r3, [r7, #32]
 8003090:	b29b      	uxth	r3, r3
 8003092:	f023 030f 	bic.w	r3, r3, #15
 8003096:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003098:	6a3b      	ldr	r3, [r7, #32]
 800309a:	085b      	lsrs	r3, r3, #1
 800309c:	b29b      	uxth	r3, r3
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	8bfb      	ldrh	r3, [r7, #30]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	8bfa      	ldrh	r2, [r7, #30]
 80030b0:	60da      	str	r2, [r3, #12]
 80030b2:	e05b      	b.n	800316c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80030ba:	e057      	b.n	800316c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80030bc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80030c0:	2b08      	cmp	r3, #8
 80030c2:	d828      	bhi.n	8003116 <UART_SetConfig+0x50e>
 80030c4:	a201      	add	r2, pc, #4	@ (adr r2, 80030cc <UART_SetConfig+0x4c4>)
 80030c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ca:	bf00      	nop
 80030cc:	080030f1 	.word	0x080030f1
 80030d0:	080030f9 	.word	0x080030f9
 80030d4:	08003101 	.word	0x08003101
 80030d8:	08003117 	.word	0x08003117
 80030dc:	08003107 	.word	0x08003107
 80030e0:	08003117 	.word	0x08003117
 80030e4:	08003117 	.word	0x08003117
 80030e8:	08003117 	.word	0x08003117
 80030ec:	0800310f 	.word	0x0800310f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030f0:	f7ff fc30 	bl	8002954 <HAL_RCC_GetPCLK1Freq>
 80030f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80030f6:	e014      	b.n	8003122 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030f8:	f7ff fc42 	bl	8002980 <HAL_RCC_GetPCLK2Freq>
 80030fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80030fe:	e010      	b.n	8003122 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003100:	4b26      	ldr	r3, [pc, #152]	@ (800319c <UART_SetConfig+0x594>)
 8003102:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003104:	e00d      	b.n	8003122 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003106:	f7ff fbb7 	bl	8002878 <HAL_RCC_GetSysClockFreq>
 800310a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800310c:	e009      	b.n	8003122 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800310e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003112:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003114:	e005      	b.n	8003122 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003116:	2300      	movs	r3, #0
 8003118:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003120:	bf00      	nop
    }

    if (pclk != 0U)
 8003122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003124:	2b00      	cmp	r3, #0
 8003126:	d021      	beq.n	800316c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800312c:	4a1a      	ldr	r2, [pc, #104]	@ (8003198 <UART_SetConfig+0x590>)
 800312e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003132:	461a      	mov	r2, r3
 8003134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003136:	fbb3 f2f2 	udiv	r2, r3, r2
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	085b      	lsrs	r3, r3, #1
 8003140:	441a      	add	r2, r3
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	fbb2 f3f3 	udiv	r3, r2, r3
 800314a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	2b0f      	cmp	r3, #15
 8003150:	d909      	bls.n	8003166 <UART_SetConfig+0x55e>
 8003152:	6a3b      	ldr	r3, [r7, #32]
 8003154:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003158:	d205      	bcs.n	8003166 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800315a:	6a3b      	ldr	r3, [r7, #32]
 800315c:	b29a      	uxth	r2, r3
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	60da      	str	r2, [r3, #12]
 8003164:	e002      	b.n	800316c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	2201      	movs	r2, #1
 8003170:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	2201      	movs	r2, #1
 8003178:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	2200      	movs	r2, #0
 8003180:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	2200      	movs	r2, #0
 8003186:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003188:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800318c:	4618      	mov	r0, r3
 800318e:	3730      	adds	r7, #48	@ 0x30
 8003190:	46bd      	mov	sp, r7
 8003192:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003196:	bf00      	nop
 8003198:	0800a8d4 	.word	0x0800a8d4
 800319c:	00f42400 	.word	0x00f42400

080031a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ac:	f003 0308 	and.w	r3, r3, #8
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00a      	beq.n	80031ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00a      	beq.n	80031ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00a      	beq.n	800320e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	430a      	orrs	r2, r1
 800320c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003212:	f003 0304 	and.w	r3, r3, #4
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00a      	beq.n	8003230 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	430a      	orrs	r2, r1
 800322e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003234:	f003 0310 	and.w	r3, r3, #16
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00a      	beq.n	8003252 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003256:	f003 0320 	and.w	r3, r3, #32
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00a      	beq.n	8003274 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	430a      	orrs	r2, r1
 8003272:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003278:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800327c:	2b00      	cmp	r3, #0
 800327e:	d01a      	beq.n	80032b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	430a      	orrs	r2, r1
 8003294:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800329a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800329e:	d10a      	bne.n	80032b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00a      	beq.n	80032d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	430a      	orrs	r2, r1
 80032d6:	605a      	str	r2, [r3, #4]
  }
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b098      	sub	sp, #96	@ 0x60
 80032e8:	af02      	add	r7, sp, #8
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032f4:	f7fe fb44 	bl	8001980 <HAL_GetTick>
 80032f8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0308 	and.w	r3, r3, #8
 8003304:	2b08      	cmp	r3, #8
 8003306:	d12f      	bne.n	8003368 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003308:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800330c:	9300      	str	r3, [sp, #0]
 800330e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003310:	2200      	movs	r2, #0
 8003312:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003316:	6878      	ldr	r0, [r7, #4]
 8003318:	f000 f88e 	bl	8003438 <UART_WaitOnFlagUntilTimeout>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	d022      	beq.n	8003368 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800332a:	e853 3f00 	ldrex	r3, [r3]
 800332e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003332:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003336:	653b      	str	r3, [r7, #80]	@ 0x50
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	461a      	mov	r2, r3
 800333e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003340:	647b      	str	r3, [r7, #68]	@ 0x44
 8003342:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003344:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003346:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003348:	e841 2300 	strex	r3, r2, [r1]
 800334c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800334e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1e6      	bne.n	8003322 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2220      	movs	r2, #32
 8003358:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2200      	movs	r2, #0
 8003360:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e063      	b.n	8003430 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0304 	and.w	r3, r3, #4
 8003372:	2b04      	cmp	r3, #4
 8003374:	d149      	bne.n	800340a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003376:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800337e:	2200      	movs	r2, #0
 8003380:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 f857 	bl	8003438 <UART_WaitOnFlagUntilTimeout>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d03c      	beq.n	800340a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003398:	e853 3f00 	ldrex	r3, [r3]
 800339c:	623b      	str	r3, [r7, #32]
   return(result);
 800339e:	6a3b      	ldr	r3, [r7, #32]
 80033a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80033a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	461a      	mov	r2, r3
 80033ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80033b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80033b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033b6:	e841 2300 	strex	r3, r2, [r1]
 80033ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80033bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1e6      	bne.n	8003390 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	3308      	adds	r3, #8
 80033c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	e853 3f00 	ldrex	r3, [r3]
 80033d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f023 0301 	bic.w	r3, r3, #1
 80033d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	3308      	adds	r3, #8
 80033e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033e2:	61fa      	str	r2, [r7, #28]
 80033e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e6:	69b9      	ldr	r1, [r7, #24]
 80033e8:	69fa      	ldr	r2, [r7, #28]
 80033ea:	e841 2300 	strex	r3, r2, [r1]
 80033ee:	617b      	str	r3, [r7, #20]
   return(result);
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1e5      	bne.n	80033c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2220      	movs	r2, #32
 80033fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e012      	b.n	8003430 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2220      	movs	r2, #32
 800340e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2220      	movs	r2, #32
 8003416:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3758      	adds	r7, #88	@ 0x58
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}

08003438 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	603b      	str	r3, [r7, #0]
 8003444:	4613      	mov	r3, r2
 8003446:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003448:	e04f      	b.n	80034ea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003450:	d04b      	beq.n	80034ea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003452:	f7fe fa95 	bl	8001980 <HAL_GetTick>
 8003456:	4602      	mov	r2, r0
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	69ba      	ldr	r2, [r7, #24]
 800345e:	429a      	cmp	r2, r3
 8003460:	d302      	bcc.n	8003468 <UART_WaitOnFlagUntilTimeout+0x30>
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d101      	bne.n	800346c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003468:	2303      	movs	r3, #3
 800346a:	e04e      	b.n	800350a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0304 	and.w	r3, r3, #4
 8003476:	2b00      	cmp	r3, #0
 8003478:	d037      	beq.n	80034ea <UART_WaitOnFlagUntilTimeout+0xb2>
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	2b80      	cmp	r3, #128	@ 0x80
 800347e:	d034      	beq.n	80034ea <UART_WaitOnFlagUntilTimeout+0xb2>
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	2b40      	cmp	r3, #64	@ 0x40
 8003484:	d031      	beq.n	80034ea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	69db      	ldr	r3, [r3, #28]
 800348c:	f003 0308 	and.w	r3, r3, #8
 8003490:	2b08      	cmp	r3, #8
 8003492:	d110      	bne.n	80034b6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2208      	movs	r2, #8
 800349a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800349c:	68f8      	ldr	r0, [r7, #12]
 800349e:	f000 f838 	bl	8003512 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2208      	movs	r2, #8
 80034a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e029      	b.n	800350a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	69db      	ldr	r3, [r3, #28]
 80034bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034c4:	d111      	bne.n	80034ea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80034ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 f81e 	bl	8003512 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2220      	movs	r2, #32
 80034da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e00f      	b.n	800350a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	69da      	ldr	r2, [r3, #28]
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	4013      	ands	r3, r2
 80034f4:	68ba      	ldr	r2, [r7, #8]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	bf0c      	ite	eq
 80034fa:	2301      	moveq	r3, #1
 80034fc:	2300      	movne	r3, #0
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	461a      	mov	r2, r3
 8003502:	79fb      	ldrb	r3, [r7, #7]
 8003504:	429a      	cmp	r2, r3
 8003506:	d0a0      	beq.n	800344a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003512:	b480      	push	{r7}
 8003514:	b095      	sub	sp, #84	@ 0x54
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003522:	e853 3f00 	ldrex	r3, [r3]
 8003526:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800352a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800352e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	461a      	mov	r2, r3
 8003536:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003538:	643b      	str	r3, [r7, #64]	@ 0x40
 800353a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800353c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800353e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003540:	e841 2300 	strex	r3, r2, [r1]
 8003544:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003548:	2b00      	cmp	r3, #0
 800354a:	d1e6      	bne.n	800351a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	3308      	adds	r3, #8
 8003552:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003554:	6a3b      	ldr	r3, [r7, #32]
 8003556:	e853 3f00 	ldrex	r3, [r3]
 800355a:	61fb      	str	r3, [r7, #28]
   return(result);
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003562:	f023 0301 	bic.w	r3, r3, #1
 8003566:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	3308      	adds	r3, #8
 800356e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003570:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003572:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003574:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003576:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003578:	e841 2300 	strex	r3, r2, [r1]
 800357c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800357e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1e3      	bne.n	800354c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003588:	2b01      	cmp	r3, #1
 800358a:	d118      	bne.n	80035be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	e853 3f00 	ldrex	r3, [r3]
 8003598:	60bb      	str	r3, [r7, #8]
   return(result);
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	f023 0310 	bic.w	r3, r3, #16
 80035a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	461a      	mov	r2, r3
 80035a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035aa:	61bb      	str	r3, [r7, #24]
 80035ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ae:	6979      	ldr	r1, [r7, #20]
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	e841 2300 	strex	r3, r2, [r1]
 80035b6:	613b      	str	r3, [r7, #16]
   return(result);
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1e6      	bne.n	800358c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80035d2:	bf00      	nop
 80035d4:	3754      	adds	r7, #84	@ 0x54
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
	...

080035e0 <TunePID>:
float position_diff_error;

int generation_num = 0;
int population_num = 0;

void TunePID() {
 80035e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035e4:	b092      	sub	sp, #72	@ 0x48
 80035e6:	af0c      	add	r7, sp, #48	@ 0x30
	initialize_testParam();
 80035e8:	f000 fa40 	bl	8003a6c <initialize_testParam>

#if TUNE_MOTOR1
	best_population.pid = tuned_pid1;
#else
	best_population.pid = tuned_pid2;
 80035ec:	4b43      	ldr	r3, [pc, #268]	@ (80036fc <TunePID+0x11c>)
 80035ee:	4a44      	ldr	r2, [pc, #272]	@ (8003700 <TunePID+0x120>)
 80035f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80035f2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
	best_population.sync_pid = tuned_sync_pid;
 80035f6:	4b41      	ldr	r3, [pc, #260]	@ (80036fc <TunePID+0x11c>)
 80035f8:	4a42      	ldr	r2, [pc, #264]	@ (8003704 <TunePID+0x124>)
 80035fa:	330c      	adds	r3, #12
 80035fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80035fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	best_population.integral_preload = tuned_integral_preload;
 8003602:	4b41      	ldr	r3, [pc, #260]	@ (8003708 <TunePID+0x128>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a3d      	ldr	r2, [pc, #244]	@ (80036fc <TunePID+0x11c>)
 8003608:	6193      	str	r3, [r2, #24]
	initialize_population();
 800360a:	f000 f885 	bl	8003718 <initialize_population>

	for (generation_num = 0; generation_num < GENERATIONS; generation_num++) {
 800360e:	4b3f      	ldr	r3, [pc, #252]	@ (800370c <TunePID+0x12c>)
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]
 8003614:	e023      	b.n	800365e <TunePID+0x7e>
		if ((generation_num > 0)
 8003616:	4b3d      	ldr	r3, [pc, #244]	@ (800370c <TunePID+0x12c>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2b00      	cmp	r3, #0
 800361c:	dd10      	ble.n	8003640 <TunePID+0x60>
				&& (generation_num % POPULATION_INIT_INTERVAL == 0)) {
 800361e:	4b3b      	ldr	r3, [pc, #236]	@ (800370c <TunePID+0x12c>)
 8003620:	6819      	ldr	r1, [r3, #0]
 8003622:	4b3b      	ldr	r3, [pc, #236]	@ (8003710 <TunePID+0x130>)
 8003624:	fb83 2301 	smull	r2, r3, r3, r1
 8003628:	109a      	asrs	r2, r3, #2
 800362a:	17cb      	asrs	r3, r1, #31
 800362c:	1ad2      	subs	r2, r2, r3
 800362e:	4613      	mov	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	4413      	add	r3, r2
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	1aca      	subs	r2, r1, r3
 8003638:	2a00      	cmp	r2, #0
 800363a:	d101      	bne.n	8003640 <TunePID+0x60>
			initialize_population();
 800363c:	f000 f86c 	bl	8003718 <initialize_population>
		}

		evaluate_population();
 8003640:	f000 ff5c 	bl	80044fc <evaluate_population>
		get_best_individual();
 8003644:	f000 fa4a 	bl	8003adc <get_best_individual>
		select_individuals();
 8003648:	f000 fa8a 	bl	8003b60 <select_individuals>
		crossover_individuals();
 800364c:	f000 fb38 	bl	8003cc0 <crossover_individuals>
		mutate_individuals();
 8003650:	f000 fd62 	bl	8004118 <mutate_individuals>
	for (generation_num = 0; generation_num < GENERATIONS; generation_num++) {
 8003654:	4b2d      	ldr	r3, [pc, #180]	@ (800370c <TunePID+0x12c>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	3301      	adds	r3, #1
 800365a:	4a2c      	ldr	r2, [pc, #176]	@ (800370c <TunePID+0x12c>)
 800365c:	6013      	str	r3, [r2, #0]
 800365e:	4b2b      	ldr	r3, [pc, #172]	@ (800370c <TunePID+0x12c>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2b77      	cmp	r3, #119	@ 0x77
 8003664:	ddd7      	ble.n	8003616 <TunePID+0x36>
	}

	printf("PID: %f %f %f \n SYNC: %f %f %f \n PRELOAD: %f \n",
			best_population.pid.Kp, best_population.pid.Ki,
 8003666:	4b25      	ldr	r3, [pc, #148]	@ (80036fc <TunePID+0x11c>)
 8003668:	681b      	ldr	r3, [r3, #0]
	printf("PID: %f %f %f \n SYNC: %f %f %f \n PRELOAD: %f \n",
 800366a:	4618      	mov	r0, r3
 800366c:	f7fc ff94 	bl	8000598 <__aeabi_f2d>
 8003670:	e9c7 0104 	strd	r0, r1, [r7, #16]
			best_population.pid.Kp, best_population.pid.Ki,
 8003674:	4b21      	ldr	r3, [pc, #132]	@ (80036fc <TunePID+0x11c>)
 8003676:	685b      	ldr	r3, [r3, #4]
	printf("PID: %f %f %f \n SYNC: %f %f %f \n PRELOAD: %f \n",
 8003678:	4618      	mov	r0, r3
 800367a:	f7fc ff8d 	bl	8000598 <__aeabi_f2d>
 800367e:	4680      	mov	r8, r0
 8003680:	4689      	mov	r9, r1
			best_population.pid.Kd, best_population.sync_pid.Kp,
 8003682:	4b1e      	ldr	r3, [pc, #120]	@ (80036fc <TunePID+0x11c>)
 8003684:	689b      	ldr	r3, [r3, #8]
	printf("PID: %f %f %f \n SYNC: %f %f %f \n PRELOAD: %f \n",
 8003686:	4618      	mov	r0, r3
 8003688:	f7fc ff86 	bl	8000598 <__aeabi_f2d>
 800368c:	4682      	mov	sl, r0
 800368e:	468b      	mov	fp, r1
			best_population.pid.Kd, best_population.sync_pid.Kp,
 8003690:	4b1a      	ldr	r3, [pc, #104]	@ (80036fc <TunePID+0x11c>)
 8003692:	68db      	ldr	r3, [r3, #12]
	printf("PID: %f %f %f \n SYNC: %f %f %f \n PRELOAD: %f \n",
 8003694:	4618      	mov	r0, r3
 8003696:	f7fc ff7f 	bl	8000598 <__aeabi_f2d>
 800369a:	e9c7 0102 	strd	r0, r1, [r7, #8]
			best_population.sync_pid.Ki, best_population.sync_pid.Kd,
 800369e:	4b17      	ldr	r3, [pc, #92]	@ (80036fc <TunePID+0x11c>)
 80036a0:	691b      	ldr	r3, [r3, #16]
	printf("PID: %f %f %f \n SYNC: %f %f %f \n PRELOAD: %f \n",
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7fc ff78 	bl	8000598 <__aeabi_f2d>
 80036a8:	e9c7 0100 	strd	r0, r1, [r7]
			best_population.sync_pid.Ki, best_population.sync_pid.Kd,
 80036ac:	4b13      	ldr	r3, [pc, #76]	@ (80036fc <TunePID+0x11c>)
 80036ae:	695b      	ldr	r3, [r3, #20]
	printf("PID: %f %f %f \n SYNC: %f %f %f \n PRELOAD: %f \n",
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7fc ff71 	bl	8000598 <__aeabi_f2d>
 80036b6:	4604      	mov	r4, r0
 80036b8:	460d      	mov	r5, r1
			best_population.integral_preload);
 80036ba:	4b10      	ldr	r3, [pc, #64]	@ (80036fc <TunePID+0x11c>)
 80036bc:	699b      	ldr	r3, [r3, #24]
	printf("PID: %f %f %f \n SYNC: %f %f %f \n PRELOAD: %f \n",
 80036be:	4618      	mov	r0, r3
 80036c0:	f7fc ff6a 	bl	8000598 <__aeabi_f2d>
 80036c4:	4602      	mov	r2, r0
 80036c6:	460b      	mov	r3, r1
 80036c8:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80036cc:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80036d0:	ed97 7b00 	vldr	d7, [r7]
 80036d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80036d8:	ed97 7b02 	vldr	d7, [r7, #8]
 80036dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80036e0:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80036e4:	e9cd 8900 	strd	r8, r9, [sp]
 80036e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80036ec:	4809      	ldr	r0, [pc, #36]	@ (8003714 <TunePID+0x134>)
 80036ee:	f003 fab9 	bl	8006c64 <iprintf>
}
 80036f2:	bf00      	nop
 80036f4:	3718      	adds	r7, #24
 80036f6:	46bd      	mov	sp, r7
 80036f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036fc:	200009c0 	.word	0x200009c0
 8003700:	20000030 	.word	0x20000030
 8003704:	20000020 	.word	0x20000020
 8003708:	2000002c 	.word	0x2000002c
 800370c:	20000c60 	.word	0x20000c60
 8003710:	66666667 	.word	0x66666667
 8003714:	0800a868 	.word	0x0800a868

08003718 <initialize_population>:

void initialize_population() {
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
	srand(HAL_GetTick());  // Seed the random number generator
 800371e:	f7fe f92f 	bl	8001980 <HAL_GetTick>
 8003722:	4603      	mov	r3, r0
 8003724:	4618      	mov	r0, r3
 8003726:	f002 fb0b 	bl	8005d40 <srand>

	for (int population_num = 0; population_num < POPULATION_SIZE;
 800372a:	2300      	movs	r3, #0
 800372c:	607b      	str	r3, [r7, #4]
 800372e:	e0b1      	b.n	8003894 <initialize_population+0x17c>
			population_num++) {

		pid_population[population_num].pid.Kp = ((float) rand() / RAND_MAX) * 2
 8003730:	f002 fb34 	bl	8005d9c <rand>
 8003734:	ee07 0a90 	vmov	s15, r0
 8003738:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800373c:	eddf 6ac0 	vldr	s13, [pc, #768]	@ 8003a40 <initialize_population+0x328>
 8003740:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003744:	ee37 7aa7 	vadd.f32	s14, s15, s15
				* best_population.pid.Kp;
 8003748:	4bbe      	ldr	r3, [pc, #760]	@ (8003a44 <initialize_population+0x32c>)
 800374a:	edd3 7a00 	vldr	s15, [r3]
 800374e:	ee67 7a27 	vmul.f32	s15, s14, s15
		pid_population[population_num].pid.Kp = ((float) rand() / RAND_MAX) * 2
 8003752:	4abd      	ldr	r2, [pc, #756]	@ (8003a48 <initialize_population+0x330>)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	015b      	lsls	r3, r3, #5
 8003758:	4413      	add	r3, r2
 800375a:	edc3 7a00 	vstr	s15, [r3]
		pid_population[population_num].pid.Ki = ((float) rand() / RAND_MAX) * 2
 800375e:	f002 fb1d 	bl	8005d9c <rand>
 8003762:	ee07 0a90 	vmov	s15, r0
 8003766:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800376a:	eddf 6ab5 	vldr	s13, [pc, #724]	@ 8003a40 <initialize_population+0x328>
 800376e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003772:	ee37 7aa7 	vadd.f32	s14, s15, s15
				* best_population.pid.Ki;
 8003776:	4bb3      	ldr	r3, [pc, #716]	@ (8003a44 <initialize_population+0x32c>)
 8003778:	edd3 7a01 	vldr	s15, [r3, #4]
 800377c:	ee67 7a27 	vmul.f32	s15, s14, s15
		pid_population[population_num].pid.Ki = ((float) rand() / RAND_MAX) * 2
 8003780:	4ab1      	ldr	r2, [pc, #708]	@ (8003a48 <initialize_population+0x330>)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	015b      	lsls	r3, r3, #5
 8003786:	4413      	add	r3, r2
 8003788:	3304      	adds	r3, #4
 800378a:	edc3 7a00 	vstr	s15, [r3]
		pid_population[population_num].pid.Kd = ((float) rand() / RAND_MAX) * 2
 800378e:	f002 fb05 	bl	8005d9c <rand>
 8003792:	ee07 0a90 	vmov	s15, r0
 8003796:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800379a:	eddf 6aa9 	vldr	s13, [pc, #676]	@ 8003a40 <initialize_population+0x328>
 800379e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80037a2:	ee37 7aa7 	vadd.f32	s14, s15, s15
				* best_population.pid.Kd;
 80037a6:	4ba7      	ldr	r3, [pc, #668]	@ (8003a44 <initialize_population+0x32c>)
 80037a8:	edd3 7a02 	vldr	s15, [r3, #8]
 80037ac:	ee67 7a27 	vmul.f32	s15, s14, s15
		pid_population[population_num].pid.Kd = ((float) rand() / RAND_MAX) * 2
 80037b0:	4aa5      	ldr	r2, [pc, #660]	@ (8003a48 <initialize_population+0x330>)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	015b      	lsls	r3, r3, #5
 80037b6:	4413      	add	r3, r2
 80037b8:	3308      	adds	r3, #8
 80037ba:	edc3 7a00 	vstr	s15, [r3]

		pid_population[population_num].sync_pid.Kp = ((float) rand() / RAND_MAX)
 80037be:	f002 faed 	bl	8005d9c <rand>
 80037c2:	ee07 0a90 	vmov	s15, r0
 80037c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037ca:	eddf 6a9d 	vldr	s13, [pc, #628]	@ 8003a40 <initialize_population+0x328>
 80037ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
				* 2 * best_population.sync_pid.Kp;
 80037d2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80037d6:	4b9b      	ldr	r3, [pc, #620]	@ (8003a44 <initialize_population+0x32c>)
 80037d8:	edd3 7a03 	vldr	s15, [r3, #12]
 80037dc:	ee67 7a27 	vmul.f32	s15, s14, s15
		pid_population[population_num].sync_pid.Kp = ((float) rand() / RAND_MAX)
 80037e0:	4a99      	ldr	r2, [pc, #612]	@ (8003a48 <initialize_population+0x330>)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	015b      	lsls	r3, r3, #5
 80037e6:	4413      	add	r3, r2
 80037e8:	330c      	adds	r3, #12
 80037ea:	edc3 7a00 	vstr	s15, [r3]
		pid_population[population_num].sync_pid.Ki = ((float) rand() / RAND_MAX)
 80037ee:	f002 fad5 	bl	8005d9c <rand>
 80037f2:	ee07 0a90 	vmov	s15, r0
 80037f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037fa:	eddf 6a91 	vldr	s13, [pc, #580]	@ 8003a40 <initialize_population+0x328>
 80037fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
				* 2 * best_population.sync_pid.Ki;
 8003802:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003806:	4b8f      	ldr	r3, [pc, #572]	@ (8003a44 <initialize_population+0x32c>)
 8003808:	edd3 7a04 	vldr	s15, [r3, #16]
 800380c:	ee67 7a27 	vmul.f32	s15, s14, s15
		pid_population[population_num].sync_pid.Ki = ((float) rand() / RAND_MAX)
 8003810:	4a8d      	ldr	r2, [pc, #564]	@ (8003a48 <initialize_population+0x330>)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	015b      	lsls	r3, r3, #5
 8003816:	4413      	add	r3, r2
 8003818:	3310      	adds	r3, #16
 800381a:	edc3 7a00 	vstr	s15, [r3]
		pid_population[population_num].sync_pid.Kd = ((float) rand() / RAND_MAX)
 800381e:	f002 fabd 	bl	8005d9c <rand>
 8003822:	ee07 0a90 	vmov	s15, r0
 8003826:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800382a:	eddf 6a85 	vldr	s13, [pc, #532]	@ 8003a40 <initialize_population+0x328>
 800382e:	eec7 7a26 	vdiv.f32	s15, s14, s13
				* 2 * best_population.sync_pid.Kd;
 8003832:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003836:	4b83      	ldr	r3, [pc, #524]	@ (8003a44 <initialize_population+0x32c>)
 8003838:	edd3 7a05 	vldr	s15, [r3, #20]
 800383c:	ee67 7a27 	vmul.f32	s15, s14, s15
		pid_population[population_num].sync_pid.Kd = ((float) rand() / RAND_MAX)
 8003840:	4a81      	ldr	r2, [pc, #516]	@ (8003a48 <initialize_population+0x330>)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	015b      	lsls	r3, r3, #5
 8003846:	4413      	add	r3, r2
 8003848:	3314      	adds	r3, #20
 800384a:	edc3 7a00 	vstr	s15, [r3]

		pid_population[population_num].integral_preload = ((float) rand()
 800384e:	f002 faa5 	bl	8005d9c <rand>
 8003852:	ee07 0a90 	vmov	s15, r0
 8003856:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
				/ RAND_MAX) * 2 * best_population.integral_preload;
 800385a:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8003a40 <initialize_population+0x328>
 800385e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003862:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003866:	4b77      	ldr	r3, [pc, #476]	@ (8003a44 <initialize_population+0x32c>)
 8003868:	edd3 7a06 	vldr	s15, [r3, #24]
 800386c:	ee67 7a27 	vmul.f32	s15, s14, s15
		pid_population[population_num].integral_preload = ((float) rand()
 8003870:	4a75      	ldr	r2, [pc, #468]	@ (8003a48 <initialize_population+0x330>)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	015b      	lsls	r3, r3, #5
 8003876:	4413      	add	r3, r2
 8003878:	3318      	adds	r3, #24
 800387a:	edc3 7a00 	vstr	s15, [r3]

		pid_population[population_num].fitness = 0;
 800387e:	4a72      	ldr	r2, [pc, #456]	@ (8003a48 <initialize_population+0x330>)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	015b      	lsls	r3, r3, #5
 8003884:	4413      	add	r3, r2
 8003886:	331c      	adds	r3, #28
 8003888:	f04f 0200 	mov.w	r2, #0
 800388c:	601a      	str	r2, [r3, #0]
			population_num++) {
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	3301      	adds	r3, #1
 8003892:	607b      	str	r3, [r7, #4]
	for (int population_num = 0; population_num < POPULATION_SIZE;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2b31      	cmp	r3, #49	@ 0x31
 8003898:	f77f af4a 	ble.w	8003730 <initialize_population+0x18>
	}

	int idx = rand() % POPULATION_SIZE;
 800389c:	f002 fa7e 	bl	8005d9c <rand>
 80038a0:	4603      	mov	r3, r0
 80038a2:	4a6a      	ldr	r2, [pc, #424]	@ (8003a4c <initialize_population+0x334>)
 80038a4:	fb82 1203 	smull	r1, r2, r2, r3
 80038a8:	1111      	asrs	r1, r2, #4
 80038aa:	17da      	asrs	r2, r3, #31
 80038ac:	1a8a      	subs	r2, r1, r2
 80038ae:	2132      	movs	r1, #50	@ 0x32
 80038b0:	fb01 f202 	mul.w	r2, r1, r2
 80038b4:	1a9b      	subs	r3, r3, r2
 80038b6:	603b      	str	r3, [r7, #0]
	pid_population[idx].pid.Kp = best_population.pid.Kp;
 80038b8:	4b62      	ldr	r3, [pc, #392]	@ (8003a44 <initialize_population+0x32c>)
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	4962      	ldr	r1, [pc, #392]	@ (8003a48 <initialize_population+0x330>)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	015b      	lsls	r3, r3, #5
 80038c2:	440b      	add	r3, r1
 80038c4:	601a      	str	r2, [r3, #0]
	pid_population[idx].pid.Ki = best_population.pid.Ki;
 80038c6:	4b5f      	ldr	r3, [pc, #380]	@ (8003a44 <initialize_population+0x32c>)
 80038c8:	685a      	ldr	r2, [r3, #4]
 80038ca:	495f      	ldr	r1, [pc, #380]	@ (8003a48 <initialize_population+0x330>)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	015b      	lsls	r3, r3, #5
 80038d0:	440b      	add	r3, r1
 80038d2:	3304      	adds	r3, #4
 80038d4:	601a      	str	r2, [r3, #0]
	pid_population[idx].pid.Kd = best_population.pid.Kd;
 80038d6:	4b5b      	ldr	r3, [pc, #364]	@ (8003a44 <initialize_population+0x32c>)
 80038d8:	689a      	ldr	r2, [r3, #8]
 80038da:	495b      	ldr	r1, [pc, #364]	@ (8003a48 <initialize_population+0x330>)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	015b      	lsls	r3, r3, #5
 80038e0:	440b      	add	r3, r1
 80038e2:	3308      	adds	r3, #8
 80038e4:	601a      	str	r2, [r3, #0]

	pid_population[idx].sync_pid.Kp = best_population.sync_pid.Kp;
 80038e6:	4b57      	ldr	r3, [pc, #348]	@ (8003a44 <initialize_population+0x32c>)
 80038e8:	68da      	ldr	r2, [r3, #12]
 80038ea:	4957      	ldr	r1, [pc, #348]	@ (8003a48 <initialize_population+0x330>)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	015b      	lsls	r3, r3, #5
 80038f0:	440b      	add	r3, r1
 80038f2:	330c      	adds	r3, #12
 80038f4:	601a      	str	r2, [r3, #0]
	pid_population[idx].sync_pid.Ki = best_population.sync_pid.Ki;
 80038f6:	4b53      	ldr	r3, [pc, #332]	@ (8003a44 <initialize_population+0x32c>)
 80038f8:	691a      	ldr	r2, [r3, #16]
 80038fa:	4953      	ldr	r1, [pc, #332]	@ (8003a48 <initialize_population+0x330>)
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	015b      	lsls	r3, r3, #5
 8003900:	440b      	add	r3, r1
 8003902:	3310      	adds	r3, #16
 8003904:	601a      	str	r2, [r3, #0]
	pid_population[idx].sync_pid.Kd = best_population.sync_pid.Kd;
 8003906:	4b4f      	ldr	r3, [pc, #316]	@ (8003a44 <initialize_population+0x32c>)
 8003908:	695a      	ldr	r2, [r3, #20]
 800390a:	494f      	ldr	r1, [pc, #316]	@ (8003a48 <initialize_population+0x330>)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	015b      	lsls	r3, r3, #5
 8003910:	440b      	add	r3, r1
 8003912:	3314      	adds	r3, #20
 8003914:	601a      	str	r2, [r3, #0]

	pid_population[idx].integral_preload = best_population.integral_preload;
 8003916:	4b4b      	ldr	r3, [pc, #300]	@ (8003a44 <initialize_population+0x32c>)
 8003918:	699a      	ldr	r2, [r3, #24]
 800391a:	494b      	ldr	r1, [pc, #300]	@ (8003a48 <initialize_population+0x330>)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	015b      	lsls	r3, r3, #5
 8003920:	440b      	add	r3, r1
 8003922:	3318      	adds	r3, #24
 8003924:	601a      	str	r2, [r3, #0]

	del_Kp = best_population.pid.Kp * MUTATION_PERCENTAGE;
 8003926:	4b47      	ldr	r3, [pc, #284]	@ (8003a44 <initialize_population+0x32c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4618      	mov	r0, r3
 800392c:	f7fc fe34 	bl	8000598 <__aeabi_f2d>
 8003930:	a341      	add	r3, pc, #260	@ (adr r3, 8003a38 <initialize_population+0x320>)
 8003932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003936:	f7fc fe87 	bl	8000648 <__aeabi_dmul>
 800393a:	4602      	mov	r2, r0
 800393c:	460b      	mov	r3, r1
 800393e:	4610      	mov	r0, r2
 8003940:	4619      	mov	r1, r3
 8003942:	f7fd f979 	bl	8000c38 <__aeabi_d2f>
 8003946:	4603      	mov	r3, r0
 8003948:	4a41      	ldr	r2, [pc, #260]	@ (8003a50 <initialize_population+0x338>)
 800394a:	6013      	str	r3, [r2, #0]
	del_Ki = best_population.pid.Ki * MUTATION_PERCENTAGE;
 800394c:	4b3d      	ldr	r3, [pc, #244]	@ (8003a44 <initialize_population+0x32c>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	4618      	mov	r0, r3
 8003952:	f7fc fe21 	bl	8000598 <__aeabi_f2d>
 8003956:	a338      	add	r3, pc, #224	@ (adr r3, 8003a38 <initialize_population+0x320>)
 8003958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395c:	f7fc fe74 	bl	8000648 <__aeabi_dmul>
 8003960:	4602      	mov	r2, r0
 8003962:	460b      	mov	r3, r1
 8003964:	4610      	mov	r0, r2
 8003966:	4619      	mov	r1, r3
 8003968:	f7fd f966 	bl	8000c38 <__aeabi_d2f>
 800396c:	4603      	mov	r3, r0
 800396e:	4a39      	ldr	r2, [pc, #228]	@ (8003a54 <initialize_population+0x33c>)
 8003970:	6013      	str	r3, [r2, #0]
	del_Kd = best_population.pid.Kd * MUTATION_PERCENTAGE;
 8003972:	4b34      	ldr	r3, [pc, #208]	@ (8003a44 <initialize_population+0x32c>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	4618      	mov	r0, r3
 8003978:	f7fc fe0e 	bl	8000598 <__aeabi_f2d>
 800397c:	a32e      	add	r3, pc, #184	@ (adr r3, 8003a38 <initialize_population+0x320>)
 800397e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003982:	f7fc fe61 	bl	8000648 <__aeabi_dmul>
 8003986:	4602      	mov	r2, r0
 8003988:	460b      	mov	r3, r1
 800398a:	4610      	mov	r0, r2
 800398c:	4619      	mov	r1, r3
 800398e:	f7fd f953 	bl	8000c38 <__aeabi_d2f>
 8003992:	4603      	mov	r3, r0
 8003994:	4a30      	ldr	r2, [pc, #192]	@ (8003a58 <initialize_population+0x340>)
 8003996:	6013      	str	r3, [r2, #0]

	del_Kp_sync = best_population.sync_pid.Kp * MUTATION_PERCENTAGE;
 8003998:	4b2a      	ldr	r3, [pc, #168]	@ (8003a44 <initialize_population+0x32c>)
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	4618      	mov	r0, r3
 800399e:	f7fc fdfb 	bl	8000598 <__aeabi_f2d>
 80039a2:	a325      	add	r3, pc, #148	@ (adr r3, 8003a38 <initialize_population+0x320>)
 80039a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a8:	f7fc fe4e 	bl	8000648 <__aeabi_dmul>
 80039ac:	4602      	mov	r2, r0
 80039ae:	460b      	mov	r3, r1
 80039b0:	4610      	mov	r0, r2
 80039b2:	4619      	mov	r1, r3
 80039b4:	f7fd f940 	bl	8000c38 <__aeabi_d2f>
 80039b8:	4603      	mov	r3, r0
 80039ba:	4a28      	ldr	r2, [pc, #160]	@ (8003a5c <initialize_population+0x344>)
 80039bc:	6013      	str	r3, [r2, #0]
	del_Ki_sync = best_population.sync_pid.Ki * MUTATION_PERCENTAGE;
 80039be:	4b21      	ldr	r3, [pc, #132]	@ (8003a44 <initialize_population+0x32c>)
 80039c0:	691b      	ldr	r3, [r3, #16]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fc fde8 	bl	8000598 <__aeabi_f2d>
 80039c8:	a31b      	add	r3, pc, #108	@ (adr r3, 8003a38 <initialize_population+0x320>)
 80039ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ce:	f7fc fe3b 	bl	8000648 <__aeabi_dmul>
 80039d2:	4602      	mov	r2, r0
 80039d4:	460b      	mov	r3, r1
 80039d6:	4610      	mov	r0, r2
 80039d8:	4619      	mov	r1, r3
 80039da:	f7fd f92d 	bl	8000c38 <__aeabi_d2f>
 80039de:	4603      	mov	r3, r0
 80039e0:	4a1f      	ldr	r2, [pc, #124]	@ (8003a60 <initialize_population+0x348>)
 80039e2:	6013      	str	r3, [r2, #0]
	del_Kd_sync = best_population.sync_pid.Kd * MUTATION_PERCENTAGE;
 80039e4:	4b17      	ldr	r3, [pc, #92]	@ (8003a44 <initialize_population+0x32c>)
 80039e6:	695b      	ldr	r3, [r3, #20]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7fc fdd5 	bl	8000598 <__aeabi_f2d>
 80039ee:	a312      	add	r3, pc, #72	@ (adr r3, 8003a38 <initialize_population+0x320>)
 80039f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f4:	f7fc fe28 	bl	8000648 <__aeabi_dmul>
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	4610      	mov	r0, r2
 80039fe:	4619      	mov	r1, r3
 8003a00:	f7fd f91a 	bl	8000c38 <__aeabi_d2f>
 8003a04:	4603      	mov	r3, r0
 8003a06:	4a17      	ldr	r2, [pc, #92]	@ (8003a64 <initialize_population+0x34c>)
 8003a08:	6013      	str	r3, [r2, #0]

	del_intg = best_population.integral_preload * MUTATION_PERCENTAGE;
 8003a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8003a44 <initialize_population+0x32c>)
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fc fdc2 	bl	8000598 <__aeabi_f2d>
 8003a14:	a308      	add	r3, pc, #32	@ (adr r3, 8003a38 <initialize_population+0x320>)
 8003a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a1a:	f7fc fe15 	bl	8000648 <__aeabi_dmul>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	460b      	mov	r3, r1
 8003a22:	4610      	mov	r0, r2
 8003a24:	4619      	mov	r1, r3
 8003a26:	f7fd f907 	bl	8000c38 <__aeabi_d2f>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	4a0e      	ldr	r2, [pc, #56]	@ (8003a68 <initialize_population+0x350>)
 8003a2e:	6013      	str	r3, [r2, #0]

}
 8003a30:	bf00      	nop
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	33333333 	.word	0x33333333
 8003a3c:	3fc33333 	.word	0x3fc33333
 8003a40:	4f000000 	.word	0x4f000000
 8003a44:	200009c0 	.word	0x200009c0
 8003a48:	20000380 	.word	0x20000380
 8003a4c:	51eb851f 	.word	0x51eb851f
 8003a50:	20000c38 	.word	0x20000c38
 8003a54:	20000c3c 	.word	0x20000c3c
 8003a58:	20000c40 	.word	0x20000c40
 8003a5c:	20000c48 	.word	0x20000c48
 8003a60:	20000c4c 	.word	0x20000c4c
 8003a64:	20000c50 	.word	0x20000c50
 8003a68:	20000c44 	.word	0x20000c44

08003a6c <initialize_testParam>:

void initialize_testParam() {
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0

	printf("target speed1 speed2 diff \n");
 8003a72:	4818      	ldr	r0, [pc, #96]	@ (8003ad4 <initialize_testParam+0x68>)
 8003a74:	f003 f95e 	bl	8006d34 <puts>

	for (int i = 0; i < POPULATION_SIZE; i++) {
 8003a78:	2300      	movs	r3, #0
 8003a7a:	607b      	str	r3, [r7, #4]
 8003a7c:	e021      	b.n	8003ac2 <initialize_testParam+0x56>
		testParam[i].initial_speed = 0;
 8003a7e:	4916      	ldr	r1, [pc, #88]	@ (8003ad8 <initialize_testParam+0x6c>)
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	4613      	mov	r3, r2
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	4413      	add	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	440b      	add	r3, r1
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]
		testParam[i].target_speed = SIMULATION_SPEED;
 8003a90:	4911      	ldr	r1, [pc, #68]	@ (8003ad8 <initialize_testParam+0x6c>)
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	4613      	mov	r3, r2
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	4413      	add	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	440b      	add	r3, r1
 8003a9e:	3304      	adds	r3, #4
 8003aa0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8003aa4:	601a      	str	r2, [r3, #0]
		testParam[i].simulation_time = SIMULATION_TIME;
 8003aa6:	490c      	ldr	r1, [pc, #48]	@ (8003ad8 <initialize_testParam+0x6c>)
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	4413      	add	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	440b      	add	r3, r1
 8003ab4:	3308      	adds	r3, #8
 8003ab6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aba:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < POPULATION_SIZE; i++) {
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	607b      	str	r3, [r7, #4]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b31      	cmp	r3, #49	@ 0x31
 8003ac6:	ddda      	ble.n	8003a7e <initialize_testParam+0x12>
	}

}
 8003ac8:	bf00      	nop
 8003aca:	bf00      	nop
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	0800a898 	.word	0x0800a898
 8003ad8:	200009e0 	.word	0x200009e0

08003adc <get_best_individual>:

void get_best_individual() {
 8003adc:	b4b0      	push	{r4, r5, r7}
 8003ade:	b08b      	sub	sp, #44	@ 0x2c
 8003ae0:	af00      	add	r7, sp, #0

	Individual best_pid = pid_population[0];
 8003ae2:	4b1d      	ldr	r3, [pc, #116]	@ (8003b58 <get_best_individual+0x7c>)
 8003ae4:	1d3c      	adds	r4, r7, #4
 8003ae6:	461d      	mov	r5, r3
 8003ae8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003aea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003aec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003af0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	for (int population_num = 1; population_num < POPULATION_SIZE;
 8003af4:	2301      	movs	r3, #1
 8003af6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003af8:	e01c      	b.n	8003b34 <get_best_individual+0x58>
			population_num++) {
		if (pid_population[population_num].fitness > best_pid.fitness) {
 8003afa:	4a17      	ldr	r2, [pc, #92]	@ (8003b58 <get_best_individual+0x7c>)
 8003afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003afe:	015b      	lsls	r3, r3, #5
 8003b00:	4413      	add	r3, r2
 8003b02:	331c      	adds	r3, #28
 8003b04:	ed93 7a00 	vldr	s14, [r3]
 8003b08:	edd7 7a08 	vldr	s15, [r7, #32]
 8003b0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b14:	dd0b      	ble.n	8003b2e <get_best_individual+0x52>
			best_pid = pid_population[population_num];
 8003b16:	4a10      	ldr	r2, [pc, #64]	@ (8003b58 <get_best_individual+0x7c>)
 8003b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1a:	015b      	lsls	r3, r3, #5
 8003b1c:	4413      	add	r3, r2
 8003b1e:	1d3c      	adds	r4, r7, #4
 8003b20:	461d      	mov	r5, r3
 8003b22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003b24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003b26:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003b2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			population_num++) {
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b30:	3301      	adds	r3, #1
 8003b32:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int population_num = 1; population_num < POPULATION_SIZE;
 8003b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b36:	2b31      	cmp	r3, #49	@ 0x31
 8003b38:	dddf      	ble.n	8003afa <get_best_individual+0x1e>
		}
	}

	best_population = best_pid;
 8003b3a:	4b08      	ldr	r3, [pc, #32]	@ (8003b5c <get_best_individual+0x80>)
 8003b3c:	461d      	mov	r5, r3
 8003b3e:	1d3c      	adds	r4, r7, #4
 8003b40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b44:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003b48:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8003b4c:	bf00      	nop
 8003b4e:	372c      	adds	r7, #44	@ 0x2c
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bcb0      	pop	{r4, r5, r7}
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	20000380 	.word	0x20000380
 8003b5c:	200009c0 	.word	0x200009c0

08003b60 <select_individuals>:

void select_individuals() {
 8003b60:	b5b0      	push	{r4, r5, r7, lr}
 8003b62:	f5ad 6dcb 	sub.w	sp, sp, #1624	@ 0x658
 8003b66:	af00      	add	r7, sp, #0
	Individual selected_pid_population[POPULATION_SIZE];

	for (int i = 0; i < POPULATION_SIZE; i++) {
 8003b68:	2300      	movs	r3, #0
 8003b6a:	f8c7 3654 	str.w	r3, [r7, #1620]	@ 0x654
 8003b6e:	e05d      	b.n	8003c2c <select_individuals+0xcc>

		int best_idx = rand() % POPULATION_SIZE; // Pick first candidate randomly
 8003b70:	f002 f914 	bl	8005d9c <rand>
 8003b74:	4603      	mov	r3, r0
 8003b76:	4a4f      	ldr	r2, [pc, #316]	@ (8003cb4 <select_individuals+0x154>)
 8003b78:	fb82 1203 	smull	r1, r2, r2, r3
 8003b7c:	1111      	asrs	r1, r2, #4
 8003b7e:	17da      	asrs	r2, r3, #31
 8003b80:	1a8a      	subs	r2, r1, r2
 8003b82:	2132      	movs	r1, #50	@ 0x32
 8003b84:	fb01 f202 	mul.w	r2, r1, r2
 8003b88:	1a9b      	subs	r3, r3, r2
 8003b8a:	f8c7 3650 	str.w	r3, [r7, #1616]	@ 0x650
		// Select the best out of TOURNAMENT_SIZE individuals
		for (int j = 1; j < TOURNAMENT_SIZE; j++) {
 8003b8e:	2301      	movs	r3, #1
 8003b90:	f8c7 364c 	str.w	r3, [r7, #1612]	@ 0x64c
 8003b94:	e02c      	b.n	8003bf0 <select_individuals+0x90>

			int idx = rand() % POPULATION_SIZE;
 8003b96:	f002 f901 	bl	8005d9c <rand>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	4a45      	ldr	r2, [pc, #276]	@ (8003cb4 <select_individuals+0x154>)
 8003b9e:	fb82 1203 	smull	r1, r2, r2, r3
 8003ba2:	1111      	asrs	r1, r2, #4
 8003ba4:	17da      	asrs	r2, r3, #31
 8003ba6:	1a8a      	subs	r2, r1, r2
 8003ba8:	2132      	movs	r1, #50	@ 0x32
 8003baa:	fb01 f202 	mul.w	r2, r1, r2
 8003bae:	1a9b      	subs	r3, r3, r2
 8003bb0:	f8c7 3644 	str.w	r3, [r7, #1604]	@ 0x644
			if (pid_population[idx].fitness
 8003bb4:	4a40      	ldr	r2, [pc, #256]	@ (8003cb8 <select_individuals+0x158>)
 8003bb6:	f8d7 3644 	ldr.w	r3, [r7, #1604]	@ 0x644
 8003bba:	015b      	lsls	r3, r3, #5
 8003bbc:	4413      	add	r3, r2
 8003bbe:	331c      	adds	r3, #28
 8003bc0:	ed93 7a00 	vldr	s14, [r3]
					> pid_population[best_idx].fitness) {
 8003bc4:	4a3c      	ldr	r2, [pc, #240]	@ (8003cb8 <select_individuals+0x158>)
 8003bc6:	f8d7 3650 	ldr.w	r3, [r7, #1616]	@ 0x650
 8003bca:	015b      	lsls	r3, r3, #5
 8003bcc:	4413      	add	r3, r2
 8003bce:	331c      	adds	r3, #28
 8003bd0:	edd3 7a00 	vldr	s15, [r3]
			if (pid_population[idx].fitness
 8003bd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bdc:	dd03      	ble.n	8003be6 <select_individuals+0x86>
				best_idx = idx;  // Update best candidate
 8003bde:	f8d7 3644 	ldr.w	r3, [r7, #1604]	@ 0x644
 8003be2:	f8c7 3650 	str.w	r3, [r7, #1616]	@ 0x650
		for (int j = 1; j < TOURNAMENT_SIZE; j++) {
 8003be6:	f8d7 364c 	ldr.w	r3, [r7, #1612]	@ 0x64c
 8003bea:	3301      	adds	r3, #1
 8003bec:	f8c7 364c 	str.w	r3, [r7, #1612]	@ 0x64c
 8003bf0:	f8d7 364c 	ldr.w	r3, [r7, #1612]	@ 0x64c
 8003bf4:	2b03      	cmp	r3, #3
 8003bf6:	ddce      	ble.n	8003b96 <select_individuals+0x36>
			}
		}
		// Store the selected individual
		selected_pid_population[i] = pid_population[best_idx];
 8003bf8:	f507 63cb 	add.w	r3, r7, #1624	@ 0x658
 8003bfc:	f2a3 6254 	subw	r2, r3, #1620	@ 0x654
 8003c00:	f8d7 3654 	ldr.w	r3, [r7, #1620]	@ 0x654
 8003c04:	015b      	lsls	r3, r3, #5
 8003c06:	18d1      	adds	r1, r2, r3
 8003c08:	4a2b      	ldr	r2, [pc, #172]	@ (8003cb8 <select_individuals+0x158>)
 8003c0a:	f8d7 3650 	ldr.w	r3, [r7, #1616]	@ 0x650
 8003c0e:	015b      	lsls	r3, r3, #5
 8003c10:	4413      	add	r3, r2
 8003c12:	460c      	mov	r4, r1
 8003c14:	461d      	mov	r5, r3
 8003c16:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c1a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003c1e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for (int i = 0; i < POPULATION_SIZE; i++) {
 8003c22:	f8d7 3654 	ldr.w	r3, [r7, #1620]	@ 0x654
 8003c26:	3301      	adds	r3, #1
 8003c28:	f8c7 3654 	str.w	r3, [r7, #1620]	@ 0x654
 8003c2c:	f8d7 3654 	ldr.w	r3, [r7, #1620]	@ 0x654
 8003c30:	2b31      	cmp	r3, #49	@ 0x31
 8003c32:	dd9d      	ble.n	8003b70 <select_individuals+0x10>
	}

	// Copy the selected individuals back to the main population
	for (int i = 1; i < POPULATION_SIZE; i++) {
 8003c34:	2301      	movs	r3, #1
 8003c36:	f8c7 3648 	str.w	r3, [r7, #1608]	@ 0x648
 8003c3a:	e019      	b.n	8003c70 <select_individuals+0x110>
		pid_population[i] = selected_pid_population[i];
 8003c3c:	4a1e      	ldr	r2, [pc, #120]	@ (8003cb8 <select_individuals+0x158>)
 8003c3e:	f8d7 3648 	ldr.w	r3, [r7, #1608]	@ 0x648
 8003c42:	015b      	lsls	r3, r3, #5
 8003c44:	18d1      	adds	r1, r2, r3
 8003c46:	f507 63cb 	add.w	r3, r7, #1624	@ 0x658
 8003c4a:	f2a3 6254 	subw	r2, r3, #1620	@ 0x654
 8003c4e:	f8d7 3648 	ldr.w	r3, [r7, #1608]	@ 0x648
 8003c52:	015b      	lsls	r3, r3, #5
 8003c54:	4413      	add	r3, r2
 8003c56:	460c      	mov	r4, r1
 8003c58:	461d      	mov	r5, r3
 8003c5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c5e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003c62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for (int i = 1; i < POPULATION_SIZE; i++) {
 8003c66:	f8d7 3648 	ldr.w	r3, [r7, #1608]	@ 0x648
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	f8c7 3648 	str.w	r3, [r7, #1608]	@ 0x648
 8003c70:	f8d7 3648 	ldr.w	r3, [r7, #1608]	@ 0x648
 8003c74:	2b31      	cmp	r3, #49	@ 0x31
 8003c76:	dde1      	ble.n	8003c3c <select_individuals+0xdc>
	}

	pid_population[rand() % POPULATION_SIZE] = best_population;
 8003c78:	f002 f890 	bl	8005d9c <rand>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003cb4 <select_individuals+0x154>)
 8003c80:	fb83 1302 	smull	r1, r3, r3, r2
 8003c84:	1119      	asrs	r1, r3, #4
 8003c86:	17d3      	asrs	r3, r2, #31
 8003c88:	1acb      	subs	r3, r1, r3
 8003c8a:	2132      	movs	r1, #50	@ 0x32
 8003c8c:	fb01 f303 	mul.w	r3, r1, r3
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	4a09      	ldr	r2, [pc, #36]	@ (8003cb8 <select_individuals+0x158>)
 8003c94:	015b      	lsls	r3, r3, #5
 8003c96:	4413      	add	r3, r2
 8003c98:	4a08      	ldr	r2, [pc, #32]	@ (8003cbc <select_individuals+0x15c>)
 8003c9a:	461c      	mov	r4, r3
 8003c9c:	4615      	mov	r5, r2
 8003c9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ca0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ca2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003ca6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8003caa:	bf00      	nop
 8003cac:	f507 67cb 	add.w	r7, r7, #1624	@ 0x658
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bdb0      	pop	{r4, r5, r7, pc}
 8003cb4:	51eb851f 	.word	0x51eb851f
 8003cb8:	20000380 	.word	0x20000380
 8003cbc:	200009c0 	.word	0x200009c0

08003cc0 <crossover_individuals>:

void crossover_individuals() {
 8003cc0:	b5b0      	push	{r4, r5, r7, lr}
 8003cc2:	b08c      	sub	sp, #48	@ 0x30
 8003cc4:	af00      	add	r7, sp, #0

	for (int population_num = 0; population_num < POPULATION_SIZE;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cca:	e1fd      	b.n	80040c8 <crossover_individuals+0x408>
			population_num += 2) {
		if (population_num + 1 < POPULATION_SIZE) {
 8003ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cce:	2b30      	cmp	r3, #48	@ 0x30
 8003cd0:	f300 81f7 	bgt.w	80040c2 <crossover_individuals+0x402>

			int idx1 = population_num;
 8003cd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
			int idx2 = population_num + 1;
 8003cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cda:	3301      	adds	r3, #1
 8003cdc:	627b      	str	r3, [r7, #36]	@ 0x24

			PID_Coefficients parent1 = pid_population[idx1].pid;
 8003cde:	4ae7      	ldr	r2, [pc, #924]	@ (800407c <crossover_individuals+0x3bc>)
 8003ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ce2:	015b      	lsls	r3, r3, #5
 8003ce4:	441a      	add	r2, r3
 8003ce6:	f107 030c 	add.w	r3, r7, #12
 8003cea:	ca07      	ldmia	r2, {r0, r1, r2}
 8003cec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			PID_Coefficients parent2 = pid_population[idx2].pid;
 8003cf0:	4ae2      	ldr	r2, [pc, #904]	@ (800407c <crossover_individuals+0x3bc>)
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf4:	015b      	lsls	r3, r3, #5
 8003cf6:	441a      	add	r2, r3
 8003cf8:	463b      	mov	r3, r7
 8003cfa:	ca07      	ldmia	r2, {r0, r1, r2}
 8003cfc:	e883 0007 	stmia.w	r3, {r0, r1, r2}

			float alpha = ((float) rand() / RAND_MAX);  // Crossover factor
 8003d00:	f002 f84c 	bl	8005d9c <rand>
 8003d04:	ee07 0a90 	vmov	s15, r0
 8003d08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d0c:	eddf 6adc 	vldr	s13, [pc, #880]	@ 8004080 <crossover_individuals+0x3c0>
 8003d10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d14:	edc7 7a08 	vstr	s15, [r7, #32]
			pid_population[population_num].pid.Kp = alpha * parent1.Kp
 8003d18:	ed97 7a03 	vldr	s14, [r7, #12]
 8003d1c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003d20:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ (1 - alpha) * parent2.Kp;
 8003d24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d28:	edd7 7a08 	vldr	s15, [r7, #32]
 8003d2c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003d30:	edd7 7a00 	vldr	s15, [r7]
 8003d34:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d38:	ee77 7a27 	vadd.f32	s15, s14, s15
			pid_population[population_num].pid.Kp = alpha * parent1.Kp
 8003d3c:	4acf      	ldr	r2, [pc, #828]	@ (800407c <crossover_individuals+0x3bc>)
 8003d3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d40:	015b      	lsls	r3, r3, #5
 8003d42:	4413      	add	r3, r2
 8003d44:	edc3 7a00 	vstr	s15, [r3]
			pid_population[population_num + 1].pid.Kp = alpha * parent2.Kp
 8003d48:	ed97 7a00 	vldr	s14, [r7]
 8003d4c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003d50:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ (1 - alpha) * parent1.Kp;
 8003d54:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d58:	edd7 7a08 	vldr	s15, [r7, #32]
 8003d5c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003d60:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d64:	ee66 7aa7 	vmul.f32	s15, s13, s15
			pid_population[population_num + 1].pid.Kp = alpha * parent2.Kp
 8003d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d6a:	3301      	adds	r3, #1
					+ (1 - alpha) * parent1.Kp;
 8003d6c:	ee77 7a27 	vadd.f32	s15, s14, s15
			pid_population[population_num + 1].pid.Kp = alpha * parent2.Kp
 8003d70:	4ac2      	ldr	r2, [pc, #776]	@ (800407c <crossover_individuals+0x3bc>)
 8003d72:	015b      	lsls	r3, r3, #5
 8003d74:	4413      	add	r3, r2
 8003d76:	edc3 7a00 	vstr	s15, [r3]

			alpha = ((float) rand() / RAND_MAX);
 8003d7a:	f002 f80f 	bl	8005d9c <rand>
 8003d7e:	ee07 0a90 	vmov	s15, r0
 8003d82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d86:	eddf 6abe 	vldr	s13, [pc, #760]	@ 8004080 <crossover_individuals+0x3c0>
 8003d8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003d8e:	edc7 7a08 	vstr	s15, [r7, #32]
			pid_population[population_num].pid.Ki = alpha * parent1.Ki
 8003d92:	ed97 7a04 	vldr	s14, [r7, #16]
 8003d96:	edd7 7a08 	vldr	s15, [r7, #32]
 8003d9a:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ (1 - alpha) * parent2.Ki;
 8003d9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003da2:	edd7 7a08 	vldr	s15, [r7, #32]
 8003da6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003daa:	edd7 7a01 	vldr	s15, [r7, #4]
 8003dae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003db2:	ee77 7a27 	vadd.f32	s15, s14, s15
			pid_population[population_num].pid.Ki = alpha * parent1.Ki
 8003db6:	4ab1      	ldr	r2, [pc, #708]	@ (800407c <crossover_individuals+0x3bc>)
 8003db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dba:	015b      	lsls	r3, r3, #5
 8003dbc:	4413      	add	r3, r2
 8003dbe:	3304      	adds	r3, #4
 8003dc0:	edc3 7a00 	vstr	s15, [r3]
			pid_population[population_num + 1].pid.Ki = alpha * parent2.Ki
 8003dc4:	ed97 7a01 	vldr	s14, [r7, #4]
 8003dc8:	edd7 7a08 	vldr	s15, [r7, #32]
 8003dcc:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ (1 - alpha) * parent1.Ki;
 8003dd0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003dd4:	edd7 7a08 	vldr	s15, [r7, #32]
 8003dd8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003ddc:	edd7 7a04 	vldr	s15, [r7, #16]
 8003de0:	ee66 7aa7 	vmul.f32	s15, s13, s15
			pid_population[population_num + 1].pid.Ki = alpha * parent2.Ki
 8003de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003de6:	3301      	adds	r3, #1
					+ (1 - alpha) * parent1.Ki;
 8003de8:	ee77 7a27 	vadd.f32	s15, s14, s15
			pid_population[population_num + 1].pid.Ki = alpha * parent2.Ki
 8003dec:	4aa3      	ldr	r2, [pc, #652]	@ (800407c <crossover_individuals+0x3bc>)
 8003dee:	015b      	lsls	r3, r3, #5
 8003df0:	4413      	add	r3, r2
 8003df2:	3304      	adds	r3, #4
 8003df4:	edc3 7a00 	vstr	s15, [r3]

			alpha = ((float) rand() / RAND_MAX);
 8003df8:	f001 ffd0 	bl	8005d9c <rand>
 8003dfc:	ee07 0a90 	vmov	s15, r0
 8003e00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e04:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8004080 <crossover_individuals+0x3c0>
 8003e08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e0c:	edc7 7a08 	vstr	s15, [r7, #32]
			pid_population[population_num].pid.Kd = alpha * parent1.Kd
 8003e10:	ed97 7a05 	vldr	s14, [r7, #20]
 8003e14:	edd7 7a08 	vldr	s15, [r7, #32]
 8003e18:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ (1 - alpha) * parent2.Kd;
 8003e1c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e20:	edd7 7a08 	vldr	s15, [r7, #32]
 8003e24:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003e28:	edd7 7a02 	vldr	s15, [r7, #8]
 8003e2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003e30:	ee77 7a27 	vadd.f32	s15, s14, s15
			pid_population[population_num].pid.Kd = alpha * parent1.Kd
 8003e34:	4a91      	ldr	r2, [pc, #580]	@ (800407c <crossover_individuals+0x3bc>)
 8003e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e38:	015b      	lsls	r3, r3, #5
 8003e3a:	4413      	add	r3, r2
 8003e3c:	3308      	adds	r3, #8
 8003e3e:	edc3 7a00 	vstr	s15, [r3]
			pid_population[population_num + 1].pid.Kd = alpha * parent2.Kd
 8003e42:	ed97 7a02 	vldr	s14, [r7, #8]
 8003e46:	edd7 7a08 	vldr	s15, [r7, #32]
 8003e4a:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ (1 - alpha) * parent1.Kd;
 8003e4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e52:	edd7 7a08 	vldr	s15, [r7, #32]
 8003e56:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003e5a:	edd7 7a05 	vldr	s15, [r7, #20]
 8003e5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
			pid_population[population_num + 1].pid.Kd = alpha * parent2.Kd
 8003e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e64:	3301      	adds	r3, #1
					+ (1 - alpha) * parent1.Kd;
 8003e66:	ee77 7a27 	vadd.f32	s15, s14, s15
			pid_population[population_num + 1].pid.Kd = alpha * parent2.Kd
 8003e6a:	4a84      	ldr	r2, [pc, #528]	@ (800407c <crossover_individuals+0x3bc>)
 8003e6c:	015b      	lsls	r3, r3, #5
 8003e6e:	4413      	add	r3, r2
 8003e70:	3308      	adds	r3, #8
 8003e72:	edc3 7a00 	vstr	s15, [r3]

			parent1 = pid_population[idx1].sync_pid;
 8003e76:	4a81      	ldr	r2, [pc, #516]	@ (800407c <crossover_individuals+0x3bc>)
 8003e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e7a:	015b      	lsls	r3, r3, #5
 8003e7c:	4413      	add	r3, r2
 8003e7e:	f103 0208 	add.w	r2, r3, #8
 8003e82:	f107 030c 	add.w	r3, r7, #12
 8003e86:	3204      	adds	r2, #4
 8003e88:	ca07      	ldmia	r2, {r0, r1, r2}
 8003e8a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			parent2 = pid_population[idx2].sync_pid;
 8003e8e:	4a7b      	ldr	r2, [pc, #492]	@ (800407c <crossover_individuals+0x3bc>)
 8003e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e92:	015b      	lsls	r3, r3, #5
 8003e94:	4413      	add	r3, r2
 8003e96:	f103 0208 	add.w	r2, r3, #8
 8003e9a:	463b      	mov	r3, r7
 8003e9c:	3204      	adds	r2, #4
 8003e9e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ea0:	e883 0007 	stmia.w	r3, {r0, r1, r2}

			alpha = ((float) rand() / RAND_MAX);  // Crossover factor
 8003ea4:	f001 ff7a 	bl	8005d9c <rand>
 8003ea8:	ee07 0a90 	vmov	s15, r0
 8003eac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003eb0:	eddf 6a73 	vldr	s13, [pc, #460]	@ 8004080 <crossover_individuals+0x3c0>
 8003eb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003eb8:	edc7 7a08 	vstr	s15, [r7, #32]
			pid_population[population_num].sync_pid.Kp = alpha * parent1.Kp
 8003ebc:	ed97 7a03 	vldr	s14, [r7, #12]
 8003ec0:	edd7 7a08 	vldr	s15, [r7, #32]
 8003ec4:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ (1 - alpha) * parent2.Kp;
 8003ec8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ecc:	edd7 7a08 	vldr	s15, [r7, #32]
 8003ed0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003ed4:	edd7 7a00 	vldr	s15, [r7]
 8003ed8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003edc:	ee77 7a27 	vadd.f32	s15, s14, s15
			pid_population[population_num].sync_pid.Kp = alpha * parent1.Kp
 8003ee0:	4a66      	ldr	r2, [pc, #408]	@ (800407c <crossover_individuals+0x3bc>)
 8003ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ee4:	015b      	lsls	r3, r3, #5
 8003ee6:	4413      	add	r3, r2
 8003ee8:	330c      	adds	r3, #12
 8003eea:	edc3 7a00 	vstr	s15, [r3]
			pid_population[population_num + 1].sync_pid.Kp = alpha * parent2.Kp
 8003eee:	ed97 7a00 	vldr	s14, [r7]
 8003ef2:	edd7 7a08 	vldr	s15, [r7, #32]
 8003ef6:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ (1 - alpha) * parent1.Kp;
 8003efa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003efe:	edd7 7a08 	vldr	s15, [r7, #32]
 8003f02:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003f06:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
			pid_population[population_num + 1].sync_pid.Kp = alpha * parent2.Kp
 8003f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f10:	3301      	adds	r3, #1
					+ (1 - alpha) * parent1.Kp;
 8003f12:	ee77 7a27 	vadd.f32	s15, s14, s15
			pid_population[population_num + 1].sync_pid.Kp = alpha * parent2.Kp
 8003f16:	4a59      	ldr	r2, [pc, #356]	@ (800407c <crossover_individuals+0x3bc>)
 8003f18:	015b      	lsls	r3, r3, #5
 8003f1a:	4413      	add	r3, r2
 8003f1c:	330c      	adds	r3, #12
 8003f1e:	edc3 7a00 	vstr	s15, [r3]

			alpha = ((float) rand() / RAND_MAX);
 8003f22:	f001 ff3b 	bl	8005d9c <rand>
 8003f26:	ee07 0a90 	vmov	s15, r0
 8003f2a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f2e:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8004080 <crossover_individuals+0x3c0>
 8003f32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003f36:	edc7 7a08 	vstr	s15, [r7, #32]
			pid_population[population_num].sync_pid.Ki = alpha * parent1.Ki
 8003f3a:	ed97 7a04 	vldr	s14, [r7, #16]
 8003f3e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003f42:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ (1 - alpha) * parent2.Ki;
 8003f46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f4a:	edd7 7a08 	vldr	s15, [r7, #32]
 8003f4e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003f52:	edd7 7a01 	vldr	s15, [r7, #4]
 8003f56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003f5a:	ee77 7a27 	vadd.f32	s15, s14, s15
			pid_population[population_num].sync_pid.Ki = alpha * parent1.Ki
 8003f5e:	4a47      	ldr	r2, [pc, #284]	@ (800407c <crossover_individuals+0x3bc>)
 8003f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f62:	015b      	lsls	r3, r3, #5
 8003f64:	4413      	add	r3, r2
 8003f66:	3310      	adds	r3, #16
 8003f68:	edc3 7a00 	vstr	s15, [r3]
			pid_population[population_num + 1].sync_pid.Ki = alpha * parent2.Ki
 8003f6c:	ed97 7a01 	vldr	s14, [r7, #4]
 8003f70:	edd7 7a08 	vldr	s15, [r7, #32]
 8003f74:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ (1 - alpha) * parent1.Ki;
 8003f78:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f7c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003f80:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003f84:	edd7 7a04 	vldr	s15, [r7, #16]
 8003f88:	ee66 7aa7 	vmul.f32	s15, s13, s15
			pid_population[population_num + 1].sync_pid.Ki = alpha * parent2.Ki
 8003f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f8e:	3301      	adds	r3, #1
					+ (1 - alpha) * parent1.Ki;
 8003f90:	ee77 7a27 	vadd.f32	s15, s14, s15
			pid_population[population_num + 1].sync_pid.Ki = alpha * parent2.Ki
 8003f94:	4a39      	ldr	r2, [pc, #228]	@ (800407c <crossover_individuals+0x3bc>)
 8003f96:	015b      	lsls	r3, r3, #5
 8003f98:	4413      	add	r3, r2
 8003f9a:	3310      	adds	r3, #16
 8003f9c:	edc3 7a00 	vstr	s15, [r3]

			alpha = ((float) rand() / RAND_MAX);
 8003fa0:	f001 fefc 	bl	8005d9c <rand>
 8003fa4:	ee07 0a90 	vmov	s15, r0
 8003fa8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fac:	eddf 6a34 	vldr	s13, [pc, #208]	@ 8004080 <crossover_individuals+0x3c0>
 8003fb0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003fb4:	edc7 7a08 	vstr	s15, [r7, #32]
			pid_population[population_num].sync_pid.Kd = alpha * parent1.Kd
 8003fb8:	ed97 7a05 	vldr	s14, [r7, #20]
 8003fbc:	edd7 7a08 	vldr	s15, [r7, #32]
 8003fc0:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ (1 - alpha) * parent2.Kd;
 8003fc4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fc8:	edd7 7a08 	vldr	s15, [r7, #32]
 8003fcc:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003fd0:	edd7 7a02 	vldr	s15, [r7, #8]
 8003fd4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003fd8:	ee77 7a27 	vadd.f32	s15, s14, s15
			pid_population[population_num].sync_pid.Kd = alpha * parent1.Kd
 8003fdc:	4a27      	ldr	r2, [pc, #156]	@ (800407c <crossover_individuals+0x3bc>)
 8003fde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fe0:	015b      	lsls	r3, r3, #5
 8003fe2:	4413      	add	r3, r2
 8003fe4:	3314      	adds	r3, #20
 8003fe6:	edc3 7a00 	vstr	s15, [r3]
			pid_population[population_num + 1].sync_pid.Kd = alpha * parent2.Kd
 8003fea:	ed97 7a02 	vldr	s14, [r7, #8]
 8003fee:	edd7 7a08 	vldr	s15, [r7, #32]
 8003ff2:	ee27 7a27 	vmul.f32	s14, s14, s15
					+ (1 - alpha) * parent1.Kd;
 8003ff6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ffa:	edd7 7a08 	vldr	s15, [r7, #32]
 8003ffe:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8004002:	edd7 7a05 	vldr	s15, [r7, #20]
 8004006:	ee66 7aa7 	vmul.f32	s15, s13, s15
			pid_population[population_num + 1].sync_pid.Kd = alpha * parent2.Kd
 800400a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800400c:	3301      	adds	r3, #1
					+ (1 - alpha) * parent1.Kd;
 800400e:	ee77 7a27 	vadd.f32	s15, s14, s15
			pid_population[population_num + 1].sync_pid.Kd = alpha * parent2.Kd
 8004012:	4a1a      	ldr	r2, [pc, #104]	@ (800407c <crossover_individuals+0x3bc>)
 8004014:	015b      	lsls	r3, r3, #5
 8004016:	4413      	add	r3, r2
 8004018:	3314      	adds	r3, #20
 800401a:	edc3 7a00 	vstr	s15, [r3]

			float parent_intg1 = pid_population[idx1].integral_preload;
 800401e:	4a17      	ldr	r2, [pc, #92]	@ (800407c <crossover_individuals+0x3bc>)
 8004020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004022:	015b      	lsls	r3, r3, #5
 8004024:	4413      	add	r3, r2
 8004026:	3318      	adds	r3, #24
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	61fb      	str	r3, [r7, #28]
			float parent_intg2 = pid_population[idx2].integral_preload;
 800402c:	4a13      	ldr	r2, [pc, #76]	@ (800407c <crossover_individuals+0x3bc>)
 800402e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004030:	015b      	lsls	r3, r3, #5
 8004032:	4413      	add	r3, r2
 8004034:	3318      	adds	r3, #24
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	61bb      	str	r3, [r7, #24]

			alpha = ((float) rand() / RAND_MAX);  // Crossover factor
 800403a:	f001 feaf 	bl	8005d9c <rand>
 800403e:	ee07 0a90 	vmov	s15, r0
 8004042:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004046:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8004080 <crossover_individuals+0x3c0>
 800404a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800404e:	edc7 7a08 	vstr	s15, [r7, #32]
			pid_population[population_num].integral_preload = alpha
					* parent_intg1 + (1 - alpha) * parent_intg2;
 8004052:	ed97 7a08 	vldr	s14, [r7, #32]
 8004056:	edd7 7a07 	vldr	s15, [r7, #28]
 800405a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800405e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004062:	edd7 7a08 	vldr	s15, [r7, #32]
 8004066:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800406a:	edd7 7a06 	vldr	s15, [r7, #24]
 800406e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004072:	ee77 7a27 	vadd.f32	s15, s14, s15
			pid_population[population_num].integral_preload = alpha
 8004076:	4a01      	ldr	r2, [pc, #4]	@ (800407c <crossover_individuals+0x3bc>)
 8004078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800407a:	e003      	b.n	8004084 <crossover_individuals+0x3c4>
 800407c:	20000380 	.word	0x20000380
 8004080:	4f000000 	.word	0x4f000000
 8004084:	015b      	lsls	r3, r3, #5
 8004086:	4413      	add	r3, r2
 8004088:	3318      	adds	r3, #24
 800408a:	edc3 7a00 	vstr	s15, [r3]
			pid_population[population_num + 1].integral_preload = alpha
					* parent_intg2 + (1 - alpha) * parent_intg1;
 800408e:	ed97 7a08 	vldr	s14, [r7, #32]
 8004092:	edd7 7a06 	vldr	s15, [r7, #24]
 8004096:	ee27 7a27 	vmul.f32	s14, s14, s15
 800409a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800409e:	edd7 7a08 	vldr	s15, [r7, #32]
 80040a2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80040a6:	edd7 7a07 	vldr	s15, [r7, #28]
 80040aa:	ee66 7aa7 	vmul.f32	s15, s13, s15
			pid_population[population_num + 1].integral_preload = alpha
 80040ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040b0:	3301      	adds	r3, #1
					* parent_intg2 + (1 - alpha) * parent_intg1;
 80040b2:	ee77 7a27 	vadd.f32	s15, s14, s15
			pid_population[population_num + 1].integral_preload = alpha
 80040b6:	4a15      	ldr	r2, [pc, #84]	@ (800410c <crossover_individuals+0x44c>)
 80040b8:	015b      	lsls	r3, r3, #5
 80040ba:	4413      	add	r3, r2
 80040bc:	3318      	adds	r3, #24
 80040be:	edc3 7a00 	vstr	s15, [r3]
			population_num += 2) {
 80040c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040c4:	3302      	adds	r3, #2
 80040c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	for (int population_num = 0; population_num < POPULATION_SIZE;
 80040c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040ca:	2b31      	cmp	r3, #49	@ 0x31
 80040cc:	f77f adfe 	ble.w	8003ccc <crossover_individuals+0xc>

		}
	}

	pid_population[rand() % POPULATION_SIZE] = best_population;
 80040d0:	f001 fe64 	bl	8005d9c <rand>
 80040d4:	4602      	mov	r2, r0
 80040d6:	4b0e      	ldr	r3, [pc, #56]	@ (8004110 <crossover_individuals+0x450>)
 80040d8:	fb83 1302 	smull	r1, r3, r3, r2
 80040dc:	1119      	asrs	r1, r3, #4
 80040de:	17d3      	asrs	r3, r2, #31
 80040e0:	1acb      	subs	r3, r1, r3
 80040e2:	2132      	movs	r1, #50	@ 0x32
 80040e4:	fb01 f303 	mul.w	r3, r1, r3
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	4a08      	ldr	r2, [pc, #32]	@ (800410c <crossover_individuals+0x44c>)
 80040ec:	015b      	lsls	r3, r3, #5
 80040ee:	4413      	add	r3, r2
 80040f0:	4a08      	ldr	r2, [pc, #32]	@ (8004114 <crossover_individuals+0x454>)
 80040f2:	461c      	mov	r4, r3
 80040f4:	4615      	mov	r5, r2
 80040f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040fa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80040fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8004102:	bf00      	nop
 8004104:	3730      	adds	r7, #48	@ 0x30
 8004106:	46bd      	mov	sp, r7
 8004108:	bdb0      	pop	{r4, r5, r7, pc}
 800410a:	bf00      	nop
 800410c:	20000380 	.word	0x20000380
 8004110:	51eb851f 	.word	0x51eb851f
 8004114:	200009c0 	.word	0x200009c0

08004118 <mutate_individuals>:

void mutate_individuals() {
 8004118:	b5b0      	push	{r4, r5, r7, lr}
 800411a:	ed2d 8b02 	vpush	{d8}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0

	for (int population_num = 0; population_num < POPULATION_SIZE;
 8004122:	2300      	movs	r3, #0
 8004124:	607b      	str	r3, [r7, #4]
 8004126:	e1a8      	b.n	800447a <mutate_individuals+0x362>
			population_num++) {

		if (((float) rand() / RAND_MAX) < MUTATION_RATE) {
 8004128:	f001 fe38 	bl	8005d9c <rand>
 800412c:	ee07 0a90 	vmov	s15, r0
 8004130:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004134:	eddf 6ade 	vldr	s13, [pc, #888]	@ 80044b0 <mutate_individuals+0x398>
 8004138:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800413c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8004140:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004148:	f140 8194 	bpl.w	8004474 <mutate_individuals+0x35c>

			pid_population[population_num].pid.Kp = fmax(0,
					pid_population[population_num].pid.Kp
 800414c:	4ad9      	ldr	r2, [pc, #868]	@ (80044b4 <mutate_individuals+0x39c>)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	015b      	lsls	r3, r3, #5
 8004152:	4413      	add	r3, r2
 8004154:	ed93 8a00 	vldr	s16, [r3]
							+ ((float) rand() / RAND_MAX) * del_Kp
 8004158:	f001 fe20 	bl	8005d9c <rand>
 800415c:	ee07 0a90 	vmov	s15, r0
 8004160:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004164:	eddf 6ad2 	vldr	s13, [pc, #840]	@ 80044b0 <mutate_individuals+0x398>
 8004168:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800416c:	4bd2      	ldr	r3, [pc, #840]	@ (80044b8 <mutate_individuals+0x3a0>)
 800416e:	edd3 7a00 	vldr	s15, [r3]
 8004172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004176:	ee38 7a27 	vadd.f32	s14, s16, s15
							- del_Kp / 2);
 800417a:	4bcf      	ldr	r3, [pc, #828]	@ (80044b8 <mutate_individuals+0x3a0>)
 800417c:	edd3 6a00 	vldr	s13, [r3]
 8004180:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8004184:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8004188:	ee77 7a67 	vsub.f32	s15, s14, s15
			pid_population[population_num].pid.Kp = fmax(0,
 800418c:	ee17 0a90 	vmov	r0, s15
 8004190:	f7fc fa02 	bl	8000598 <__aeabi_f2d>
 8004194:	4602      	mov	r2, r0
 8004196:	460b      	mov	r3, r1
 8004198:	ed9f 1bc3 	vldr	d1, [pc, #780]	@ 80044a8 <mutate_individuals+0x390>
 800419c:	ec43 2b10 	vmov	d0, r2, r3
 80041a0:	f006 fa2e 	bl	800a600 <fmax>
 80041a4:	ec53 2b10 	vmov	r2, r3, d0
 80041a8:	4610      	mov	r0, r2
 80041aa:	4619      	mov	r1, r3
 80041ac:	f7fc fd44 	bl	8000c38 <__aeabi_d2f>
 80041b0:	4602      	mov	r2, r0
 80041b2:	49c0      	ldr	r1, [pc, #768]	@ (80044b4 <mutate_individuals+0x39c>)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	015b      	lsls	r3, r3, #5
 80041b8:	440b      	add	r3, r1
 80041ba:	601a      	str	r2, [r3, #0]

			pid_population[population_num].pid.Ki = fmax(0,
					pid_population[population_num].pid.Ki
 80041bc:	4abd      	ldr	r2, [pc, #756]	@ (80044b4 <mutate_individuals+0x39c>)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	015b      	lsls	r3, r3, #5
 80041c2:	4413      	add	r3, r2
 80041c4:	3304      	adds	r3, #4
 80041c6:	ed93 8a00 	vldr	s16, [r3]
							+ ((float) rand() / RAND_MAX) * del_Ki
 80041ca:	f001 fde7 	bl	8005d9c <rand>
 80041ce:	ee07 0a90 	vmov	s15, r0
 80041d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041d6:	eddf 6ab6 	vldr	s13, [pc, #728]	@ 80044b0 <mutate_individuals+0x398>
 80041da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80041de:	4bb7      	ldr	r3, [pc, #732]	@ (80044bc <mutate_individuals+0x3a4>)
 80041e0:	edd3 7a00 	vldr	s15, [r3]
 80041e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041e8:	ee38 7a27 	vadd.f32	s14, s16, s15
							- del_Ki / 2);
 80041ec:	4bb3      	ldr	r3, [pc, #716]	@ (80044bc <mutate_individuals+0x3a4>)
 80041ee:	edd3 6a00 	vldr	s13, [r3]
 80041f2:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80041f6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80041fa:	ee77 7a67 	vsub.f32	s15, s14, s15
			pid_population[population_num].pid.Ki = fmax(0,
 80041fe:	ee17 0a90 	vmov	r0, s15
 8004202:	f7fc f9c9 	bl	8000598 <__aeabi_f2d>
 8004206:	4602      	mov	r2, r0
 8004208:	460b      	mov	r3, r1
 800420a:	ed9f 1ba7 	vldr	d1, [pc, #668]	@ 80044a8 <mutate_individuals+0x390>
 800420e:	ec43 2b10 	vmov	d0, r2, r3
 8004212:	f006 f9f5 	bl	800a600 <fmax>
 8004216:	ec53 2b10 	vmov	r2, r3, d0
 800421a:	4610      	mov	r0, r2
 800421c:	4619      	mov	r1, r3
 800421e:	f7fc fd0b 	bl	8000c38 <__aeabi_d2f>
 8004222:	4602      	mov	r2, r0
 8004224:	49a3      	ldr	r1, [pc, #652]	@ (80044b4 <mutate_individuals+0x39c>)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	015b      	lsls	r3, r3, #5
 800422a:	440b      	add	r3, r1
 800422c:	3304      	adds	r3, #4
 800422e:	601a      	str	r2, [r3, #0]

			pid_population[population_num].pid.Kd = fmax(0,
					pid_population[population_num].pid.Kd
 8004230:	4aa0      	ldr	r2, [pc, #640]	@ (80044b4 <mutate_individuals+0x39c>)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	015b      	lsls	r3, r3, #5
 8004236:	4413      	add	r3, r2
 8004238:	3308      	adds	r3, #8
 800423a:	ed93 8a00 	vldr	s16, [r3]
							+ ((float) rand() / RAND_MAX) * del_Kd
 800423e:	f001 fdad 	bl	8005d9c <rand>
 8004242:	ee07 0a90 	vmov	s15, r0
 8004246:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800424a:	eddf 6a99 	vldr	s13, [pc, #612]	@ 80044b0 <mutate_individuals+0x398>
 800424e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004252:	4b9b      	ldr	r3, [pc, #620]	@ (80044c0 <mutate_individuals+0x3a8>)
 8004254:	edd3 7a00 	vldr	s15, [r3]
 8004258:	ee67 7a27 	vmul.f32	s15, s14, s15
 800425c:	ee38 7a27 	vadd.f32	s14, s16, s15
							- del_Kd / 2);
 8004260:	4b97      	ldr	r3, [pc, #604]	@ (80044c0 <mutate_individuals+0x3a8>)
 8004262:	edd3 6a00 	vldr	s13, [r3]
 8004266:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800426a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800426e:	ee77 7a67 	vsub.f32	s15, s14, s15
			pid_population[population_num].pid.Kd = fmax(0,
 8004272:	ee17 0a90 	vmov	r0, s15
 8004276:	f7fc f98f 	bl	8000598 <__aeabi_f2d>
 800427a:	4602      	mov	r2, r0
 800427c:	460b      	mov	r3, r1
 800427e:	ed9f 1b8a 	vldr	d1, [pc, #552]	@ 80044a8 <mutate_individuals+0x390>
 8004282:	ec43 2b10 	vmov	d0, r2, r3
 8004286:	f006 f9bb 	bl	800a600 <fmax>
 800428a:	ec53 2b10 	vmov	r2, r3, d0
 800428e:	4610      	mov	r0, r2
 8004290:	4619      	mov	r1, r3
 8004292:	f7fc fcd1 	bl	8000c38 <__aeabi_d2f>
 8004296:	4602      	mov	r2, r0
 8004298:	4986      	ldr	r1, [pc, #536]	@ (80044b4 <mutate_individuals+0x39c>)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	015b      	lsls	r3, r3, #5
 800429e:	440b      	add	r3, r1
 80042a0:	3308      	adds	r3, #8
 80042a2:	601a      	str	r2, [r3, #0]

			pid_population[population_num].sync_pid.Kp = fmax(0,
					pid_population[population_num].sync_pid.Kp
 80042a4:	4a83      	ldr	r2, [pc, #524]	@ (80044b4 <mutate_individuals+0x39c>)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	015b      	lsls	r3, r3, #5
 80042aa:	4413      	add	r3, r2
 80042ac:	330c      	adds	r3, #12
 80042ae:	ed93 8a00 	vldr	s16, [r3]
							+ ((float) rand() / RAND_MAX) * del_Kp_sync
 80042b2:	f001 fd73 	bl	8005d9c <rand>
 80042b6:	ee07 0a90 	vmov	s15, r0
 80042ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042be:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 80044b0 <mutate_individuals+0x398>
 80042c2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80042c6:	4b7f      	ldr	r3, [pc, #508]	@ (80044c4 <mutate_individuals+0x3ac>)
 80042c8:	edd3 7a00 	vldr	s15, [r3]
 80042cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042d0:	ee38 7a27 	vadd.f32	s14, s16, s15
							- del_Kp_sync / 2);
 80042d4:	4b7b      	ldr	r3, [pc, #492]	@ (80044c4 <mutate_individuals+0x3ac>)
 80042d6:	edd3 6a00 	vldr	s13, [r3]
 80042da:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80042de:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80042e2:	ee77 7a67 	vsub.f32	s15, s14, s15
			pid_population[population_num].sync_pid.Kp = fmax(0,
 80042e6:	ee17 0a90 	vmov	r0, s15
 80042ea:	f7fc f955 	bl	8000598 <__aeabi_f2d>
 80042ee:	4602      	mov	r2, r0
 80042f0:	460b      	mov	r3, r1
 80042f2:	ed9f 1b6d 	vldr	d1, [pc, #436]	@ 80044a8 <mutate_individuals+0x390>
 80042f6:	ec43 2b10 	vmov	d0, r2, r3
 80042fa:	f006 f981 	bl	800a600 <fmax>
 80042fe:	ec53 2b10 	vmov	r2, r3, d0
 8004302:	4610      	mov	r0, r2
 8004304:	4619      	mov	r1, r3
 8004306:	f7fc fc97 	bl	8000c38 <__aeabi_d2f>
 800430a:	4602      	mov	r2, r0
 800430c:	4969      	ldr	r1, [pc, #420]	@ (80044b4 <mutate_individuals+0x39c>)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	015b      	lsls	r3, r3, #5
 8004312:	440b      	add	r3, r1
 8004314:	330c      	adds	r3, #12
 8004316:	601a      	str	r2, [r3, #0]

			pid_population[population_num].sync_pid.Ki = fmax(0,
					pid_population[population_num].sync_pid.Ki
 8004318:	4a66      	ldr	r2, [pc, #408]	@ (80044b4 <mutate_individuals+0x39c>)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	015b      	lsls	r3, r3, #5
 800431e:	4413      	add	r3, r2
 8004320:	3310      	adds	r3, #16
 8004322:	ed93 8a00 	vldr	s16, [r3]
							+ ((float) rand() / RAND_MAX) * del_Ki_sync
 8004326:	f001 fd39 	bl	8005d9c <rand>
 800432a:	ee07 0a90 	vmov	s15, r0
 800432e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004332:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80044b0 <mutate_individuals+0x398>
 8004336:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800433a:	4b63      	ldr	r3, [pc, #396]	@ (80044c8 <mutate_individuals+0x3b0>)
 800433c:	edd3 7a00 	vldr	s15, [r3]
 8004340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004344:	ee38 7a27 	vadd.f32	s14, s16, s15
							- del_Ki_sync / 2);
 8004348:	4b5f      	ldr	r3, [pc, #380]	@ (80044c8 <mutate_individuals+0x3b0>)
 800434a:	edd3 6a00 	vldr	s13, [r3]
 800434e:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8004352:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8004356:	ee77 7a67 	vsub.f32	s15, s14, s15
			pid_population[population_num].sync_pid.Ki = fmax(0,
 800435a:	ee17 0a90 	vmov	r0, s15
 800435e:	f7fc f91b 	bl	8000598 <__aeabi_f2d>
 8004362:	4602      	mov	r2, r0
 8004364:	460b      	mov	r3, r1
 8004366:	ed9f 1b50 	vldr	d1, [pc, #320]	@ 80044a8 <mutate_individuals+0x390>
 800436a:	ec43 2b10 	vmov	d0, r2, r3
 800436e:	f006 f947 	bl	800a600 <fmax>
 8004372:	ec53 2b10 	vmov	r2, r3, d0
 8004376:	4610      	mov	r0, r2
 8004378:	4619      	mov	r1, r3
 800437a:	f7fc fc5d 	bl	8000c38 <__aeabi_d2f>
 800437e:	4602      	mov	r2, r0
 8004380:	494c      	ldr	r1, [pc, #304]	@ (80044b4 <mutate_individuals+0x39c>)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	015b      	lsls	r3, r3, #5
 8004386:	440b      	add	r3, r1
 8004388:	3310      	adds	r3, #16
 800438a:	601a      	str	r2, [r3, #0]

			pid_population[population_num].sync_pid.Kd = fmax(0,
					pid_population[population_num].sync_pid.Kd
 800438c:	4a49      	ldr	r2, [pc, #292]	@ (80044b4 <mutate_individuals+0x39c>)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	015b      	lsls	r3, r3, #5
 8004392:	4413      	add	r3, r2
 8004394:	3314      	adds	r3, #20
 8004396:	ed93 8a00 	vldr	s16, [r3]
							+ ((float) rand() / RAND_MAX) * del_Kd_sync
 800439a:	f001 fcff 	bl	8005d9c <rand>
 800439e:	ee07 0a90 	vmov	s15, r0
 80043a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80043a6:	eddf 6a42 	vldr	s13, [pc, #264]	@ 80044b0 <mutate_individuals+0x398>
 80043aa:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80043ae:	4b47      	ldr	r3, [pc, #284]	@ (80044cc <mutate_individuals+0x3b4>)
 80043b0:	edd3 7a00 	vldr	s15, [r3]
 80043b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043b8:	ee38 7a27 	vadd.f32	s14, s16, s15
							- del_Kd_sync / 2);
 80043bc:	4b43      	ldr	r3, [pc, #268]	@ (80044cc <mutate_individuals+0x3b4>)
 80043be:	edd3 6a00 	vldr	s13, [r3]
 80043c2:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 80043c6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80043ca:	ee77 7a67 	vsub.f32	s15, s14, s15
			pid_population[population_num].sync_pid.Kd = fmax(0,
 80043ce:	ee17 0a90 	vmov	r0, s15
 80043d2:	f7fc f8e1 	bl	8000598 <__aeabi_f2d>
 80043d6:	4602      	mov	r2, r0
 80043d8:	460b      	mov	r3, r1
 80043da:	ed9f 1b33 	vldr	d1, [pc, #204]	@ 80044a8 <mutate_individuals+0x390>
 80043de:	ec43 2b10 	vmov	d0, r2, r3
 80043e2:	f006 f90d 	bl	800a600 <fmax>
 80043e6:	ec53 2b10 	vmov	r2, r3, d0
 80043ea:	4610      	mov	r0, r2
 80043ec:	4619      	mov	r1, r3
 80043ee:	f7fc fc23 	bl	8000c38 <__aeabi_d2f>
 80043f2:	4602      	mov	r2, r0
 80043f4:	492f      	ldr	r1, [pc, #188]	@ (80044b4 <mutate_individuals+0x39c>)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	015b      	lsls	r3, r3, #5
 80043fa:	440b      	add	r3, r1
 80043fc:	3314      	adds	r3, #20
 80043fe:	601a      	str	r2, [r3, #0]

			pid_population[population_num].integral_preload = fmax(0,
					pid_population[population_num].integral_preload
 8004400:	4a2c      	ldr	r2, [pc, #176]	@ (80044b4 <mutate_individuals+0x39c>)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	015b      	lsls	r3, r3, #5
 8004406:	4413      	add	r3, r2
 8004408:	3318      	adds	r3, #24
 800440a:	ed93 8a00 	vldr	s16, [r3]
							+ ((float) rand() / RAND_MAX) * del_intg
 800440e:	f001 fcc5 	bl	8005d9c <rand>
 8004412:	ee07 0a90 	vmov	s15, r0
 8004416:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800441a:	eddf 6a25 	vldr	s13, [pc, #148]	@ 80044b0 <mutate_individuals+0x398>
 800441e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8004422:	4b2b      	ldr	r3, [pc, #172]	@ (80044d0 <mutate_individuals+0x3b8>)
 8004424:	edd3 7a00 	vldr	s15, [r3]
 8004428:	ee67 7a27 	vmul.f32	s15, s14, s15
 800442c:	ee38 7a27 	vadd.f32	s14, s16, s15
							- del_intg / 2);
 8004430:	4b27      	ldr	r3, [pc, #156]	@ (80044d0 <mutate_individuals+0x3b8>)
 8004432:	edd3 6a00 	vldr	s13, [r3]
 8004436:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800443a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800443e:	ee77 7a67 	vsub.f32	s15, s14, s15
			pid_population[population_num].integral_preload = fmax(0,
 8004442:	ee17 0a90 	vmov	r0, s15
 8004446:	f7fc f8a7 	bl	8000598 <__aeabi_f2d>
 800444a:	4602      	mov	r2, r0
 800444c:	460b      	mov	r3, r1
 800444e:	ed9f 1b16 	vldr	d1, [pc, #88]	@ 80044a8 <mutate_individuals+0x390>
 8004452:	ec43 2b10 	vmov	d0, r2, r3
 8004456:	f006 f8d3 	bl	800a600 <fmax>
 800445a:	ec53 2b10 	vmov	r2, r3, d0
 800445e:	4610      	mov	r0, r2
 8004460:	4619      	mov	r1, r3
 8004462:	f7fc fbe9 	bl	8000c38 <__aeabi_d2f>
 8004466:	4602      	mov	r2, r0
 8004468:	4912      	ldr	r1, [pc, #72]	@ (80044b4 <mutate_individuals+0x39c>)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	015b      	lsls	r3, r3, #5
 800446e:	440b      	add	r3, r1
 8004470:	3318      	adds	r3, #24
 8004472:	601a      	str	r2, [r3, #0]
			population_num++) {
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	3301      	adds	r3, #1
 8004478:	607b      	str	r3, [r7, #4]
	for (int population_num = 0; population_num < POPULATION_SIZE;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b31      	cmp	r3, #49	@ 0x31
 800447e:	f77f ae53 	ble.w	8004128 <mutate_individuals+0x10>
		}
	}

	pid_population[rand() % POPULATION_SIZE] = best_population;
 8004482:	f001 fc8b 	bl	8005d9c <rand>
 8004486:	4602      	mov	r2, r0
 8004488:	4b12      	ldr	r3, [pc, #72]	@ (80044d4 <mutate_individuals+0x3bc>)
 800448a:	fb83 1302 	smull	r1, r3, r3, r2
 800448e:	1119      	asrs	r1, r3, #4
 8004490:	17d3      	asrs	r3, r2, #31
 8004492:	1acb      	subs	r3, r1, r3
 8004494:	2132      	movs	r1, #50	@ 0x32
 8004496:	fb01 f303 	mul.w	r3, r1, r3
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	4a05      	ldr	r2, [pc, #20]	@ (80044b4 <mutate_individuals+0x39c>)
 800449e:	015b      	lsls	r3, r3, #5
 80044a0:	4413      	add	r3, r2
 80044a2:	e019      	b.n	80044d8 <mutate_individuals+0x3c0>
 80044a4:	f3af 8000 	nop.w
	...
 80044b0:	4f000000 	.word	0x4f000000
 80044b4:	20000380 	.word	0x20000380
 80044b8:	20000c38 	.word	0x20000c38
 80044bc:	20000c3c 	.word	0x20000c3c
 80044c0:	20000c40 	.word	0x20000c40
 80044c4:	20000c48 	.word	0x20000c48
 80044c8:	20000c4c 	.word	0x20000c4c
 80044cc:	20000c50 	.word	0x20000c50
 80044d0:	20000c44 	.word	0x20000c44
 80044d4:	51eb851f 	.word	0x51eb851f
 80044d8:	4a07      	ldr	r2, [pc, #28]	@ (80044f8 <mutate_individuals+0x3e0>)
 80044da:	461c      	mov	r4, r3
 80044dc:	4615      	mov	r5, r2
 80044de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80044e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80044e2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80044e6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80044ea:	bf00      	nop
 80044ec:	3708      	adds	r7, #8
 80044ee:	46bd      	mov	sp, r7
 80044f0:	ecbd 8b02 	vpop	{d8}
 80044f4:	bdb0      	pop	{r4, r5, r7, pc}
 80044f6:	bf00      	nop
 80044f8:	200009c0 	.word	0x200009c0

080044fc <evaluate_population>:

void evaluate_population() {
 80044fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044fe:	af00      	add	r7, sp, #0

	for (population_num = 0; population_num < POPULATION_SIZE;
 8004500:	4b2e      	ldr	r3, [pc, #184]	@ (80045bc <evaluate_population+0xc0>)
 8004502:	2200      	movs	r2, #0
 8004504:	601a      	str	r2, [r3, #0]
 8004506:	e052      	b.n	80045ae <evaluate_population+0xb2>
			population_num++) {

		SimulateMotors(pid_population[population_num].pid,
 8004508:	4b2c      	ldr	r3, [pc, #176]	@ (80045bc <evaluate_population+0xc0>)
 800450a:	6819      	ldr	r1, [r3, #0]
 800450c:	4b2b      	ldr	r3, [pc, #172]	@ (80045bc <evaluate_population+0xc0>)
 800450e:	6818      	ldr	r0, [r3, #0]
 8004510:	4b2a      	ldr	r3, [pc, #168]	@ (80045bc <evaluate_population+0xc0>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a2a      	ldr	r2, [pc, #168]	@ (80045c0 <evaluate_population+0xc4>)
 8004516:	015b      	lsls	r3, r3, #5
 8004518:	4413      	add	r3, r2
 800451a:	3318      	adds	r3, #24
 800451c:	edd3 4a00 	vldr	s9, [r3]
 8004520:	4b26      	ldr	r3, [pc, #152]	@ (80045bc <evaluate_population+0xc0>)
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	4c27      	ldr	r4, [pc, #156]	@ (80045c4 <evaluate_population+0xc8>)
 8004526:	4613      	mov	r3, r2
 8004528:	005b      	lsls	r3, r3, #1
 800452a:	4413      	add	r3, r2
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	4423      	add	r3, r4
 8004530:	681c      	ldr	r4, [r3, #0]
 8004532:	4b22      	ldr	r3, [pc, #136]	@ (80045bc <evaluate_population+0xc0>)
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	4d23      	ldr	r5, [pc, #140]	@ (80045c4 <evaluate_population+0xc8>)
 8004538:	4613      	mov	r3, r2
 800453a:	005b      	lsls	r3, r3, #1
 800453c:	4413      	add	r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	442b      	add	r3, r5
 8004542:	3304      	adds	r3, #4
 8004544:	681d      	ldr	r5, [r3, #0]
 8004546:	4b1d      	ldr	r3, [pc, #116]	@ (80045bc <evaluate_population+0xc0>)
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	4e1e      	ldr	r6, [pc, #120]	@ (80045c4 <evaluate_population+0xc8>)
 800454c:	4613      	mov	r3, r2
 800454e:	005b      	lsls	r3, r3, #1
 8004550:	4413      	add	r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4433      	add	r3, r6
 8004556:	3308      	adds	r3, #8
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	4e19      	ldr	r6, [pc, #100]	@ (80045c0 <evaluate_population+0xc4>)
 800455c:	0143      	lsls	r3, r0, #5
 800455e:	4433      	add	r3, r6
 8004560:	3308      	adds	r3, #8
 8004562:	ed93 5a01 	vldr	s10, [r3, #4]
 8004566:	edd3 5a02 	vldr	s11, [r3, #8]
 800456a:	ed93 6a03 	vldr	s12, [r3, #12]
 800456e:	4814      	ldr	r0, [pc, #80]	@ (80045c0 <evaluate_population+0xc4>)
 8004570:	014b      	lsls	r3, r1, #5
 8004572:	4403      	add	r3, r0
 8004574:	edd3 6a00 	vldr	s13, [r3]
 8004578:	ed93 7a01 	vldr	s14, [r3, #4]
 800457c:	edd3 7a02 	vldr	s15, [r3, #8]
 8004580:	4629      	mov	r1, r5
 8004582:	4620      	mov	r0, r4
 8004584:	eeb0 3a64 	vmov.f32	s6, s9
 8004588:	eef0 1a45 	vmov.f32	s3, s10
 800458c:	eeb0 2a65 	vmov.f32	s4, s11
 8004590:	eef0 2a46 	vmov.f32	s5, s12
 8004594:	eeb0 0a66 	vmov.f32	s0, s13
 8004598:	eef0 0a47 	vmov.f32	s1, s14
 800459c:	eeb0 1a67 	vmov.f32	s2, s15
 80045a0:	f000 f812 	bl	80045c8 <SimulateMotors>
			population_num++) {
 80045a4:	4b05      	ldr	r3, [pc, #20]	@ (80045bc <evaluate_population+0xc0>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	3301      	adds	r3, #1
 80045aa:	4a04      	ldr	r2, [pc, #16]	@ (80045bc <evaluate_population+0xc0>)
 80045ac:	6013      	str	r3, [r2, #0]
	for (population_num = 0; population_num < POPULATION_SIZE;
 80045ae:	4b03      	ldr	r3, [pc, #12]	@ (80045bc <evaluate_population+0xc0>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2b31      	cmp	r3, #49	@ 0x31
 80045b4:	dda8      	ble.n	8004508 <evaluate_population+0xc>
				testParam[population_num].target_speed,
				testParam[population_num].simulation_time);

	}

}
 80045b6:	bf00      	nop
 80045b8:	bf00      	nop
 80045ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045bc:	20000c64 	.word	0x20000c64
 80045c0:	20000380 	.word	0x20000380
 80045c4:	200009e0 	.word	0x200009e0

080045c8 <SimulateMotors>:

void SimulateMotors(PID_Coefficients pid_coeffs,
		PID_Coefficients pid_sync_coeffs, float integral_preload,
		uint32_t initial_speed, uint32_t target_speed, uint32_t simulation_time) {
 80045c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045cc:	ed2d 8b02 	vpush	{d8}
 80045d0:	b09e      	sub	sp, #120	@ 0x78
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	eeb0 5a40 	vmov.f32	s10, s0
 80045d8:	eef0 5a60 	vmov.f32	s11, s1
 80045dc:	eeb0 6a41 	vmov.f32	s12, s2
 80045e0:	eef0 6a61 	vmov.f32	s13, s3
 80045e4:	eeb0 7a42 	vmov.f32	s14, s4
 80045e8:	eef0 7a62 	vmov.f32	s15, s5
 80045ec:	ed87 3a0b 	vstr	s6, [r7, #44]	@ 0x2c
 80045f0:	62b8      	str	r0, [r7, #40]	@ 0x28
 80045f2:	6279      	str	r1, [r7, #36]	@ 0x24
 80045f4:	623a      	str	r2, [r7, #32]
 80045f6:	ed87 5a0f 	vstr	s10, [r7, #60]	@ 0x3c
 80045fa:	edc7 5a10 	vstr	s11, [r7, #64]	@ 0x40
 80045fe:	ed87 6a11 	vstr	s12, [r7, #68]	@ 0x44
 8004602:	edc7 6a0c 	vstr	s13, [r7, #48]	@ 0x30
 8004606:	ed87 7a0d 	vstr	s14, [r7, #52]	@ 0x34
 800460a:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

	uint64_t current_time = 0;
 800460e:	f04f 0200 	mov.w	r2, #0
 8004612:	f04f 0300 	mov.w	r3, #0
 8004616:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
	uint64_t old_time1 = 0, old_time2 = 0, old_time3 = 0;
 800461a:	f04f 0200 	mov.w	r2, #0
 800461e:	f04f 0300 	mov.w	r3, #0
 8004622:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8004626:	f04f 0200 	mov.w	r2, #0
 800462a:	f04f 0300 	mov.w	r3, #0
 800462e:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
 8004632:	f04f 0200 	mov.w	r2, #0
 8004636:	f04f 0300 	mov.w	r3, #0
 800463a:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
	float dt1 = 0, dt2 = 0, dt3 = 0;
 800463e:	f04f 0300 	mov.w	r3, #0
 8004642:	667b      	str	r3, [r7, #100]	@ 0x64
 8004644:	f04f 0300 	mov.w	r3, #0
 8004648:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800464a:	f04f 0300 	mov.w	r3, #0
 800464e:	64bb      	str	r3, [r7, #72]	@ 0x48

	old_time1 = HAL_GetTick();
 8004650:	f7fd f996 	bl	8001980 <HAL_GetTick>
 8004654:	4603      	mov	r3, r0
 8004656:	2200      	movs	r2, #0
 8004658:	61bb      	str	r3, [r7, #24]
 800465a:	61fa      	str	r2, [r7, #28]
 800465c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004660:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	old_time2 = HAL_GetTick();
 8004664:	f7fd f98c 	bl	8001980 <HAL_GetTick>
 8004668:	4603      	mov	r3, r0
 800466a:	2200      	movs	r2, #0
 800466c:	613b      	str	r3, [r7, #16]
 800466e:	617a      	str	r2, [r7, #20]
 8004670:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004674:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	old_time3 = HAL_GetTick();
 8004678:	f7fd f982 	bl	8001980 <HAL_GetTick>
 800467c:	4603      	mov	r3, r0
 800467e:	2200      	movs	r2, #0
 8004680:	60bb      	str	r3, [r7, #8]
 8004682:	60fa      	str	r2, [r7, #12]
 8004684:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004688:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68

// Initialize motor model
	init_motor_state1(initial_speed);   // initial_speed in RPM
 800468c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800468e:	ee07 3a90 	vmov	s15, r3
 8004692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004696:	eeb0 0a67 	vmov.f32	s0, s15
 800469a:	f000 ffa9 	bl	80055f0 <init_motor_state1>
	init_motor_state2(initial_speed);   // initial_speed in RPM
 800469e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046a0:	ee07 3a90 	vmov	s15, r3
 80046a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046a8:	eeb0 0a67 	vmov.f32	s0, s15
 80046ac:	f001 fb18 	bl	8005ce0 <init_motor_state2>

	motor1_status.speed_target = target_speed;
 80046b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b2:	ee07 3a90 	vmov	s15, r3
 80046b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ba:	4bce      	ldr	r3, [pc, #824]	@ (80049f4 <SimulateMotors+0x42c>)
 80046bc:	edc3 7a00 	vstr	s15, [r3]
	motor2_status.speed_target = target_speed;
 80046c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c2:	ee07 3a90 	vmov	s15, r3
 80046c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ca:	4bcb      	ldr	r3, [pc, #812]	@ (80049f8 <SimulateMotors+0x430>)
 80046cc:	edc3 7a00 	vstr	s15, [r3]
	motor1_status.position = 0;
 80046d0:	4bc8      	ldr	r3, [pc, #800]	@ (80049f4 <SimulateMotors+0x42c>)
 80046d2:	f04f 0200 	mov.w	r2, #0
 80046d6:	609a      	str	r2, [r3, #8]
	motor2_status.position = 0;
 80046d8:	4bc7      	ldr	r3, [pc, #796]	@ (80049f8 <SimulateMotors+0x430>)
 80046da:	f04f 0200 	mov.w	r2, #0
 80046de:	609a      	str	r2, [r3, #8]

#if TEST_MOTOR1_PID

	PID_Init(&pid_motor1, tuned_pid1, 0);
 80046e0:	4bc6      	ldr	r3, [pc, #792]	@ (80049fc <SimulateMotors+0x434>)
 80046e2:	edd3 6a00 	vldr	s13, [r3]
 80046e6:	ed93 7a01 	vldr	s14, [r3, #4]
 80046ea:	edd3 7a02 	vldr	s15, [r3, #8]
 80046ee:	eddf 1ac4 	vldr	s3, [pc, #784]	@ 8004a00 <SimulateMotors+0x438>
 80046f2:	eeb0 0a66 	vmov.f32	s0, s13
 80046f6:	eef0 0a47 	vmov.f32	s1, s14
 80046fa:	eeb0 1a67 	vmov.f32	s2, s15
 80046fe:	48c1      	ldr	r0, [pc, #772]	@ (8004a04 <SimulateMotors+0x43c>)
 8004700:	f000 f99f 	bl	8004a42 <PID_Init>
	PID_Init(&pid_motor2, tuned_pid2, 0);
 8004704:	4bc0      	ldr	r3, [pc, #768]	@ (8004a08 <SimulateMotors+0x440>)
 8004706:	edd3 6a00 	vldr	s13, [r3]
 800470a:	ed93 7a01 	vldr	s14, [r3, #4]
 800470e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004712:	eddf 1abb 	vldr	s3, [pc, #748]	@ 8004a00 <SimulateMotors+0x438>
 8004716:	eeb0 0a66 	vmov.f32	s0, s13
 800471a:	eef0 0a47 	vmov.f32	s1, s14
 800471e:	eeb0 1a67 	vmov.f32	s2, s15
 8004722:	48ba      	ldr	r0, [pc, #744]	@ (8004a0c <SimulateMotors+0x444>)
 8004724:	f000 f98d 	bl	8004a42 <PID_Init>
	PID_Init(&pid_sync, tuned_sync_pid, tuned_integral_preload);
 8004728:	4bb9      	ldr	r3, [pc, #740]	@ (8004a10 <SimulateMotors+0x448>)
 800472a:	ed93 6a00 	vldr	s12, [r3]
 800472e:	4bb9      	ldr	r3, [pc, #740]	@ (8004a14 <SimulateMotors+0x44c>)
 8004730:	edd3 6a00 	vldr	s13, [r3]
 8004734:	ed93 7a01 	vldr	s14, [r3, #4]
 8004738:	edd3 7a02 	vldr	s15, [r3, #8]
 800473c:	eef0 1a46 	vmov.f32	s3, s12
 8004740:	eeb0 0a66 	vmov.f32	s0, s13
 8004744:	eef0 0a47 	vmov.f32	s1, s14
 8004748:	eeb0 1a67 	vmov.f32	s2, s15
 800474c:	48b2      	ldr	r0, [pc, #712]	@ (8004a18 <SimulateMotors+0x450>)
 800474e:	f000 f978 	bl	8004a42 <PID_Init>
	const float w3 = 1e6;   // overshoot penalty
	const float w4 = 1.0;   // error weight penalty

	PID_Init(&pid_motor2, pid_coeffs, 0);
#endif
	init_performance_metrics(&metrics, initial_speed, target_speed);
 8004752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004754:	ee07 3a90 	vmov	s15, r3
 8004758:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800475c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800475e:	ee07 3a10 	vmov	s14, r3
 8004762:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004766:	eef0 0a47 	vmov.f32	s1, s14
 800476a:	eeb0 0a67 	vmov.f32	s0, s15
 800476e:	48ab      	ldr	r0, [pc, #684]	@ (8004a1c <SimulateMotors+0x454>)
 8004770:	f000 fa80 	bl	8004c74 <init_performance_metrics>

	while (dt1 < simulation_time) {
 8004774:	e129      	b.n	80049ca <SimulateMotors+0x402>

		current_time = HAL_GetTick();
 8004776:	f7fd f903 	bl	8001980 <HAL_GetTick>
 800477a:	4603      	mov	r3, r0
 800477c:	2200      	movs	r2, #0
 800477e:	603b      	str	r3, [r7, #0]
 8004780:	607a      	str	r2, [r7, #4]
 8004782:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004786:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
		dt1 = current_time - old_time1;
 800478a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 800478e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004792:	1a84      	subs	r4, r0, r2
 8004794:	eb61 0503 	sbc.w	r5, r1, r3
 8004798:	4620      	mov	r0, r4
 800479a:	4629      	mov	r1, r5
 800479c:	f7fc fb64 	bl	8000e68 <__aeabi_ul2f>
 80047a0:	4603      	mov	r3, r0
 80047a2:	667b      	str	r3, [r7, #100]	@ 0x64
		dt2 = current_time - old_time2;
 80047a4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80047a8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80047ac:	ebb0 0802 	subs.w	r8, r0, r2
 80047b0:	eb61 0903 	sbc.w	r9, r1, r3
 80047b4:	4640      	mov	r0, r8
 80047b6:	4649      	mov	r1, r9
 80047b8:	f7fc fb56 	bl	8000e68 <__aeabi_ul2f>
 80047bc:	4603      	mov	r3, r0
 80047be:	64fb      	str	r3, [r7, #76]	@ 0x4c
		dt3 = current_time - old_time3;
 80047c0:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 80047c4:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80047c8:	ebb0 0a02 	subs.w	sl, r0, r2
 80047cc:	eb61 0b03 	sbc.w	fp, r1, r3
 80047d0:	4650      	mov	r0, sl
 80047d2:	4659      	mov	r1, fp
 80047d4:	f7fc fb48 	bl	8000e68 <__aeabi_ul2f>
 80047d8:	4603      	mov	r3, r0
 80047da:	64bb      	str	r3, [r7, #72]	@ 0x48

		if (dt2 >= MOTOR1_TUNE_INTERVAL) {
 80047dc:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80047e0:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 80047e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ec:	f2c0 80ed 	blt.w	80049ca <SimulateMotors+0x402>
			old_time2 = current_time;
 80047f0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80047f4:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

			// Calculate the speed and error for motor1
			motor1_status.speed_calc = update_bldc_model1(duty_cycle1, dt1);
 80047f8:	4b89      	ldr	r3, [pc, #548]	@ (8004a20 <SimulateMotors+0x458>)
 80047fa:	ed93 8a00 	vldr	s16, [r3]
 80047fe:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8004800:	f7fc fba8 	bl	8000f54 <__aeabi_f2ulz>
 8004804:	4602      	mov	r2, r0
 8004806:	460b      	mov	r3, r1
 8004808:	4610      	mov	r0, r2
 800480a:	4619      	mov	r1, r3
 800480c:	eeb0 0a48 	vmov.f32	s0, s16
 8004810:	f000 fc48 	bl	80050a4 <update_bldc_model1>
 8004814:	ee07 0a90 	vmov	s15, r0
 8004818:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800481c:	4b75      	ldr	r3, [pc, #468]	@ (80049f4 <SimulateMotors+0x42c>)
 800481e:	edc3 7a01 	vstr	s15, [r3, #4]
			motor1_status.position += motor1_status.speed_calc * dt2;
 8004822:	4b74      	ldr	r3, [pc, #464]	@ (80049f4 <SimulateMotors+0x42c>)
 8004824:	ed93 7a02 	vldr	s14, [r3, #8]
 8004828:	4b72      	ldr	r3, [pc, #456]	@ (80049f4 <SimulateMotors+0x42c>)
 800482a:	edd3 6a01 	vldr	s13, [r3, #4]
 800482e:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8004832:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004836:	ee77 7a27 	vadd.f32	s15, s14, s15
 800483a:	4b6e      	ldr	r3, [pc, #440]	@ (80049f4 <SimulateMotors+0x42c>)
 800483c:	edc3 7a02 	vstr	s15, [r3, #8]

			// Calculate the speed and error for motor2
			motor2_status.speed_calc = update_bldc_model2(duty_cycle2, dt1);
 8004840:	4b78      	ldr	r3, [pc, #480]	@ (8004a24 <SimulateMotors+0x45c>)
 8004842:	ed93 8a00 	vldr	s16, [r3]
 8004846:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8004848:	f7fc fb84 	bl	8000f54 <__aeabi_f2ulz>
 800484c:	4602      	mov	r2, r0
 800484e:	460b      	mov	r3, r1
 8004850:	4610      	mov	r0, r2
 8004852:	4619      	mov	r1, r3
 8004854:	eeb0 0a48 	vmov.f32	s0, s16
 8004858:	f000 ff9c 	bl	8005794 <update_bldc_model2>
 800485c:	ee07 0a90 	vmov	s15, r0
 8004860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004864:	4b64      	ldr	r3, [pc, #400]	@ (80049f8 <SimulateMotors+0x430>)
 8004866:	edc3 7a01 	vstr	s15, [r3, #4]
			motor2_status.position += motor2_status.speed_calc * dt2;
 800486a:	4b63      	ldr	r3, [pc, #396]	@ (80049f8 <SimulateMotors+0x430>)
 800486c:	ed93 7a02 	vldr	s14, [r3, #8]
 8004870:	4b61      	ldr	r3, [pc, #388]	@ (80049f8 <SimulateMotors+0x430>)
 8004872:	edd3 6a01 	vldr	s13, [r3, #4]
 8004876:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800487a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800487e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004882:	4b5d      	ldr	r3, [pc, #372]	@ (80049f8 <SimulateMotors+0x430>)
 8004884:	edc3 7a02 	vstr	s15, [r3, #8]

			duty_correction1 = PID_Compute(&pid_sync, motor2_status.speed_calc,
 8004888:	4b5b      	ldr	r3, [pc, #364]	@ (80049f8 <SimulateMotors+0x430>)
 800488a:	edd3 7a01 	vldr	s15, [r3, #4]
 800488e:	4b59      	ldr	r3, [pc, #356]	@ (80049f4 <SimulateMotors+0x42c>)
 8004890:	ed93 7a01 	vldr	s14, [r3, #4]
 8004894:	edd7 1a13 	vldr	s3, [r7, #76]	@ 0x4c
 8004898:	ed9f 1a63 	vldr	s2, [pc, #396]	@ 8004a28 <SimulateMotors+0x460>
 800489c:	eef0 0a47 	vmov.f32	s1, s14
 80048a0:	eeb0 0a67 	vmov.f32	s0, s15
 80048a4:	485c      	ldr	r0, [pc, #368]	@ (8004a18 <SimulateMotors+0x450>)
 80048a6:	f000 f8fd 	bl	8004aa4 <PID_Compute>
 80048aa:	eef0 7a40 	vmov.f32	s15, s0
 80048ae:	4b5f      	ldr	r3, [pc, #380]	@ (8004a2c <SimulateMotors+0x464>)
 80048b0:	edc3 7a00 	vstr	s15, [r3]
					motor1_status.speed_calc, MAX_SPEED, dt2);
			duty_cycle1 = PID_Compute(&pid_motor1, motor1_status.speed_target,
 80048b4:	4b4f      	ldr	r3, [pc, #316]	@ (80049f4 <SimulateMotors+0x42c>)
 80048b6:	edd3 7a00 	vldr	s15, [r3]
 80048ba:	4b4e      	ldr	r3, [pc, #312]	@ (80049f4 <SimulateMotors+0x42c>)
 80048bc:	ed93 7a01 	vldr	s14, [r3, #4]
 80048c0:	edd7 1a13 	vldr	s3, [r7, #76]	@ 0x4c
 80048c4:	ed9f 1a58 	vldr	s2, [pc, #352]	@ 8004a28 <SimulateMotors+0x460>
 80048c8:	eef0 0a47 	vmov.f32	s1, s14
 80048cc:	eeb0 0a67 	vmov.f32	s0, s15
 80048d0:	484c      	ldr	r0, [pc, #304]	@ (8004a04 <SimulateMotors+0x43c>)
 80048d2:	f000 f8e7 	bl	8004aa4 <PID_Compute>
 80048d6:	eeb0 7a40 	vmov.f32	s14, s0
					motor1_status.speed_calc, MAX_SPEED, dt2)
					+ duty_correction1;
 80048da:	4b54      	ldr	r3, [pc, #336]	@ (8004a2c <SimulateMotors+0x464>)
 80048dc:	edd3 7a00 	vldr	s15, [r3]
 80048e0:	ee77 7a27 	vadd.f32	s15, s14, s15
			duty_cycle1 = PID_Compute(&pid_motor1, motor1_status.speed_target,
 80048e4:	4b4e      	ldr	r3, [pc, #312]	@ (8004a20 <SimulateMotors+0x458>)
 80048e6:	edc3 7a00 	vstr	s15, [r3]

			// Calculate motor1 duty
			if (dt3 >= MOTOR2_TUNE_INTERVAL) {
 80048ea:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80048ee:	eeb2 7a0e 	vmov.f32	s14, #46	@ 0x41700000  15.0
 80048f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048fa:	db4a      	blt.n	8004992 <SimulateMotors+0x3ca>
				old_time3 = current_time;
 80048fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004900:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68

				update_overshoot(&metrics, motor2_status.speed_calc,
 8004904:	4b3c      	ldr	r3, [pc, #240]	@ (80049f8 <SimulateMotors+0x430>)
 8004906:	edd3 7a01 	vldr	s15, [r3, #4]
 800490a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800490c:	ee07 3a10 	vmov	s14, r3
 8004910:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004914:	eef0 0a47 	vmov.f32	s1, s14
 8004918:	eeb0 0a67 	vmov.f32	s0, s15
 800491c:	483f      	ldr	r0, [pc, #252]	@ (8004a1c <SimulateMotors+0x454>)
 800491e:	f000 fa09 	bl	8004d34 <update_overshoot>
						target_speed);
				update_rise_time(&metrics, motor2_status.speed_calc,
 8004922:	4b35      	ldr	r3, [pc, #212]	@ (80049f8 <SimulateMotors+0x430>)
 8004924:	edd3 7a01 	vldr	s15, [r3, #4]
 8004928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492a:	ee07 3a10 	vmov	s14, r3
 800492e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004932:	ed97 1a19 	vldr	s2, [r7, #100]	@ 0x64
 8004936:	eef0 0a47 	vmov.f32	s1, s14
 800493a:	eeb0 0a67 	vmov.f32	s0, s15
 800493e:	4837      	ldr	r0, [pc, #220]	@ (8004a1c <SimulateMotors+0x454>)
 8004940:	f000 fa32 	bl	8004da8 <update_rise_time>
						target_speed, dt1);
				update_settling_time(&metrics, motor2_status.speed_calc,
 8004944:	4b2c      	ldr	r3, [pc, #176]	@ (80049f8 <SimulateMotors+0x430>)
 8004946:	edd3 7a01 	vldr	s15, [r3, #4]
 800494a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494c:	ee07 3a10 	vmov	s14, r3
 8004950:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004954:	ed97 1a19 	vldr	s2, [r7, #100]	@ 0x64
 8004958:	eef0 0a47 	vmov.f32	s1, s14
 800495c:	eeb0 0a67 	vmov.f32	s0, s15
 8004960:	482e      	ldr	r0, [pc, #184]	@ (8004a1c <SimulateMotors+0x454>)
 8004962:	f000 fa99 	bl	8004e98 <update_settling_time>
						target_speed, dt1);

				duty_cycle2 = PID_Compute(&pid_motor2,
 8004966:	4b24      	ldr	r3, [pc, #144]	@ (80049f8 <SimulateMotors+0x430>)
 8004968:	edd3 7a00 	vldr	s15, [r3]
 800496c:	4b22      	ldr	r3, [pc, #136]	@ (80049f8 <SimulateMotors+0x430>)
 800496e:	ed93 7a01 	vldr	s14, [r3, #4]
 8004972:	edd7 1a12 	vldr	s3, [r7, #72]	@ 0x48
 8004976:	ed9f 1a2c 	vldr	s2, [pc, #176]	@ 8004a28 <SimulateMotors+0x460>
 800497a:	eef0 0a47 	vmov.f32	s1, s14
 800497e:	eeb0 0a67 	vmov.f32	s0, s15
 8004982:	4822      	ldr	r0, [pc, #136]	@ (8004a0c <SimulateMotors+0x444>)
 8004984:	f000 f88e 	bl	8004aa4 <PID_Compute>
 8004988:	eef0 7a40 	vmov.f32	s15, s0
 800498c:	4b25      	ldr	r3, [pc, #148]	@ (8004a24 <SimulateMotors+0x45c>)
 800498e:	edc3 7a00 	vstr	s15, [r3]
			speed_diff_error_sum += fabs(pid_sync.error);
#else
			error_sum += fabs(pid_motor2.error);
#endif

			SetSpeed(duty_cycle1);
 8004992:	4b23      	ldr	r3, [pc, #140]	@ (8004a20 <SimulateMotors+0x458>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4618      	mov	r0, r3
 8004998:	f7fb fdfe 	bl	8000598 <__aeabi_f2d>
 800499c:	4602      	mov	r2, r0
 800499e:	460b      	mov	r3, r1
 80049a0:	ec43 2b10 	vmov	d0, r2, r3
 80049a4:	f000 f846 	bl	8004a34 <SetSpeed>
#if PRINT_ALL
			printf("%f %f %f %f \n", motor1_status.speed_target, motor1_status.speed_calc, motor2_status.speed_calc,
					motor2_status.speed_calc - motor1_status.speed_calc);
#else
			printf("%f \n",
					motor2_status.speed_calc - motor1_status.speed_calc);
 80049a8:	4b13      	ldr	r3, [pc, #76]	@ (80049f8 <SimulateMotors+0x430>)
 80049aa:	ed93 7a01 	vldr	s14, [r3, #4]
 80049ae:	4b11      	ldr	r3, [pc, #68]	@ (80049f4 <SimulateMotors+0x42c>)
 80049b0:	edd3 7a01 	vldr	s15, [r3, #4]
 80049b4:	ee77 7a67 	vsub.f32	s15, s14, s15
			printf("%f \n",
 80049b8:	ee17 0a90 	vmov	r0, s15
 80049bc:	f7fb fdec 	bl	8000598 <__aeabi_f2d>
 80049c0:	4602      	mov	r2, r0
 80049c2:	460b      	mov	r3, r1
 80049c4:	481a      	ldr	r0, [pc, #104]	@ (8004a30 <SimulateMotors+0x468>)
 80049c6:	f002 f94d 	bl	8006c64 <iprintf>
	while (dt1 < simulation_time) {
 80049ca:	6a3b      	ldr	r3, [r7, #32]
 80049cc:	ee07 3a90 	vmov	s15, r3
 80049d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049d4:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 80049d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80049dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049e0:	f53f aec9 	bmi.w	8004776 <SimulateMotors+0x1ae>
	pid_population[population_num].fitness = 1
			/ (1 + w1 * (metrics.rise_time >= MIN_RISE_TIME ? (metrics.rise_time - MIN_RISE_TIME) : 1e6)
					+ w2 * (metrics.settling_time >= MIN_SETTLING_TIME ? (metrics.settling_time - MIN_SETTLING_TIME) : 1e6)
					+ w3 * metrics.max_deviation + w4 * error_sum);
#endif
}
 80049e4:	bf00      	nop
 80049e6:	bf00      	nop
 80049e8:	3778      	adds	r7, #120	@ 0x78
 80049ea:	46bd      	mov	sp, r7
 80049ec:	ecbd 8b02 	vpop	{d8}
 80049f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049f4:	200002d4 	.word	0x200002d4
 80049f8:	200002e0 	.word	0x200002e0
 80049fc:	20000014 	.word	0x20000014
 8004a00:	00000000 	.word	0x00000000
 8004a04:	200002ec 	.word	0x200002ec
 8004a08:	20000030 	.word	0x20000030
 8004a0c:	20000310 	.word	0x20000310
 8004a10:	2000002c 	.word	0x2000002c
 8004a14:	20000020 	.word	0x20000020
 8004a18:	20000334 	.word	0x20000334
 8004a1c:	20000358 	.word	0x20000358
 8004a20:	20000c54 	.word	0x20000c54
 8004a24:	20000c58 	.word	0x20000c58
 8004a28:	454e4000 	.word	0x454e4000
 8004a2c:	20000c5c 	.word	0x20000c5c
 8004a30:	0800a8b4 	.word	0x0800a8b4

08004a34 <SetSpeed>:
// Verification of tuned parameter
void ExecuteCommand() {

}

void SetSpeed() {
 8004a34:	b480      	push	{r7}
 8004a36:	af00      	add	r7, sp, #0

}
 8004a38:	bf00      	nop
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <PID_Init>:

// Initialize PID
void PID_Init(PID_Controller *pid, PID_Coefficients pid_coeff,
		float FeedForward) {
 8004a42:	b480      	push	{r7}
 8004a44:	b087      	sub	sp, #28
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6178      	str	r0, [r7, #20]
 8004a4a:	eef0 6a40 	vmov.f32	s13, s0
 8004a4e:	eeb0 7a60 	vmov.f32	s14, s1
 8004a52:	eef0 7a41 	vmov.f32	s15, s2
 8004a56:	edc7 1a01 	vstr	s3, [r7, #4]
 8004a5a:	edc7 6a02 	vstr	s13, [r7, #8]
 8004a5e:	ed87 7a03 	vstr	s14, [r7, #12]
 8004a62:	edc7 7a04 	vstr	s15, [r7, #16]
	pid->kp = pid_coeff.Kp;
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	601a      	str	r2, [r3, #0]
	pid->ki = pid_coeff.Ki;
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	605a      	str	r2, [r3, #4]
	pid->kd = pid_coeff.Kd;
 8004a72:	693a      	ldr	r2, [r7, #16]
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	609a      	str	r2, [r3, #8]
	pid->prev_measured = 0.0f;
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	f04f 0200 	mov.w	r2, #0
 8004a7e:	60da      	str	r2, [r3, #12]
	pid->integral = FeedForward;
 8004a80:	697b      	ldr	r3, [r7, #20]
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	619a      	str	r2, [r3, #24]
	pid->filtered_deriv = 0.0f;
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f04f 0200 	mov.w	r2, #0
 8004a8c:	611a      	str	r2, [r3, #16]
	pid->error = 0.0f;
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	f04f 0200 	mov.w	r2, #0
 8004a94:	621a      	str	r2, [r3, #32]
}
 8004a96:	bf00      	nop
 8004a98:	371c      	adds	r7, #28
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
	...

08004aa4 <PID_Compute>:

// PID Compute
float PID_Compute(PID_Controller *pid, float setpoint, float measured,
		float max_value, float dt) {
 8004aa4:	b480      	push	{r7}
 8004aa6:	b08b      	sub	sp, #44	@ 0x2c
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6178      	str	r0, [r7, #20]
 8004aac:	ed87 0a04 	vstr	s0, [r7, #16]
 8004ab0:	edc7 0a03 	vstr	s1, [r7, #12]
 8004ab4:	ed87 1a02 	vstr	s2, [r7, #8]
 8004ab8:	edc7 1a01 	vstr	s3, [r7, #4]
	const float MAX_DERIVATIVE_OUTPUT = 0.5 * DUTY_MAX;
 8004abc:	4b67      	ldr	r3, [pc, #412]	@ (8004c5c <PID_Compute+0x1b8>)
 8004abe:	627b      	str	r3, [r7, #36]	@ 0x24
	const float MAX_INTEGRAL_OUTPUT = DUTY_MAX;
 8004ac0:	4b67      	ldr	r3, [pc, #412]	@ (8004c60 <PID_Compute+0x1bc>)
 8004ac2:	623b      	str	r3, [r7, #32]

	pid->error = (setpoint - measured) / max_value;
 8004ac4:	ed97 7a04 	vldr	s14, [r7, #16]
 8004ac8:	edd7 7a03 	vldr	s15, [r7, #12]
 8004acc:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004ad0:	ed97 7a02 	vldr	s14, [r7, #8]
 8004ad4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	edc3 7a08 	vstr	s15, [r3, #32]

	pid->proportional = pid->kp * pid->error * DUTY_MAX;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	ed93 7a00 	vldr	s14, [r3]
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	edd3 7a08 	vldr	s15, [r3, #32]
 8004aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aee:	ed9f 7a5d 	vldr	s14, [pc, #372]	@ 8004c64 <PID_Compute+0x1c0>
 8004af2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	edc3 7a05 	vstr	s15, [r3, #20]

	pid->integral += pid->ki * pid->error * (dt / 1000.0f) * DUTY_MAX;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	ed93 7a06 	vldr	s14, [r3, #24]
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	edd3 6a01 	vldr	s13, [r3, #4]
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	edd3 7a08 	vldr	s15, [r3, #32]
 8004b0e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8004b12:	ed97 6a01 	vldr	s12, [r7, #4]
 8004b16:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8004c68 <PID_Compute+0x1c4>
 8004b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004b22:	eddf 6a50 	vldr	s13, [pc, #320]	@ 8004c64 <PID_Compute+0x1c0>
 8004b26:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004b2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	edc3 7a06 	vstr	s15, [r3, #24]
	if (pid->integral > MAX_INTEGRAL_OUTPUT) {
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	edd3 7a06 	vldr	s15, [r3, #24]
 8004b3a:	ed97 7a08 	vldr	s14, [r7, #32]
 8004b3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b46:	d503      	bpl.n	8004b50 <PID_Compute+0xac>
		pid->integral = MAX_INTEGRAL_OUTPUT;
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	6a3a      	ldr	r2, [r7, #32]
 8004b4c:	619a      	str	r2, [r3, #24]
 8004b4e:	e012      	b.n	8004b76 <PID_Compute+0xd2>
	} else if (pid->integral < -MAX_INTEGRAL_OUTPUT) {
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	ed93 7a06 	vldr	s14, [r3, #24]
 8004b56:	edd7 7a08 	vldr	s15, [r7, #32]
 8004b5a:	eef1 7a67 	vneg.f32	s15, s15
 8004b5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b66:	d506      	bpl.n	8004b76 <PID_Compute+0xd2>
		pid->integral = -MAX_INTEGRAL_OUTPUT;
 8004b68:	edd7 7a08 	vldr	s15, [r7, #32]
 8004b6c:	eef1 7a67 	vneg.f32	s15, s15
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	edc3 7a06 	vstr	s15, [r3, #24]
	}

// Derivative filtering for noise reduction
	float raw_deriv = (measured - pid->prev_measured) / (dt / 1000.0f);
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	edd3 7a03 	vldr	s15, [r3, #12]
 8004b7c:	ed97 7a03 	vldr	s14, [r7, #12]
 8004b80:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004b84:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b88:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8004c68 <PID_Compute+0x1c4>
 8004b8c:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8004b90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b94:	edc7 7a07 	vstr	s15, [r7, #28]
	pid->filtered_deriv = 0.85f * pid->filtered_deriv + 0.15f * raw_deriv;
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	edd3 7a04 	vldr	s15, [r3, #16]
 8004b9e:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8004c6c <PID_Compute+0x1c8>
 8004ba2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004ba6:	edd7 7a07 	vldr	s15, [r7, #28]
 8004baa:	eddf 6a31 	vldr	s13, [pc, #196]	@ 8004c70 <PID_Compute+0x1cc>
 8004bae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004bb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	edc3 7a04 	vstr	s15, [r3, #16]
	pid->derivative = pid->kd * pid->filtered_deriv * DUTY_MAX / max_value;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	ed93 7a02 	vldr	s14, [r3, #8]
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	edd3 7a04 	vldr	s15, [r3, #16]
 8004bc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bcc:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8004c64 <PID_Compute+0x1c0>
 8004bd0:	ee67 6a87 	vmul.f32	s13, s15, s14
 8004bd4:	ed97 7a02 	vldr	s14, [r7, #8]
 8004bd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	edc3 7a07 	vstr	s15, [r3, #28]

// Apply hard limit to derivative output
	if (pid->derivative > MAX_DERIVATIVE_OUTPUT) {
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	edd3 7a07 	vldr	s15, [r3, #28]
 8004be8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8004bec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bf4:	d503      	bpl.n	8004bfe <PID_Compute+0x15a>
		pid->derivative = MAX_DERIVATIVE_OUTPUT;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bfa:	61da      	str	r2, [r3, #28]
 8004bfc:	e012      	b.n	8004c24 <PID_Compute+0x180>
	} else if (pid->derivative < -MAX_DERIVATIVE_OUTPUT) {
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	ed93 7a07 	vldr	s14, [r3, #28]
 8004c04:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004c08:	eef1 7a67 	vneg.f32	s15, s15
 8004c0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c14:	d506      	bpl.n	8004c24 <PID_Compute+0x180>
		pid->derivative = -MAX_DERIVATIVE_OUTPUT;
 8004c16:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004c1a:	eef1 7a67 	vneg.f32	s15, s15
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	edc3 7a07 	vstr	s15, [r3, #28]
	}

	float output = pid->proportional + pid->integral + pid->derivative;
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	ed93 7a05 	vldr	s14, [r3, #20]
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	edd3 7a06 	vldr	s15, [r3, #24]
 8004c30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	edd3 7a07 	vldr	s15, [r3, #28]
 8004c3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c3e:	edc7 7a06 	vstr	s15, [r7, #24]
	pid->prev_measured = measured;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	60da      	str	r2, [r3, #12]
	return output;
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	ee07 3a90 	vmov	s15, r3
}
 8004c4e:	eeb0 0a67 	vmov.f32	s0, s15
 8004c52:	372c      	adds	r7, #44	@ 0x2c
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	42480000 	.word	0x42480000
 8004c60:	42c80000 	.word	0x42c80000
 8004c64:	42c80000 	.word	0x42c80000
 8004c68:	447a0000 	.word	0x447a0000
 8004c6c:	3f59999a 	.word	0x3f59999a
 8004c70:	3e19999a 	.word	0x3e19999a

08004c74 <init_performance_metrics>:

// Initialize performance metrics
void init_performance_metrics(PerformanceMetrics *metrics, float initial_speed,
		float target_speed) {
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004c80:	edc7 0a01 	vstr	s1, [r7, #4]
	memset(metrics, 0, sizeof(PerformanceMetrics));
 8004c84:	2228      	movs	r2, #40	@ 0x28
 8004c86:	2100      	movs	r1, #0
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f002 f955 	bl	8006f38 <memset>
	metrics->initial_speed = initial_speed;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	619a      	str	r2, [r3, #24]
	metrics->error_span = fabs(target_speed - initial_speed);
 8004c94:	ed97 7a01 	vldr	s14, [r7, #4]
 8004c98:	edd7 7a02 	vldr	s15, [r7, #8]
 8004c9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ca0:	eef0 7ae7 	vabs.f32	s15, s15
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	edc3 7a07 	vstr	s15, [r3, #28]
	metrics->rise_low_bound = initial_speed
			+ 0.05f * metrics->error_span
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	edd3 7a07 	vldr	s15, [r3, #28]
 8004cb0:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8004d2c <init_performance_metrics+0xb8>
 8004cb4:	ee67 7a87 	vmul.f32	s15, s15, s14
					* (target_speed > initial_speed ? 1 : -1);
 8004cb8:	edd7 6a01 	vldr	s13, [r7, #4]
 8004cbc:	ed97 7a02 	vldr	s14, [r7, #8]
 8004cc0:	eef4 6ac7 	vcmpe.f32	s13, s14
 8004cc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cc8:	dd02      	ble.n	8004cd0 <init_performance_metrics+0x5c>
 8004cca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004cce:	e001      	b.n	8004cd4 <init_performance_metrics+0x60>
 8004cd0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004cd4:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ 0.05f * metrics->error_span
 8004cd8:	edd7 7a02 	vldr	s15, [r7, #8]
 8004cdc:	ee77 7a27 	vadd.f32	s15, s14, s15
	metrics->rise_low_bound = initial_speed
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	edc3 7a08 	vstr	s15, [r3, #32]
	metrics->rise_high_bound = initial_speed
			+ 0.95f * metrics->error_span
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	edd3 7a07 	vldr	s15, [r3, #28]
 8004cec:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8004d30 <init_performance_metrics+0xbc>
 8004cf0:	ee67 7a87 	vmul.f32	s15, s15, s14
					* (target_speed > initial_speed ? 1 : -1);
 8004cf4:	edd7 6a01 	vldr	s13, [r7, #4]
 8004cf8:	ed97 7a02 	vldr	s14, [r7, #8]
 8004cfc:	eef4 6ac7 	vcmpe.f32	s13, s14
 8004d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d04:	dd02      	ble.n	8004d0c <init_performance_metrics+0x98>
 8004d06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d0a:	e001      	b.n	8004d10 <init_performance_metrics+0x9c>
 8004d0c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004d10:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ 0.95f * metrics->error_span
 8004d14:	edd7 7a02 	vldr	s15, [r7, #8]
 8004d18:	ee77 7a27 	vadd.f32	s15, s14, s15
	metrics->rise_high_bound = initial_speed
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

}
 8004d22:	bf00      	nop
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	3d4ccccd 	.word	0x3d4ccccd
 8004d30:	3f733333 	.word	0x3f733333

08004d34 <update_overshoot>:

// Update overshoot/undershoot detection
void update_overshoot(PerformanceMetrics *metrics, float current_speed,
		float target_speed) {
 8004d34:	b480      	push	{r7}
 8004d36:	b087      	sub	sp, #28
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004d40:	edc7 0a01 	vstr	s1, [r7, #4]
	float current_deviation = 0;
 8004d44:	f04f 0300 	mov.w	r3, #0
 8004d48:	617b      	str	r3, [r7, #20]
	if (target_speed > metrics->initial_speed) {
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	edd3 7a06 	vldr	s15, [r3, #24]
 8004d50:	ed97 7a01 	vldr	s14, [r7, #4]
 8004d54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d5c:	dd08      	ble.n	8004d70 <update_overshoot+0x3c>
		current_deviation = current_speed - target_speed;
 8004d5e:	ed97 7a02 	vldr	s14, [r7, #8]
 8004d62:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d6a:	edc7 7a05 	vstr	s15, [r7, #20]
 8004d6e:	e007      	b.n	8004d80 <update_overshoot+0x4c>
	} else {
		current_deviation = target_speed - current_speed;
 8004d70:	ed97 7a01 	vldr	s14, [r7, #4]
 8004d74:	edd7 7a02 	vldr	s15, [r7, #8]
 8004d78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d7c:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	if (current_deviation > metrics->max_deviation) {
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	edd3 7a00 	vldr	s15, [r3]
 8004d86:	ed97 7a05 	vldr	s14, [r7, #20]
 8004d8a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d92:	dc00      	bgt.n	8004d96 <update_overshoot+0x62>
		metrics->max_deviation = current_deviation;
	}
}
 8004d94:	e002      	b.n	8004d9c <update_overshoot+0x68>
		metrics->max_deviation = current_deviation;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	601a      	str	r2, [r3, #0]
}
 8004d9c:	bf00      	nop
 8004d9e:	371c      	adds	r7, #28
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <update_rise_time>:

// Update rise time detection
void update_rise_time(PerformanceMetrics *metrics, float current_speed,
		float target_speed, float current_time) {
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	ed87 0a02 	vstr	s0, [r7, #8]
 8004db4:	edc7 0a01 	vstr	s1, [r7, #4]
 8004db8:	ed87 1a00 	vstr	s2, [r7]
	if (!metrics->rise_time) {
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d162      	bne.n	8004e8a <update_rise_time+0xe2>
		if ((target_speed > metrics->initial_speed
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	edd3 7a06 	vldr	s15, [r3, #24]
 8004dca:	ed97 7a01 	vldr	s14, [r7, #4]
 8004dce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dd6:	dd09      	ble.n	8004dec <update_rise_time+0x44>
				&& current_speed >= metrics->rise_high_bound)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004dde:	ed97 7a02 	vldr	s14, [r7, #8]
 8004de2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dea:	da13      	bge.n	8004e14 <update_rise_time+0x6c>
				|| (target_speed < metrics->initial_speed
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	edd3 7a06 	vldr	s15, [r3, #24]
 8004df2:	ed97 7a01 	vldr	s14, [r7, #4]
 8004df6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004dfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004dfe:	d516      	bpl.n	8004e2e <update_rise_time+0x86>
						&& current_speed <= metrics->rise_high_bound)) {
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004e06:	ed97 7a02 	vldr	s14, [r7, #8]
 8004e0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e12:	d80c      	bhi.n	8004e2e <update_rise_time+0x86>
			if (metrics->rise_threshold_crossed) {
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d036      	beq.n	8004e8a <update_rise_time+0xe2>
				metrics->rise_time = current_time;
 8004e1c:	edd7 7a00 	vldr	s15, [r7]
 8004e20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e24:	ee17 2a90 	vmov	r2, s15
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	609a      	str	r2, [r3, #8]
			if (metrics->rise_threshold_crossed) {
 8004e2c:	e02d      	b.n	8004e8a <update_rise_time+0xe2>
			}
		} else if ((target_speed > metrics->initial_speed
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	edd3 7a06 	vldr	s15, [r3, #24]
 8004e34:	ed97 7a01 	vldr	s14, [r7, #4]
 8004e38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e40:	dd09      	ble.n	8004e56 <update_rise_time+0xae>
				&& current_speed > metrics->rise_low_bound)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	edd3 7a08 	vldr	s15, [r3, #32]
 8004e48:	ed97 7a02 	vldr	s14, [r7, #8]
 8004e4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e54:	dc15      	bgt.n	8004e82 <update_rise_time+0xda>
				|| (target_speed < metrics->initial_speed
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	edd3 7a06 	vldr	s15, [r3, #24]
 8004e5c:	ed97 7a01 	vldr	s14, [r7, #4]
 8004e60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e68:	d400      	bmi.n	8004e6c <update_rise_time+0xc4>
						&& current_speed < metrics->rise_low_bound)) {
			metrics->rise_threshold_crossed = 1;
		}
	}
}
 8004e6a:	e00e      	b.n	8004e8a <update_rise_time+0xe2>
						&& current_speed < metrics->rise_low_bound)) {
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	edd3 7a08 	vldr	s15, [r3, #32]
 8004e72:	ed97 7a02 	vldr	s14, [r7, #8]
 8004e76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e7e:	d400      	bmi.n	8004e82 <update_rise_time+0xda>
}
 8004e80:	e003      	b.n	8004e8a <update_rise_time+0xe2>
			metrics->rise_threshold_crossed = 1;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2201      	movs	r2, #1
 8004e86:	605a      	str	r2, [r3, #4]
}
 8004e88:	e7ff      	b.n	8004e8a <update_rise_time+0xe2>
 8004e8a:	bf00      	nop
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
	...

08004e98 <update_settling_time>:

// Update settling time detection
void update_settling_time(PerformanceMetrics *metrics, float current_speed,
		float target_speed, float current_time) {
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	ed87 0a02 	vstr	s0, [r7, #8]
 8004ea4:	edc7 0a01 	vstr	s1, [r7, #4]
 8004ea8:	ed87 1a00 	vstr	s2, [r7]
	if (metrics->rise_time && !metrics->settling_time) {
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d04d      	beq.n	8004f50 <update_settling_time+0xb8>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	695b      	ldr	r3, [r3, #20]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d149      	bne.n	8004f50 <update_settling_time+0xb8>
		float tolerance = fmaxf(fabs(target_speed) * 0.02f, 0.5f);
 8004ebc:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ec0:	eef0 7ae7 	vabs.f32	s15, s15
 8004ec4:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8004f58 <update_settling_time+0xc0>
 8004ec8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ecc:	eef6 0a00 	vmov.f32	s1, #96	@ 0x3f000000  0.5
 8004ed0:	eeb0 0a67 	vmov.f32	s0, s15
 8004ed4:	f005 fbe2 	bl	800a69c <fmaxf>
 8004ed8:	ed87 0a05 	vstr	s0, [r7, #20]

		if (fabs(current_speed - target_speed) <= tolerance) {
 8004edc:	ed97 7a02 	vldr	s14, [r7, #8]
 8004ee0:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ee4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ee8:	eef0 7ae7 	vabs.f32	s15, s15
 8004eec:	ed97 7a05 	vldr	s14, [r7, #20]
 8004ef0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ef8:	db24      	blt.n	8004f44 <update_settling_time+0xac>
			if (!metrics->settling_start_flag) {
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d106      	bne.n	8004f10 <update_settling_time+0x78>
				metrics->settling_start_flag = 1;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2201      	movs	r2, #1
 8004f06:	60da      	str	r2, [r3, #12]
				metrics->consecutive_settled_count = 1;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	611a      	str	r2, [r3, #16]
 8004f0e:	e004      	b.n	8004f1a <update_settling_time+0x82>
			} else {
				metrics->consecutive_settled_count++;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	1c5a      	adds	r2, r3, #1
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	611a      	str	r2, [r3, #16]
			}

			if (metrics->consecutive_settled_count >= 3) {
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	dd16      	ble.n	8004f50 <update_settling_time+0xb8>
				metrics->settling_time = current_time - metrics->rise_time;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	ee07 3a90 	vmov	s15, r3
 8004f2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f2e:	ed97 7a00 	vldr	s14, [r7]
 8004f32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f3a:	ee17 2a90 	vmov	r2, s15
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	615a      	str	r2, [r3, #20]
		} else {
			metrics->settling_start_flag = 0;
			metrics->consecutive_settled_count = 0;
		}
	}
}
 8004f42:	e005      	b.n	8004f50 <update_settling_time+0xb8>
			metrics->settling_start_flag = 0;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2200      	movs	r2, #0
 8004f48:	60da      	str	r2, [r3, #12]
			metrics->consecutive_settled_count = 0;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	611a      	str	r2, [r3, #16]
}
 8004f50:	bf00      	nop
 8004f52:	3718      	adds	r7, #24
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	3ca3d70a 	.word	0x3ca3d70a
 8004f5c:	00000000 	.word	0x00000000

08004f60 <calculate_commutation1>:
		HAL_Delay(5);
	}
}

// Add this helper function
void calculate_commutation1(float theta_elec, float *c_a, float *c_b, float *c_c) {
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	ed87 0a03 	vstr	s0, [r7, #12]
 8004f6a:	60b8      	str	r0, [r7, #8]
 8004f6c:	6079      	str	r1, [r7, #4]
 8004f6e:	603a      	str	r2, [r7, #0]
	theta_elec = fmodf(theta_elec, 2 * M_PI);
 8004f70:	eddf 0a49 	vldr	s1, [pc, #292]	@ 8005098 <calculate_commutation1+0x138>
 8004f74:	ed97 0a03 	vldr	s0, [r7, #12]
 8004f78:	f005 fb22 	bl	800a5c0 <fmodf>
 8004f7c:	ed87 0a03 	vstr	s0, [r7, #12]
	int sector = (int) (theta_elec / (M_PI / 3)) % 6;
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f7fb fb09 	bl	8000598 <__aeabi_f2d>
 8004f86:	a342      	add	r3, pc, #264	@ (adr r3, 8005090 <calculate_commutation1+0x130>)
 8004f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8c:	f7fb fc86 	bl	800089c <__aeabi_ddiv>
 8004f90:	4602      	mov	r2, r0
 8004f92:	460b      	mov	r3, r1
 8004f94:	4610      	mov	r0, r2
 8004f96:	4619      	mov	r1, r3
 8004f98:	f7fb fe06 	bl	8000ba8 <__aeabi_d2iz>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	4b3f      	ldr	r3, [pc, #252]	@ (800509c <calculate_commutation1+0x13c>)
 8004fa0:	fb83 3102 	smull	r3, r1, r3, r2
 8004fa4:	17d3      	asrs	r3, r2, #31
 8004fa6:	1ac9      	subs	r1, r1, r3
 8004fa8:	460b      	mov	r3, r1
 8004faa:	005b      	lsls	r3, r3, #1
 8004fac:	440b      	add	r3, r1
 8004fae:	005b      	lsls	r3, r3, #1
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	617b      	str	r3, [r7, #20]
	switch (sector) {
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	2b05      	cmp	r3, #5
 8004fb8:	d856      	bhi.n	8005068 <calculate_commutation1+0x108>
 8004fba:	a201      	add	r2, pc, #4	@ (adr r2, 8004fc0 <calculate_commutation1+0x60>)
 8004fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc0:	08004fd9 	.word	0x08004fd9
 8004fc4:	08004ff1 	.word	0x08004ff1
 8004fc8:	08005009 	.word	0x08005009
 8004fcc:	08005021 	.word	0x08005021
 8004fd0:	08005039 	.word	0x08005039
 8004fd4:	08005051 	.word	0x08005051
	case 0:
		*c_a = 1;
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004fde:	601a      	str	r2, [r3, #0]
		*c_b = -1;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a2f      	ldr	r2, [pc, #188]	@ (80050a0 <calculate_commutation1+0x140>)
 8004fe4:	601a      	str	r2, [r3, #0]
		*c_c = 0;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	f04f 0200 	mov.w	r2, #0
 8004fec:	601a      	str	r2, [r3, #0]
		break;
 8004fee:	e048      	b.n	8005082 <calculate_commutation1+0x122>
	case 1:
		*c_a = 1;
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8004ff6:	601a      	str	r2, [r3, #0]
		*c_b = 0;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f04f 0200 	mov.w	r2, #0
 8004ffe:	601a      	str	r2, [r3, #0]
		*c_c = -1;
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	4a27      	ldr	r2, [pc, #156]	@ (80050a0 <calculate_commutation1+0x140>)
 8005004:	601a      	str	r2, [r3, #0]
		break;
 8005006:	e03c      	b.n	8005082 <calculate_commutation1+0x122>
	case 2:
		*c_a = 0;
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	f04f 0200 	mov.w	r2, #0
 800500e:	601a      	str	r2, [r3, #0]
		*c_b = 1;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005016:	601a      	str	r2, [r3, #0]
		*c_c = -1;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	4a21      	ldr	r2, [pc, #132]	@ (80050a0 <calculate_commutation1+0x140>)
 800501c:	601a      	str	r2, [r3, #0]
		break;
 800501e:	e030      	b.n	8005082 <calculate_commutation1+0x122>
	case 3:
		*c_a = -1;
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	4a1f      	ldr	r2, [pc, #124]	@ (80050a0 <calculate_commutation1+0x140>)
 8005024:	601a      	str	r2, [r3, #0]
		*c_b = 1;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800502c:	601a      	str	r2, [r3, #0]
		*c_c = 0;
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	f04f 0200 	mov.w	r2, #0
 8005034:	601a      	str	r2, [r3, #0]
		break;
 8005036:	e024      	b.n	8005082 <calculate_commutation1+0x122>
	case 4:
		*c_a = -1;
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	4a19      	ldr	r2, [pc, #100]	@ (80050a0 <calculate_commutation1+0x140>)
 800503c:	601a      	str	r2, [r3, #0]
		*c_b = 0;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f04f 0200 	mov.w	r2, #0
 8005044:	601a      	str	r2, [r3, #0]
		*c_c = 1;
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800504c:	601a      	str	r2, [r3, #0]
		break;
 800504e:	e018      	b.n	8005082 <calculate_commutation1+0x122>
	case 5:
		*c_a = 0;
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	f04f 0200 	mov.w	r2, #0
 8005056:	601a      	str	r2, [r3, #0]
		*c_b = -1;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a11      	ldr	r2, [pc, #68]	@ (80050a0 <calculate_commutation1+0x140>)
 800505c:	601a      	str	r2, [r3, #0]
		*c_c = 1;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005064:	601a      	str	r2, [r3, #0]
		break;
 8005066:	e00c      	b.n	8005082 <calculate_commutation1+0x122>
	default:
		*c_a = 0;
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	f04f 0200 	mov.w	r2, #0
 800506e:	601a      	str	r2, [r3, #0]
		*c_b = 0;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f04f 0200 	mov.w	r2, #0
 8005076:	601a      	str	r2, [r3, #0]
		*c_c = 0;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	f04f 0200 	mov.w	r2, #0
 800507e:	601a      	str	r2, [r3, #0]
		break;
 8005080:	bf00      	nop
	}
}
 8005082:	bf00      	nop
 8005084:	3718      	adds	r7, #24
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	f3af 8000 	nop.w
 8005090:	382d7365 	.word	0x382d7365
 8005094:	3ff0c152 	.word	0x3ff0c152
 8005098:	40c90fdb 	.word	0x40c90fdb
 800509c:	2aaaaaab 	.word	0x2aaaaaab
 80050a0:	bf800000 	.word	0xbf800000

080050a4 <update_bldc_model1>:

// Update motor model with new duty cycle
uint32_t update_bldc_model1(float duty, uint64_t timestamp) {
 80050a4:	b5b0      	push	{r4, r5, r7, lr}
 80050a6:	b09a      	sub	sp, #104	@ 0x68
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	ed87 0a03 	vstr	s0, [r7, #12]
 80050ae:	e9c7 0100 	strd	r0, r1, [r7]
// Calculate total time step in seconds
	float dt_total = (timestamp - motor_state.last_update) / 1000.0f;  // ms to seconds
 80050b2:	4b20      	ldr	r3, [pc, #128]	@ (8005134 <update_bldc_model1+0x90>)
 80050b4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80050b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80050bc:	1a84      	subs	r4, r0, r2
 80050be:	eb61 0503 	sbc.w	r5, r1, r3
 80050c2:	4620      	mov	r0, r4
 80050c4:	4629      	mov	r1, r5
 80050c6:	f7fb fecf 	bl	8000e68 <__aeabi_ul2f>
 80050ca:	ee06 0a90 	vmov	s13, r0
 80050ce:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8005138 <update_bldc_model1+0x94>
 80050d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80050d6:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
	motor_state.last_update = timestamp;
 80050da:	4916      	ldr	r1, [pc, #88]	@ (8005134 <update_bldc_model1+0x90>)
 80050dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050e0:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

// Convert duty cycle to DC bus voltage
	float v_dc = duty * SUPPLY_VOLTAGE / 100.0f;
 80050e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80050e8:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800513c <update_bldc_model1+0x98>
 80050ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80050f0:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8005140 <update_bldc_model1+0x9c>
 80050f4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80050f8:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

// Sub-stepping for stability
	const float max_sub_dt = 0.001f;  // 1ms max sub-step
 80050fc:	4b11      	ldr	r3, [pc, #68]	@ (8005144 <update_bldc_model1+0xa0>)
 80050fe:	653b      	str	r3, [r7, #80]	@ 0x50
	int steps = (int) (dt_total / max_sub_dt) + 1;
 8005100:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8005104:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8005108:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800510c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005110:	ee17 3a90 	vmov	r3, s15
 8005114:	3301      	adds	r3, #1
 8005116:	64fb      	str	r3, [r7, #76]	@ 0x4c
	float sub_dt = dt_total / steps;
 8005118:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800511a:	ee07 3a90 	vmov	s15, r3
 800511e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005122:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8005126:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800512a:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

	for (int i = 0; i < steps; i++) {
 800512e:	2300      	movs	r3, #0
 8005130:	667b      	str	r3, [r7, #100]	@ 0x64
 8005132:	e23a      	b.n	80055aa <update_bldc_model1+0x506>
 8005134:	20000c68 	.word	0x20000c68
 8005138:	447a0000 	.word	0x447a0000
 800513c:	42400000 	.word	0x42400000
 8005140:	42c80000 	.word	0x42c80000
 8005144:	3a83126f 	.word	0x3a83126f
		// Calculate electrical angle (radians)
		motor_state.elec.theta_elec = POLE_PAIRS * motor_state.mech.theta_mech;
 8005148:	4bd9      	ldr	r3, [pc, #868]	@ (80054b0 <update_bldc_model1+0x40c>)
 800514a:	edd3 7a07 	vldr	s15, [r3, #28]
 800514e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8005152:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005156:	4bd6      	ldr	r3, [pc, #856]	@ (80054b0 <update_bldc_model1+0x40c>)
 8005158:	edc3 7a00 	vstr	s15, [r3]
		motor_state.elec.theta_elec = fmodf(motor_state.elec.theta_elec, 2 * M_PI);
 800515c:	4bd4      	ldr	r3, [pc, #848]	@ (80054b0 <update_bldc_model1+0x40c>)
 800515e:	edd3 7a00 	vldr	s15, [r3]
 8005162:	eddf 0ad4 	vldr	s1, [pc, #848]	@ 80054b4 <update_bldc_model1+0x410>
 8005166:	eeb0 0a67 	vmov.f32	s0, s15
 800516a:	f005 fa29 	bl	800a5c0 <fmodf>
 800516e:	eef0 7a40 	vmov.f32	s15, s0
 8005172:	4bcf      	ldr	r3, [pc, #828]	@ (80054b0 <update_bldc_model1+0x40c>)
 8005174:	edc3 7a00 	vstr	s15, [r3]

		// Get commutation pattern
		float c_a, c_b, c_c;
		calculate_commutation1(motor_state.elec.theta_elec, &c_a, &c_b, &c_c);
 8005178:	4bcd      	ldr	r3, [pc, #820]	@ (80054b0 <update_bldc_model1+0x40c>)
 800517a:	edd3 7a00 	vldr	s15, [r3]
 800517e:	f107 0210 	add.w	r2, r7, #16
 8005182:	f107 0114 	add.w	r1, r7, #20
 8005186:	f107 0318 	add.w	r3, r7, #24
 800518a:	4618      	mov	r0, r3
 800518c:	eeb0 0a67 	vmov.f32	s0, s15
 8005190:	f7ff fee6 	bl	8004f60 <calculate_commutation1>

		// Field weakening calculation
		float omega_mech = motor_state.mech.omega;
 8005194:	4bc6      	ldr	r3, [pc, #792]	@ (80054b0 <update_bldc_model1+0x40c>)
 8005196:	6a1b      	ldr	r3, [r3, #32]
 8005198:	643b      	str	r3, [r7, #64]	@ 0x40
		float base_speed_rads = BASE_SPEED * 0.104719755f;
 800519a:	4bc7      	ldr	r3, [pc, #796]	@ (80054b8 <update_bldc_model1+0x414>)
 800519c:	63fb      	str	r3, [r7, #60]	@ 0x3c
		float fw_factor = 1.0f;
 800519e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80051a2:	663b      	str	r3, [r7, #96]	@ 0x60

		if (omega_mech > base_speed_rads) {
 80051a4:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80051a8:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80051ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051b4:	dd0d      	ble.n	80051d2 <update_bldc_model1+0x12e>
			fw_factor = fmaxf(MIN_FW_FACTOR, base_speed_rads / omega_mech);
 80051b6:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80051ba:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80051be:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80051c2:	eddf 0abe 	vldr	s1, [pc, #760]	@ 80054bc <update_bldc_model1+0x418>
 80051c6:	eeb0 0a66 	vmov.f32	s0, s13
 80051ca:	f005 fa67 	bl	800a69c <fmaxf>
 80051ce:	ed87 0a18 	vstr	s0, [r7, #96]	@ 0x60
		}

		// Calculate back-EMF with field weakening
		float e_a = BACK_EMF_CONST * omega_mech * c_a * fw_factor;
 80051d2:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80051d6:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 80054c0 <update_bldc_model1+0x41c>
 80051da:	ee27 7a87 	vmul.f32	s14, s15, s14
 80051de:	edd7 7a06 	vldr	s15, [r7, #24]
 80051e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051e6:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80051ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ee:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		float e_b = BACK_EMF_CONST * omega_mech * c_b * fw_factor;
 80051f2:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80051f6:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 80054c0 <update_bldc_model1+0x41c>
 80051fa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80051fe:	edd7 7a05 	vldr	s15, [r7, #20]
 8005202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005206:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 800520a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800520e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		float e_c = BACK_EMF_CONST * omega_mech * c_c * fw_factor;
 8005212:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8005216:	ed9f 7aaa 	vldr	s14, [pc, #680]	@ 80054c0 <update_bldc_model1+0x41c>
 800521a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800521e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005222:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005226:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 800522a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800522e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

		// Apply correct phase voltages (phase-to-neutral)
		motor_state.elec.v_a = c_a * (v_dc / 2.0f);
 8005232:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8005236:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800523a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800523e:	edd7 7a06 	vldr	s15, [r7, #24]
 8005242:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005246:	4b9a      	ldr	r3, [pc, #616]	@ (80054b0 <update_bldc_model1+0x40c>)
 8005248:	edc3 7a04 	vstr	s15, [r3, #16]
		motor_state.elec.v_b = c_b * (v_dc / 2.0f);
 800524c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8005250:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8005254:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005258:	edd7 7a05 	vldr	s15, [r7, #20]
 800525c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005260:	4b93      	ldr	r3, [pc, #588]	@ (80054b0 <update_bldc_model1+0x40c>)
 8005262:	edc3 7a05 	vstr	s15, [r3, #20]
		motor_state.elec.v_c = c_c * (v_dc / 2.0f);
 8005266:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800526a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800526e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005272:	edd7 7a04 	vldr	s15, [r7, #16]
 8005276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800527a:	4b8d      	ldr	r3, [pc, #564]	@ (80054b0 <update_bldc_model1+0x40c>)
 800527c:	edc3 7a06 	vstr	s15, [r3, #24]

		// Update phase currents with current limiting
		float effective_max_current = MAX_PHASE_CURRENT;
 8005280:	4b90      	ldr	r3, [pc, #576]	@ (80054c4 <update_bldc_model1+0x420>)
 8005282:	65fb      	str	r3, [r7, #92]	@ 0x5c
		if (fabsf(omega_mech) > 250.0f) {
 8005284:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8005288:	eef0 7ae7 	vabs.f32	s15, s15
 800528c:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 80054c8 <update_bldc_model1+0x424>
 8005290:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005298:	dd25      	ble.n	80052e6 <update_bldc_model1+0x242>
			float speed_ratio = (fabsf(omega_mech) - 250.0f) / 100.0f;
 800529a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800529e:	eef0 7ae7 	vabs.f32	s15, s15
 80052a2:	ed9f 7a89 	vldr	s14, [pc, #548]	@ 80054c8 <update_bldc_model1+0x424>
 80052a6:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80052aa:	eddf 6a88 	vldr	s13, [pc, #544]	@ 80054cc <update_bldc_model1+0x428>
 80052ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80052b2:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
			effective_max_current *= fmaxf(1.0f - speed_ratio * 0.05f, 0.7f);
 80052b6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80052ba:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 80054d0 <update_bldc_model1+0x42c>
 80052be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80052c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80052ca:	eddf 0a82 	vldr	s1, [pc, #520]	@ 80054d4 <update_bldc_model1+0x430>
 80052ce:	eeb0 0a67 	vmov.f32	s0, s15
 80052d2:	f005 f9e3 	bl	800a69c <fmaxf>
 80052d6:	eeb0 7a40 	vmov.f32	s14, s0
 80052da:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80052de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80052e2:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
		}

		// Update phase current
		motor_state.elec.i_a += (motor_state.elec.v_a - PHASE_RESISTANCE * motor_state.elec.i_a - e_a) / PHASE_INDUCTANCE
 80052e6:	4b72      	ldr	r3, [pc, #456]	@ (80054b0 <update_bldc_model1+0x40c>)
 80052e8:	ed93 7a01 	vldr	s14, [r3, #4]
 80052ec:	4b70      	ldr	r3, [pc, #448]	@ (80054b0 <update_bldc_model1+0x40c>)
 80052ee:	edd3 6a04 	vldr	s13, [r3, #16]
 80052f2:	4b6f      	ldr	r3, [pc, #444]	@ (80054b0 <update_bldc_model1+0x40c>)
 80052f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80052f8:	ed9f 6a77 	vldr	s12, [pc, #476]	@ 80054d8 <update_bldc_model1+0x434>
 80052fc:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005300:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005304:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8005308:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800530c:	ed9f 6a73 	vldr	s12, [pc, #460]	@ 80054dc <update_bldc_model1+0x438>
 8005310:	eec7 6a86 	vdiv.f32	s13, s15, s12
				* sub_dt;
 8005314:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8005318:	ee66 7aa7 	vmul.f32	s15, s13, s15
		motor_state.elec.i_a += (motor_state.elec.v_a - PHASE_RESISTANCE * motor_state.elec.i_a - e_a) / PHASE_INDUCTANCE
 800531c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005320:	4b63      	ldr	r3, [pc, #396]	@ (80054b0 <update_bldc_model1+0x40c>)
 8005322:	edc3 7a01 	vstr	s15, [r3, #4]
		motor_state.elec.i_b += (motor_state.elec.v_b - PHASE_RESISTANCE * motor_state.elec.i_b - e_b) / PHASE_INDUCTANCE
 8005326:	4b62      	ldr	r3, [pc, #392]	@ (80054b0 <update_bldc_model1+0x40c>)
 8005328:	ed93 7a02 	vldr	s14, [r3, #8]
 800532c:	4b60      	ldr	r3, [pc, #384]	@ (80054b0 <update_bldc_model1+0x40c>)
 800532e:	edd3 6a05 	vldr	s13, [r3, #20]
 8005332:	4b5f      	ldr	r3, [pc, #380]	@ (80054b0 <update_bldc_model1+0x40c>)
 8005334:	edd3 7a02 	vldr	s15, [r3, #8]
 8005338:	ed9f 6a67 	vldr	s12, [pc, #412]	@ 80054d8 <update_bldc_model1+0x434>
 800533c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005340:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005344:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8005348:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800534c:	ed9f 6a63 	vldr	s12, [pc, #396]	@ 80054dc <update_bldc_model1+0x438>
 8005350:	eec7 6a86 	vdiv.f32	s13, s15, s12
				* sub_dt;
 8005354:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8005358:	ee66 7aa7 	vmul.f32	s15, s13, s15
		motor_state.elec.i_b += (motor_state.elec.v_b - PHASE_RESISTANCE * motor_state.elec.i_b - e_b) / PHASE_INDUCTANCE
 800535c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005360:	4b53      	ldr	r3, [pc, #332]	@ (80054b0 <update_bldc_model1+0x40c>)
 8005362:	edc3 7a02 	vstr	s15, [r3, #8]
		motor_state.elec.i_c += (motor_state.elec.v_c - PHASE_RESISTANCE * motor_state.elec.i_c - e_c) / PHASE_INDUCTANCE
 8005366:	4b52      	ldr	r3, [pc, #328]	@ (80054b0 <update_bldc_model1+0x40c>)
 8005368:	ed93 7a03 	vldr	s14, [r3, #12]
 800536c:	4b50      	ldr	r3, [pc, #320]	@ (80054b0 <update_bldc_model1+0x40c>)
 800536e:	edd3 6a06 	vldr	s13, [r3, #24]
 8005372:	4b4f      	ldr	r3, [pc, #316]	@ (80054b0 <update_bldc_model1+0x40c>)
 8005374:	edd3 7a03 	vldr	s15, [r3, #12]
 8005378:	ed9f 6a57 	vldr	s12, [pc, #348]	@ 80054d8 <update_bldc_model1+0x434>
 800537c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005380:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005384:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8005388:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800538c:	ed9f 6a53 	vldr	s12, [pc, #332]	@ 80054dc <update_bldc_model1+0x438>
 8005390:	eec7 6a86 	vdiv.f32	s13, s15, s12
				* sub_dt;
 8005394:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8005398:	ee66 7aa7 	vmul.f32	s15, s13, s15
		motor_state.elec.i_c += (motor_state.elec.v_c - PHASE_RESISTANCE * motor_state.elec.i_c - e_c) / PHASE_INDUCTANCE
 800539c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80053a0:	4b43      	ldr	r3, [pc, #268]	@ (80054b0 <update_bldc_model1+0x40c>)
 80053a2:	edc3 7a03 	vstr	s15, [r3, #12]

		// Current limiting implementation
		motor_state.elec.i_a = fmaxf(fminf(motor_state.elec.i_a, effective_max_current), -effective_max_current);
 80053a6:	4b42      	ldr	r3, [pc, #264]	@ (80054b0 <update_bldc_model1+0x40c>)
 80053a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80053ac:	eef0 0a67 	vmov.f32	s1, s15
 80053b0:	ed97 0a17 	vldr	s0, [r7, #92]	@ 0x5c
 80053b4:	f005 f98f 	bl	800a6d6 <fminf>
 80053b8:	eeb0 7a40 	vmov.f32	s14, s0
 80053bc:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80053c0:	eef1 7a67 	vneg.f32	s15, s15
 80053c4:	eef0 0a67 	vmov.f32	s1, s15
 80053c8:	eeb0 0a47 	vmov.f32	s0, s14
 80053cc:	f005 f966 	bl	800a69c <fmaxf>
 80053d0:	eef0 7a40 	vmov.f32	s15, s0
 80053d4:	4b36      	ldr	r3, [pc, #216]	@ (80054b0 <update_bldc_model1+0x40c>)
 80053d6:	edc3 7a01 	vstr	s15, [r3, #4]
		motor_state.elec.i_b = fmaxf(fminf(motor_state.elec.i_b, effective_max_current), -effective_max_current);
 80053da:	4b35      	ldr	r3, [pc, #212]	@ (80054b0 <update_bldc_model1+0x40c>)
 80053dc:	edd3 7a02 	vldr	s15, [r3, #8]
 80053e0:	eef0 0a67 	vmov.f32	s1, s15
 80053e4:	ed97 0a17 	vldr	s0, [r7, #92]	@ 0x5c
 80053e8:	f005 f975 	bl	800a6d6 <fminf>
 80053ec:	eeb0 7a40 	vmov.f32	s14, s0
 80053f0:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80053f4:	eef1 7a67 	vneg.f32	s15, s15
 80053f8:	eef0 0a67 	vmov.f32	s1, s15
 80053fc:	eeb0 0a47 	vmov.f32	s0, s14
 8005400:	f005 f94c 	bl	800a69c <fmaxf>
 8005404:	eef0 7a40 	vmov.f32	s15, s0
 8005408:	4b29      	ldr	r3, [pc, #164]	@ (80054b0 <update_bldc_model1+0x40c>)
 800540a:	edc3 7a02 	vstr	s15, [r3, #8]
		motor_state.elec.i_c = fmaxf(fminf(motor_state.elec.i_c, effective_max_current), -effective_max_current);
 800540e:	4b28      	ldr	r3, [pc, #160]	@ (80054b0 <update_bldc_model1+0x40c>)
 8005410:	edd3 7a03 	vldr	s15, [r3, #12]
 8005414:	eef0 0a67 	vmov.f32	s1, s15
 8005418:	ed97 0a17 	vldr	s0, [r7, #92]	@ 0x5c
 800541c:	f005 f95b 	bl	800a6d6 <fminf>
 8005420:	eeb0 7a40 	vmov.f32	s14, s0
 8005424:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8005428:	eef1 7a67 	vneg.f32	s15, s15
 800542c:	eef0 0a67 	vmov.f32	s1, s15
 8005430:	eeb0 0a47 	vmov.f32	s0, s14
 8005434:	f005 f932 	bl	800a69c <fmaxf>
 8005438:	eef0 7a40 	vmov.f32	s15, s0
 800543c:	4b1c      	ldr	r3, [pc, #112]	@ (80054b0 <update_bldc_model1+0x40c>)
 800543e:	edc3 7a03 	vstr	s15, [r3, #12]

		// Torque calculation with field weakening
		motor_state.mech.torque = TORQUE_CONST * fw_factor
 8005442:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8005446:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80054c0 <update_bldc_model1+0x41c>
 800544a:	ee27 7a87 	vmul.f32	s14, s15, s14
				* (motor_state.elec.i_a * c_a + motor_state.elec.i_b * c_b + motor_state.elec.i_c * c_c);
 800544e:	4b18      	ldr	r3, [pc, #96]	@ (80054b0 <update_bldc_model1+0x40c>)
 8005450:	edd3 6a01 	vldr	s13, [r3, #4]
 8005454:	edd7 7a06 	vldr	s15, [r7, #24]
 8005458:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800545c:	4b14      	ldr	r3, [pc, #80]	@ (80054b0 <update_bldc_model1+0x40c>)
 800545e:	ed93 6a02 	vldr	s12, [r3, #8]
 8005462:	edd7 7a05 	vldr	s15, [r7, #20]
 8005466:	ee66 7a27 	vmul.f32	s15, s12, s15
 800546a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800546e:	4b10      	ldr	r3, [pc, #64]	@ (80054b0 <update_bldc_model1+0x40c>)
 8005470:	ed93 6a03 	vldr	s12, [r3, #12]
 8005474:	edd7 7a04 	vldr	s15, [r7, #16]
 8005478:	ee66 7a27 	vmul.f32	s15, s12, s15
 800547c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005480:	ee67 7a27 	vmul.f32	s15, s14, s15
		motor_state.mech.torque = TORQUE_CONST * fw_factor
 8005484:	4b0a      	ldr	r3, [pc, #40]	@ (80054b0 <update_bldc_model1+0x40c>)
 8005486:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Enhanced friction model
		float sign = (omega_mech > 0) ? 1.0f : ((omega_mech < 0) ? -1.0f : 0);
 800548a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800548e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005496:	dd02      	ble.n	800549e <update_bldc_model1+0x3fa>
 8005498:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800549c:	e028      	b.n	80054f0 <update_bldc_model1+0x44c>
 800549e:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80054a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80054a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054aa:	d51f      	bpl.n	80054ec <update_bldc_model1+0x448>
 80054ac:	4b0c      	ldr	r3, [pc, #48]	@ (80054e0 <update_bldc_model1+0x43c>)
 80054ae:	e01f      	b.n	80054f0 <update_bldc_model1+0x44c>
 80054b0:	20000c68 	.word	0x20000c68
 80054b4:	40c90fdb 	.word	0x40c90fdb
 80054b8:	43acc9a0 	.word	0x43acc9a0
 80054bc:	3f266666 	.word	0x3f266666
 80054c0:	3d8ded29 	.word	0x3d8ded29
 80054c4:	41a00000 	.word	0x41a00000
 80054c8:	437a0000 	.word	0x437a0000
 80054cc:	42c80000 	.word	0x42c80000
 80054d0:	3d4ccccd 	.word	0x3d4ccccd
 80054d4:	3f333333 	.word	0x3f333333
 80054d8:	3da3d70a 	.word	0x3da3d70a
 80054dc:	399d4952 	.word	0x399d4952
 80054e0:	bf800000 	.word	0xbf800000
 80054e4:	391d4952 	.word	0x391d4952
 80054e8:	3c23d70a 	.word	0x3c23d70a
 80054ec:	f04f 0300 	mov.w	r3, #0
 80054f0:	62bb      	str	r3, [r7, #40]	@ 0x28
		float friction_torque = VISCOUS_DAMPING * omega_mech + COULOMB_FRICTION * sign;
 80054f2:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80054f6:	ed1f 7a05 	vldr	s14, [pc, #-20]	@ 80054e4 <update_bldc_model1+0x440>
 80054fa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80054fe:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005502:	ed5f 6a07 	vldr	s13, [pc, #-28]	@ 80054e8 <update_bldc_model1+0x444>
 8005506:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800550a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800550e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

		// Update mechanical state
		float net_torque = motor_state.mech.torque - friction_torque;
 8005512:	4b33      	ldr	r3, [pc, #204]	@ (80055e0 <update_bldc_model1+0x53c>)
 8005514:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005518:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800551c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005520:	edc7 7a08 	vstr	s15, [r7, #32]

		float acceleration = net_torque / ROTOR_INERTIA;
 8005524:	ed97 7a08 	vldr	s14, [r7, #32]
 8005528:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 80055e4 <update_bldc_model1+0x540>
 800552c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005530:	edc7 7a07 	vstr	s15, [r7, #28]
		motor_state.mech.omega += acceleration * sub_dt;
 8005534:	4b2a      	ldr	r3, [pc, #168]	@ (80055e0 <update_bldc_model1+0x53c>)
 8005536:	ed93 7a08 	vldr	s14, [r3, #32]
 800553a:	edd7 6a07 	vldr	s13, [r7, #28]
 800553e:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8005542:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005546:	ee77 7a27 	vadd.f32	s15, s14, s15
 800554a:	4b25      	ldr	r3, [pc, #148]	@ (80055e0 <update_bldc_model1+0x53c>)
 800554c:	edc3 7a08 	vstr	s15, [r3, #32]

		// Prevent numerical instability at near-zero speeds
		if (fabsf(motor_state.mech.omega) < 0.5f && fabsf(net_torque) < 0.005f) {
 8005550:	4b23      	ldr	r3, [pc, #140]	@ (80055e0 <update_bldc_model1+0x53c>)
 8005552:	edd3 7a08 	vldr	s15, [r3, #32]
 8005556:	eef0 7ae7 	vabs.f32	s15, s15
 800555a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800555e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005566:	d50e      	bpl.n	8005586 <update_bldc_model1+0x4e2>
 8005568:	edd7 7a08 	vldr	s15, [r7, #32]
 800556c:	eef0 7ae7 	vabs.f32	s15, s15
 8005570:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80055e8 <update_bldc_model1+0x544>
 8005574:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800557c:	d503      	bpl.n	8005586 <update_bldc_model1+0x4e2>
			motor_state.mech.omega = 0;
 800557e:	4b18      	ldr	r3, [pc, #96]	@ (80055e0 <update_bldc_model1+0x53c>)
 8005580:	f04f 0200 	mov.w	r2, #0
 8005584:	621a      	str	r2, [r3, #32]
		}

		// Update rotor position
		motor_state.mech.theta_mech += motor_state.mech.omega * sub_dt;
 8005586:	4b16      	ldr	r3, [pc, #88]	@ (80055e0 <update_bldc_model1+0x53c>)
 8005588:	ed93 7a07 	vldr	s14, [r3, #28]
 800558c:	4b14      	ldr	r3, [pc, #80]	@ (80055e0 <update_bldc_model1+0x53c>)
 800558e:	edd3 6a08 	vldr	s13, [r3, #32]
 8005592:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8005596:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800559a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800559e:	4b10      	ldr	r3, [pc, #64]	@ (80055e0 <update_bldc_model1+0x53c>)
 80055a0:	edc3 7a07 	vstr	s15, [r3, #28]
	for (int i = 0; i < steps; i++) {
 80055a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80055a6:	3301      	adds	r3, #1
 80055a8:	667b      	str	r3, [r7, #100]	@ 0x64
 80055aa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80055ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055ae:	429a      	cmp	r2, r3
 80055b0:	f6ff adca 	blt.w	8005148 <update_bldc_model1+0xa4>
	}

// Convert to RPM with reasonable limits
	float rpm = fabsf(motor_state.mech.omega) * 9.5492968f;
 80055b4:	4b0a      	ldr	r3, [pc, #40]	@ (80055e0 <update_bldc_model1+0x53c>)
 80055b6:	edd3 7a08 	vldr	s15, [r3, #32]
 80055ba:	eef0 7ae7 	vabs.f32	s15, s15
 80055be:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80055ec <update_bldc_model1+0x548>
 80055c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80055c6:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
	return (uint32_t) rpm;
 80055ca:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80055ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055d2:	ee17 3a90 	vmov	r3, s15
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3768      	adds	r7, #104	@ 0x68
 80055da:	46bd      	mov	sp, r7
 80055dc:	bdb0      	pop	{r4, r5, r7, pc}
 80055de:	bf00      	nop
 80055e0:	20000c68 	.word	0x20000c68
 80055e4:	3afba882 	.word	0x3afba882
 80055e8:	3ba3d70a 	.word	0x3ba3d70a
 80055ec:	4118c9eb 	.word	0x4118c9eb

080055f0 <init_motor_state1>:

// Initialize motor state
void init_motor_state1(float initial_speed_rpm) {
 80055f0:	b5b0      	push	{r4, r5, r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	ed87 0a01 	vstr	s0, [r7, #4]
	memset(&motor_state, 0, sizeof(motor_state));
 80055fa:	2238      	movs	r2, #56	@ 0x38
 80055fc:	2100      	movs	r1, #0
 80055fe:	4812      	ldr	r0, [pc, #72]	@ (8005648 <init_motor_state1+0x58>)
 8005600:	f001 fc9a 	bl	8006f38 <memset>
	motor_state.mech.omega = initial_speed_rpm * 0.104719755f;
 8005604:	edd7 7a01 	vldr	s15, [r7, #4]
 8005608:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800564c <init_motor_state1+0x5c>
 800560c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005610:	4b0d      	ldr	r3, [pc, #52]	@ (8005648 <init_motor_state1+0x58>)
 8005612:	edc3 7a08 	vstr	s15, [r3, #32]
	motor_state.last_update = HAL_GetTick();  // Store milliseconds directly
 8005616:	f7fc f9b3 	bl	8001980 <HAL_GetTick>
 800561a:	4603      	mov	r3, r0
 800561c:	2200      	movs	r2, #0
 800561e:	461c      	mov	r4, r3
 8005620:	4615      	mov	r5, r2
 8005622:	4b09      	ldr	r3, [pc, #36]	@ (8005648 <init_motor_state1+0x58>)
 8005624:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
// Initialize currents to zero
	motor_state.elec.i_a = 0;
 8005628:	4b07      	ldr	r3, [pc, #28]	@ (8005648 <init_motor_state1+0x58>)
 800562a:	f04f 0200 	mov.w	r2, #0
 800562e:	605a      	str	r2, [r3, #4]
	motor_state.elec.i_b = 0;
 8005630:	4b05      	ldr	r3, [pc, #20]	@ (8005648 <init_motor_state1+0x58>)
 8005632:	f04f 0200 	mov.w	r2, #0
 8005636:	609a      	str	r2, [r3, #8]
	motor_state.elec.i_c = 0;
 8005638:	4b03      	ldr	r3, [pc, #12]	@ (8005648 <init_motor_state1+0x58>)
 800563a:	f04f 0200 	mov.w	r2, #0
 800563e:	60da      	str	r2, [r3, #12]
}
 8005640:	bf00      	nop
 8005642:	3708      	adds	r7, #8
 8005644:	46bd      	mov	sp, r7
 8005646:	bdb0      	pop	{r4, r5, r7, pc}
 8005648:	20000c68 	.word	0x20000c68
 800564c:	3dd67750 	.word	0x3dd67750

08005650 <calculate_commutation2>:
		HAL_Delay(15);
	}
}

// Add this helper function
void calculate_commutation2(float theta_elec, float *c_a, float *c_b, float *c_c) {
 8005650:	b580      	push	{r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af00      	add	r7, sp, #0
 8005656:	ed87 0a03 	vstr	s0, [r7, #12]
 800565a:	60b8      	str	r0, [r7, #8]
 800565c:	6079      	str	r1, [r7, #4]
 800565e:	603a      	str	r2, [r7, #0]
	theta_elec = fmodf(theta_elec, 2 * M_PI);
 8005660:	eddf 0a49 	vldr	s1, [pc, #292]	@ 8005788 <calculate_commutation2+0x138>
 8005664:	ed97 0a03 	vldr	s0, [r7, #12]
 8005668:	f004 ffaa 	bl	800a5c0 <fmodf>
 800566c:	ed87 0a03 	vstr	s0, [r7, #12]
	int sector = (int) (theta_elec / (M_PI / 3)) % 6;
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f7fa ff91 	bl	8000598 <__aeabi_f2d>
 8005676:	a342      	add	r3, pc, #264	@ (adr r3, 8005780 <calculate_commutation2+0x130>)
 8005678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567c:	f7fb f90e 	bl	800089c <__aeabi_ddiv>
 8005680:	4602      	mov	r2, r0
 8005682:	460b      	mov	r3, r1
 8005684:	4610      	mov	r0, r2
 8005686:	4619      	mov	r1, r3
 8005688:	f7fb fa8e 	bl	8000ba8 <__aeabi_d2iz>
 800568c:	4602      	mov	r2, r0
 800568e:	4b3f      	ldr	r3, [pc, #252]	@ (800578c <calculate_commutation2+0x13c>)
 8005690:	fb83 3102 	smull	r3, r1, r3, r2
 8005694:	17d3      	asrs	r3, r2, #31
 8005696:	1ac9      	subs	r1, r1, r3
 8005698:	460b      	mov	r3, r1
 800569a:	005b      	lsls	r3, r3, #1
 800569c:	440b      	add	r3, r1
 800569e:	005b      	lsls	r3, r3, #1
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	617b      	str	r3, [r7, #20]
	switch (sector) {
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	2b05      	cmp	r3, #5
 80056a8:	d856      	bhi.n	8005758 <calculate_commutation2+0x108>
 80056aa:	a201      	add	r2, pc, #4	@ (adr r2, 80056b0 <calculate_commutation2+0x60>)
 80056ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b0:	080056c9 	.word	0x080056c9
 80056b4:	080056e1 	.word	0x080056e1
 80056b8:	080056f9 	.word	0x080056f9
 80056bc:	08005711 	.word	0x08005711
 80056c0:	08005729 	.word	0x08005729
 80056c4:	08005741 	.word	0x08005741
	case 0:
		*c_a = 1;
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80056ce:	601a      	str	r2, [r3, #0]
		*c_b = -1;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a2f      	ldr	r2, [pc, #188]	@ (8005790 <calculate_commutation2+0x140>)
 80056d4:	601a      	str	r2, [r3, #0]
		*c_c = 0;
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	f04f 0200 	mov.w	r2, #0
 80056dc:	601a      	str	r2, [r3, #0]
		break;
 80056de:	e048      	b.n	8005772 <calculate_commutation2+0x122>
	case 1:
		*c_a = 1;
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80056e6:	601a      	str	r2, [r3, #0]
		*c_b = 0;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f04f 0200 	mov.w	r2, #0
 80056ee:	601a      	str	r2, [r3, #0]
		*c_c = -1;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	4a27      	ldr	r2, [pc, #156]	@ (8005790 <calculate_commutation2+0x140>)
 80056f4:	601a      	str	r2, [r3, #0]
		break;
 80056f6:	e03c      	b.n	8005772 <calculate_commutation2+0x122>
	case 2:
		*c_a = 0;
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	f04f 0200 	mov.w	r2, #0
 80056fe:	601a      	str	r2, [r3, #0]
		*c_b = 1;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005706:	601a      	str	r2, [r3, #0]
		*c_c = -1;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	4a21      	ldr	r2, [pc, #132]	@ (8005790 <calculate_commutation2+0x140>)
 800570c:	601a      	str	r2, [r3, #0]
		break;
 800570e:	e030      	b.n	8005772 <calculate_commutation2+0x122>
	case 3:
		*c_a = -1;
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	4a1f      	ldr	r2, [pc, #124]	@ (8005790 <calculate_commutation2+0x140>)
 8005714:	601a      	str	r2, [r3, #0]
		*c_b = 1;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800571c:	601a      	str	r2, [r3, #0]
		*c_c = 0;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	f04f 0200 	mov.w	r2, #0
 8005724:	601a      	str	r2, [r3, #0]
		break;
 8005726:	e024      	b.n	8005772 <calculate_commutation2+0x122>
	case 4:
		*c_a = -1;
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	4a19      	ldr	r2, [pc, #100]	@ (8005790 <calculate_commutation2+0x140>)
 800572c:	601a      	str	r2, [r3, #0]
		*c_b = 0;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f04f 0200 	mov.w	r2, #0
 8005734:	601a      	str	r2, [r3, #0]
		*c_c = 1;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800573c:	601a      	str	r2, [r3, #0]
		break;
 800573e:	e018      	b.n	8005772 <calculate_commutation2+0x122>
	case 5:
		*c_a = 0;
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	f04f 0200 	mov.w	r2, #0
 8005746:	601a      	str	r2, [r3, #0]
		*c_b = -1;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a11      	ldr	r2, [pc, #68]	@ (8005790 <calculate_commutation2+0x140>)
 800574c:	601a      	str	r2, [r3, #0]
		*c_c = 1;
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8005754:	601a      	str	r2, [r3, #0]
		break;
 8005756:	e00c      	b.n	8005772 <calculate_commutation2+0x122>
	default:
		*c_a = 0;
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	f04f 0200 	mov.w	r2, #0
 800575e:	601a      	str	r2, [r3, #0]
		*c_b = 0;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f04f 0200 	mov.w	r2, #0
 8005766:	601a      	str	r2, [r3, #0]
		*c_c = 0;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	f04f 0200 	mov.w	r2, #0
 800576e:	601a      	str	r2, [r3, #0]
		break;
 8005770:	bf00      	nop
	}
}
 8005772:	bf00      	nop
 8005774:	3718      	adds	r7, #24
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}
 800577a:	bf00      	nop
 800577c:	f3af 8000 	nop.w
 8005780:	382d7365 	.word	0x382d7365
 8005784:	3ff0c152 	.word	0x3ff0c152
 8005788:	40c90fdb 	.word	0x40c90fdb
 800578c:	2aaaaaab 	.word	0x2aaaaaab
 8005790:	bf800000 	.word	0xbf800000

08005794 <update_bldc_model2>:

// Update motor model with new duty cycle
uint32_t update_bldc_model2(float duty, uint64_t timestamp) {
 8005794:	b5b0      	push	{r4, r5, r7, lr}
 8005796:	b09a      	sub	sp, #104	@ 0x68
 8005798:	af00      	add	r7, sp, #0
 800579a:	ed87 0a03 	vstr	s0, [r7, #12]
 800579e:	e9c7 0100 	strd	r0, r1, [r7]
// Calculate total time step in seconds
	float dt_total = (timestamp - motor_state2.last_update) / 1000.0f;  // ms to seconds
 80057a2:	4b20      	ldr	r3, [pc, #128]	@ (8005824 <update_bldc_model2+0x90>)
 80057a4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80057a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80057ac:	1a84      	subs	r4, r0, r2
 80057ae:	eb61 0503 	sbc.w	r5, r1, r3
 80057b2:	4620      	mov	r0, r4
 80057b4:	4629      	mov	r1, r5
 80057b6:	f7fb fb57 	bl	8000e68 <__aeabi_ul2f>
 80057ba:	ee06 0a90 	vmov	s13, r0
 80057be:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8005828 <update_bldc_model2+0x94>
 80057c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057c6:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
	motor_state2.last_update = timestamp;
 80057ca:	4916      	ldr	r1, [pc, #88]	@ (8005824 <update_bldc_model2+0x90>)
 80057cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057d0:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28

// Convert duty cycle to DC bus voltage
	float v_dc = duty * SUPPLY_VOLTAGE2 / 100.0f;
 80057d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80057d8:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800582c <update_bldc_model2+0x98>
 80057dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80057e0:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8005830 <update_bldc_model2+0x9c>
 80057e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80057e8:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

// Sub-stepping for stability
	const float max_sub_dt = 0.001f;  // 1ms max sub-step
 80057ec:	4b11      	ldr	r3, [pc, #68]	@ (8005834 <update_bldc_model2+0xa0>)
 80057ee:	653b      	str	r3, [r7, #80]	@ 0x50
	int steps = (int) (dt_total / max_sub_dt) + 1;
 80057f0:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 80057f4:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80057f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005800:	ee17 3a90 	vmov	r3, s15
 8005804:	3301      	adds	r3, #1
 8005806:	64fb      	str	r3, [r7, #76]	@ 0x4c
	float sub_dt = dt_total / steps;
 8005808:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800580a:	ee07 3a90 	vmov	s15, r3
 800580e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005812:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 8005816:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800581a:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

	for (int i = 0; i < steps; i++) {
 800581e:	2300      	movs	r3, #0
 8005820:	667b      	str	r3, [r7, #100]	@ 0x64
 8005822:	e23a      	b.n	8005c9a <update_bldc_model2+0x506>
 8005824:	20000ca0 	.word	0x20000ca0
 8005828:	447a0000 	.word	0x447a0000
 800582c:	42400000 	.word	0x42400000
 8005830:	42c80000 	.word	0x42c80000
 8005834:	3a83126f 	.word	0x3a83126f
		// Calculate electrical angle (radians)
		motor_state2.elec.theta_elec = POLE_PAIRS2 * motor_state2.mech.theta_mech;
 8005838:	4bd9      	ldr	r3, [pc, #868]	@ (8005ba0 <update_bldc_model2+0x40c>)
 800583a:	edd3 7a07 	vldr	s15, [r3, #28]
 800583e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8005842:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005846:	4bd6      	ldr	r3, [pc, #856]	@ (8005ba0 <update_bldc_model2+0x40c>)
 8005848:	edc3 7a00 	vstr	s15, [r3]
		motor_state2.elec.theta_elec = fmodf(motor_state2.elec.theta_elec, 2 * M_PI);
 800584c:	4bd4      	ldr	r3, [pc, #848]	@ (8005ba0 <update_bldc_model2+0x40c>)
 800584e:	edd3 7a00 	vldr	s15, [r3]
 8005852:	eddf 0ad4 	vldr	s1, [pc, #848]	@ 8005ba4 <update_bldc_model2+0x410>
 8005856:	eeb0 0a67 	vmov.f32	s0, s15
 800585a:	f004 feb1 	bl	800a5c0 <fmodf>
 800585e:	eef0 7a40 	vmov.f32	s15, s0
 8005862:	4bcf      	ldr	r3, [pc, #828]	@ (8005ba0 <update_bldc_model2+0x40c>)
 8005864:	edc3 7a00 	vstr	s15, [r3]

		// Get commutation pattern
		float c_a, c_b, c_c;
		calculate_commutation2(motor_state2.elec.theta_elec, &c_a, &c_b, &c_c);
 8005868:	4bcd      	ldr	r3, [pc, #820]	@ (8005ba0 <update_bldc_model2+0x40c>)
 800586a:	edd3 7a00 	vldr	s15, [r3]
 800586e:	f107 0210 	add.w	r2, r7, #16
 8005872:	f107 0114 	add.w	r1, r7, #20
 8005876:	f107 0318 	add.w	r3, r7, #24
 800587a:	4618      	mov	r0, r3
 800587c:	eeb0 0a67 	vmov.f32	s0, s15
 8005880:	f7ff fee6 	bl	8005650 <calculate_commutation2>

		// Field weakening calculation
		float omega_mech = motor_state2.mech.omega;
 8005884:	4bc6      	ldr	r3, [pc, #792]	@ (8005ba0 <update_bldc_model2+0x40c>)
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	643b      	str	r3, [r7, #64]	@ 0x40
		float BASE_SPEED2_rads = BASE_SPEED2 * 0.104719755f;
 800588a:	4bc7      	ldr	r3, [pc, #796]	@ (8005ba8 <update_bldc_model2+0x414>)
 800588c:	63fb      	str	r3, [r7, #60]	@ 0x3c
		float fw_factor = 1.0f;
 800588e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8005892:	663b      	str	r3, [r7, #96]	@ 0x60

		if (omega_mech > BASE_SPEED2_rads) {
 8005894:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8005898:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800589c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80058a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058a4:	dd0d      	ble.n	80058c2 <update_bldc_model2+0x12e>
			fw_factor = fmaxf(MIN_FW_FACTOR2, BASE_SPEED2_rads / omega_mech);
 80058a6:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80058aa:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80058ae:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80058b2:	eddf 0abe 	vldr	s1, [pc, #760]	@ 8005bac <update_bldc_model2+0x418>
 80058b6:	eeb0 0a66 	vmov.f32	s0, s13
 80058ba:	f004 feef 	bl	800a69c <fmaxf>
 80058be:	ed87 0a18 	vstr	s0, [r7, #96]	@ 0x60
		}

		// Calculate back-EMF with field weakening
		float e_a = BACK_EMF_CONST2 * omega_mech * c_a * fw_factor;
 80058c2:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80058c6:	ed9f 7aba 	vldr	s14, [pc, #744]	@ 8005bb0 <update_bldc_model2+0x41c>
 80058ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80058ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80058d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058d6:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80058da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058de:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
		float e_b = BACK_EMF_CONST2 * omega_mech * c_b * fw_factor;
 80058e2:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80058e6:	ed9f 7ab2 	vldr	s14, [pc, #712]	@ 8005bb0 <update_bldc_model2+0x41c>
 80058ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80058ee:	edd7 7a05 	vldr	s15, [r7, #20]
 80058f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058f6:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80058fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058fe:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
		float e_c = BACK_EMF_CONST2 * omega_mech * c_c * fw_factor;
 8005902:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8005906:	ed9f 7aaa 	vldr	s14, [pc, #680]	@ 8005bb0 <update_bldc_model2+0x41c>
 800590a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800590e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005916:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 800591a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800591e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30

		// Apply correct phase voltages (phase-to-neutral)
		motor_state2.elec.v_a = c_a * (v_dc / 2.0f);
 8005922:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8005926:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800592a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800592e:	edd7 7a06 	vldr	s15, [r7, #24]
 8005932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005936:	4b9a      	ldr	r3, [pc, #616]	@ (8005ba0 <update_bldc_model2+0x40c>)
 8005938:	edc3 7a04 	vstr	s15, [r3, #16]
		motor_state2.elec.v_b = c_b * (v_dc / 2.0f);
 800593c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8005940:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8005944:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005948:	edd7 7a05 	vldr	s15, [r7, #20]
 800594c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005950:	4b93      	ldr	r3, [pc, #588]	@ (8005ba0 <update_bldc_model2+0x40c>)
 8005952:	edc3 7a05 	vstr	s15, [r3, #20]
		motor_state2.elec.v_c = c_c * (v_dc / 2.0f);
 8005956:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 800595a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800595e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005962:	edd7 7a04 	vldr	s15, [r7, #16]
 8005966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800596a:	4b8d      	ldr	r3, [pc, #564]	@ (8005ba0 <update_bldc_model2+0x40c>)
 800596c:	edc3 7a06 	vstr	s15, [r3, #24]

		// Update phase currents with current limiting
		float effective_max_current = MAX_PHASE_CURRENT2;
 8005970:	4b90      	ldr	r3, [pc, #576]	@ (8005bb4 <update_bldc_model2+0x420>)
 8005972:	65fb      	str	r3, [r7, #92]	@ 0x5c
		if (fabsf(omega_mech) > 250.0f) {
 8005974:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8005978:	eef0 7ae7 	vabs.f32	s15, s15
 800597c:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 8005bb8 <update_bldc_model2+0x424>
 8005980:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005988:	dd25      	ble.n	80059d6 <update_bldc_model2+0x242>
			float speed_ratio = (fabsf(omega_mech) - 250.0f) / 100.0f;
 800598a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800598e:	eef0 7ae7 	vabs.f32	s15, s15
 8005992:	ed9f 7a89 	vldr	s14, [pc, #548]	@ 8005bb8 <update_bldc_model2+0x424>
 8005996:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800599a:	eddf 6a88 	vldr	s13, [pc, #544]	@ 8005bbc <update_bldc_model2+0x428>
 800599e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80059a2:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
			effective_max_current *= fmaxf(1.0f - speed_ratio * 0.05f, 0.7f);
 80059a6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80059aa:	ed9f 7a85 	vldr	s14, [pc, #532]	@ 8005bc0 <update_bldc_model2+0x42c>
 80059ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80059b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80059ba:	eddf 0a82 	vldr	s1, [pc, #520]	@ 8005bc4 <update_bldc_model2+0x430>
 80059be:	eeb0 0a67 	vmov.f32	s0, s15
 80059c2:	f004 fe6b 	bl	800a69c <fmaxf>
 80059c6:	eeb0 7a40 	vmov.f32	s14, s0
 80059ca:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80059ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059d2:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
		}

		// Update phase current
		motor_state2.elec.i_a += (motor_state2.elec.v_a - PHASE_RESISTANCE2 * motor_state2.elec.i_a - e_a) / PHASE_INDUCTANCE2
 80059d6:	4b72      	ldr	r3, [pc, #456]	@ (8005ba0 <update_bldc_model2+0x40c>)
 80059d8:	ed93 7a01 	vldr	s14, [r3, #4]
 80059dc:	4b70      	ldr	r3, [pc, #448]	@ (8005ba0 <update_bldc_model2+0x40c>)
 80059de:	edd3 6a04 	vldr	s13, [r3, #16]
 80059e2:	4b6f      	ldr	r3, [pc, #444]	@ (8005ba0 <update_bldc_model2+0x40c>)
 80059e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80059e8:	ed9f 6a77 	vldr	s12, [pc, #476]	@ 8005bc8 <update_bldc_model2+0x434>
 80059ec:	ee67 7a86 	vmul.f32	s15, s15, s12
 80059f0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80059f4:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80059f8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80059fc:	ed9f 6a73 	vldr	s12, [pc, #460]	@ 8005bcc <update_bldc_model2+0x438>
 8005a00:	eec7 6a86 	vdiv.f32	s13, s15, s12
				* sub_dt;
 8005a04:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8005a08:	ee66 7aa7 	vmul.f32	s15, s13, s15
		motor_state2.elec.i_a += (motor_state2.elec.v_a - PHASE_RESISTANCE2 * motor_state2.elec.i_a - e_a) / PHASE_INDUCTANCE2
 8005a0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a10:	4b63      	ldr	r3, [pc, #396]	@ (8005ba0 <update_bldc_model2+0x40c>)
 8005a12:	edc3 7a01 	vstr	s15, [r3, #4]
		motor_state2.elec.i_b += (motor_state2.elec.v_b - PHASE_RESISTANCE2 * motor_state2.elec.i_b - e_b) / PHASE_INDUCTANCE2
 8005a16:	4b62      	ldr	r3, [pc, #392]	@ (8005ba0 <update_bldc_model2+0x40c>)
 8005a18:	ed93 7a02 	vldr	s14, [r3, #8]
 8005a1c:	4b60      	ldr	r3, [pc, #384]	@ (8005ba0 <update_bldc_model2+0x40c>)
 8005a1e:	edd3 6a05 	vldr	s13, [r3, #20]
 8005a22:	4b5f      	ldr	r3, [pc, #380]	@ (8005ba0 <update_bldc_model2+0x40c>)
 8005a24:	edd3 7a02 	vldr	s15, [r3, #8]
 8005a28:	ed9f 6a67 	vldr	s12, [pc, #412]	@ 8005bc8 <update_bldc_model2+0x434>
 8005a2c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005a30:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005a34:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8005a38:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005a3c:	ed9f 6a63 	vldr	s12, [pc, #396]	@ 8005bcc <update_bldc_model2+0x438>
 8005a40:	eec7 6a86 	vdiv.f32	s13, s15, s12
				* sub_dt;
 8005a44:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8005a48:	ee66 7aa7 	vmul.f32	s15, s13, s15
		motor_state2.elec.i_b += (motor_state2.elec.v_b - PHASE_RESISTANCE2 * motor_state2.elec.i_b - e_b) / PHASE_INDUCTANCE2
 8005a4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a50:	4b53      	ldr	r3, [pc, #332]	@ (8005ba0 <update_bldc_model2+0x40c>)
 8005a52:	edc3 7a02 	vstr	s15, [r3, #8]
		motor_state2.elec.i_c += (motor_state2.elec.v_c - PHASE_RESISTANCE2 * motor_state2.elec.i_c - e_c) / PHASE_INDUCTANCE2
 8005a56:	4b52      	ldr	r3, [pc, #328]	@ (8005ba0 <update_bldc_model2+0x40c>)
 8005a58:	ed93 7a03 	vldr	s14, [r3, #12]
 8005a5c:	4b50      	ldr	r3, [pc, #320]	@ (8005ba0 <update_bldc_model2+0x40c>)
 8005a5e:	edd3 6a06 	vldr	s13, [r3, #24]
 8005a62:	4b4f      	ldr	r3, [pc, #316]	@ (8005ba0 <update_bldc_model2+0x40c>)
 8005a64:	edd3 7a03 	vldr	s15, [r3, #12]
 8005a68:	ed9f 6a57 	vldr	s12, [pc, #348]	@ 8005bc8 <update_bldc_model2+0x434>
 8005a6c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005a70:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8005a74:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8005a78:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005a7c:	ed9f 6a53 	vldr	s12, [pc, #332]	@ 8005bcc <update_bldc_model2+0x438>
 8005a80:	eec7 6a86 	vdiv.f32	s13, s15, s12
				* sub_dt;
 8005a84:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8005a88:	ee66 7aa7 	vmul.f32	s15, s13, s15
		motor_state2.elec.i_c += (motor_state2.elec.v_c - PHASE_RESISTANCE2 * motor_state2.elec.i_c - e_c) / PHASE_INDUCTANCE2
 8005a8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a90:	4b43      	ldr	r3, [pc, #268]	@ (8005ba0 <update_bldc_model2+0x40c>)
 8005a92:	edc3 7a03 	vstr	s15, [r3, #12]

		// Current limiting implementation
		motor_state2.elec.i_a = fmaxf(fminf(motor_state2.elec.i_a, effective_max_current), -effective_max_current);
 8005a96:	4b42      	ldr	r3, [pc, #264]	@ (8005ba0 <update_bldc_model2+0x40c>)
 8005a98:	edd3 7a01 	vldr	s15, [r3, #4]
 8005a9c:	eef0 0a67 	vmov.f32	s1, s15
 8005aa0:	ed97 0a17 	vldr	s0, [r7, #92]	@ 0x5c
 8005aa4:	f004 fe17 	bl	800a6d6 <fminf>
 8005aa8:	eeb0 7a40 	vmov.f32	s14, s0
 8005aac:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8005ab0:	eef1 7a67 	vneg.f32	s15, s15
 8005ab4:	eef0 0a67 	vmov.f32	s1, s15
 8005ab8:	eeb0 0a47 	vmov.f32	s0, s14
 8005abc:	f004 fdee 	bl	800a69c <fmaxf>
 8005ac0:	eef0 7a40 	vmov.f32	s15, s0
 8005ac4:	4b36      	ldr	r3, [pc, #216]	@ (8005ba0 <update_bldc_model2+0x40c>)
 8005ac6:	edc3 7a01 	vstr	s15, [r3, #4]
		motor_state2.elec.i_b = fmaxf(fminf(motor_state2.elec.i_b, effective_max_current), -effective_max_current);
 8005aca:	4b35      	ldr	r3, [pc, #212]	@ (8005ba0 <update_bldc_model2+0x40c>)
 8005acc:	edd3 7a02 	vldr	s15, [r3, #8]
 8005ad0:	eef0 0a67 	vmov.f32	s1, s15
 8005ad4:	ed97 0a17 	vldr	s0, [r7, #92]	@ 0x5c
 8005ad8:	f004 fdfd 	bl	800a6d6 <fminf>
 8005adc:	eeb0 7a40 	vmov.f32	s14, s0
 8005ae0:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8005ae4:	eef1 7a67 	vneg.f32	s15, s15
 8005ae8:	eef0 0a67 	vmov.f32	s1, s15
 8005aec:	eeb0 0a47 	vmov.f32	s0, s14
 8005af0:	f004 fdd4 	bl	800a69c <fmaxf>
 8005af4:	eef0 7a40 	vmov.f32	s15, s0
 8005af8:	4b29      	ldr	r3, [pc, #164]	@ (8005ba0 <update_bldc_model2+0x40c>)
 8005afa:	edc3 7a02 	vstr	s15, [r3, #8]
		motor_state2.elec.i_c = fmaxf(fminf(motor_state2.elec.i_c, effective_max_current), -effective_max_current);
 8005afe:	4b28      	ldr	r3, [pc, #160]	@ (8005ba0 <update_bldc_model2+0x40c>)
 8005b00:	edd3 7a03 	vldr	s15, [r3, #12]
 8005b04:	eef0 0a67 	vmov.f32	s1, s15
 8005b08:	ed97 0a17 	vldr	s0, [r7, #92]	@ 0x5c
 8005b0c:	f004 fde3 	bl	800a6d6 <fminf>
 8005b10:	eeb0 7a40 	vmov.f32	s14, s0
 8005b14:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8005b18:	eef1 7a67 	vneg.f32	s15, s15
 8005b1c:	eef0 0a67 	vmov.f32	s1, s15
 8005b20:	eeb0 0a47 	vmov.f32	s0, s14
 8005b24:	f004 fdba 	bl	800a69c <fmaxf>
 8005b28:	eef0 7a40 	vmov.f32	s15, s0
 8005b2c:	4b1c      	ldr	r3, [pc, #112]	@ (8005ba0 <update_bldc_model2+0x40c>)
 8005b2e:	edc3 7a03 	vstr	s15, [r3, #12]

		// Torque calculation with field weakening
		motor_state2.mech.torque = TORQUE_CONST2 * fw_factor
 8005b32:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8005b36:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8005bb0 <update_bldc_model2+0x41c>
 8005b3a:	ee27 7a87 	vmul.f32	s14, s15, s14
				* (motor_state2.elec.i_a * c_a + motor_state2.elec.i_b * c_b + motor_state2.elec.i_c * c_c);
 8005b3e:	4b18      	ldr	r3, [pc, #96]	@ (8005ba0 <update_bldc_model2+0x40c>)
 8005b40:	edd3 6a01 	vldr	s13, [r3, #4]
 8005b44:	edd7 7a06 	vldr	s15, [r7, #24]
 8005b48:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8005b4c:	4b14      	ldr	r3, [pc, #80]	@ (8005ba0 <update_bldc_model2+0x40c>)
 8005b4e:	ed93 6a02 	vldr	s12, [r3, #8]
 8005b52:	edd7 7a05 	vldr	s15, [r7, #20]
 8005b56:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005b5a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8005b5e:	4b10      	ldr	r3, [pc, #64]	@ (8005ba0 <update_bldc_model2+0x40c>)
 8005b60:	ed93 6a03 	vldr	s12, [r3, #12]
 8005b64:	edd7 7a04 	vldr	s15, [r7, #16]
 8005b68:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005b6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b70:	ee67 7a27 	vmul.f32	s15, s14, s15
		motor_state2.mech.torque = TORQUE_CONST2 * fw_factor
 8005b74:	4b0a      	ldr	r3, [pc, #40]	@ (8005ba0 <update_bldc_model2+0x40c>)
 8005b76:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24

		// Enhanced friction model
		float sign = (omega_mech > 0) ? 1.0f : ((omega_mech < 0) ? -1.0f : 0);
 8005b7a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8005b7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b86:	dd02      	ble.n	8005b8e <update_bldc_model2+0x3fa>
 8005b88:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8005b8c:	e028      	b.n	8005be0 <update_bldc_model2+0x44c>
 8005b8e:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8005b92:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b9a:	d51f      	bpl.n	8005bdc <update_bldc_model2+0x448>
 8005b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8005bd0 <update_bldc_model2+0x43c>)
 8005b9e:	e01f      	b.n	8005be0 <update_bldc_model2+0x44c>
 8005ba0:	20000ca0 	.word	0x20000ca0
 8005ba4:	40c90fdb 	.word	0x40c90fdb
 8005ba8:	43acc9a0 	.word	0x43acc9a0
 8005bac:	3f266666 	.word	0x3f266666
 8005bb0:	3d810625 	.word	0x3d810625
 8005bb4:	41a00000 	.word	0x41a00000
 8005bb8:	437a0000 	.word	0x437a0000
 8005bbc:	42c80000 	.word	0x42c80000
 8005bc0:	3d4ccccd 	.word	0x3d4ccccd
 8005bc4:	3f333333 	.word	0x3f333333
 8005bc8:	3d96872b 	.word	0x3d96872b
 8005bcc:	399d4952 	.word	0x399d4952
 8005bd0:	bf800000 	.word	0xbf800000
 8005bd4:	391d4952 	.word	0x391d4952
 8005bd8:	3c23d70a 	.word	0x3c23d70a
 8005bdc:	f04f 0300 	mov.w	r3, #0
 8005be0:	62bb      	str	r3, [r7, #40]	@ 0x28
		float friction_torque = VISCOUS_DAMPING2 * omega_mech + COULOMB_FRICTION2 * sign;
 8005be2:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8005be6:	ed1f 7a05 	vldr	s14, [pc, #-20]	@ 8005bd4 <update_bldc_model2+0x440>
 8005bea:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005bee:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005bf2:	ed5f 6a07 	vldr	s13, [pc, #-28]	@ 8005bd8 <update_bldc_model2+0x444>
 8005bf6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005bfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005bfe:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

		// Update mechanical state
		float net_torque = motor_state2.mech.torque - friction_torque;
 8005c02:	4b33      	ldr	r3, [pc, #204]	@ (8005cd0 <update_bldc_model2+0x53c>)
 8005c04:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8005c08:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005c0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c10:	edc7 7a08 	vstr	s15, [r7, #32]

		float acceleration = net_torque / ROTOR_INERTIA2;
 8005c14:	ed97 7a08 	vldr	s14, [r7, #32]
 8005c18:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 8005cd4 <update_bldc_model2+0x540>
 8005c1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c20:	edc7 7a07 	vstr	s15, [r7, #28]
		motor_state2.mech.omega += acceleration * sub_dt;
 8005c24:	4b2a      	ldr	r3, [pc, #168]	@ (8005cd0 <update_bldc_model2+0x53c>)
 8005c26:	ed93 7a08 	vldr	s14, [r3, #32]
 8005c2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c2e:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8005c32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c3a:	4b25      	ldr	r3, [pc, #148]	@ (8005cd0 <update_bldc_model2+0x53c>)
 8005c3c:	edc3 7a08 	vstr	s15, [r3, #32]

		// Prevent numerical instability at near-zero speeds
		if (fabsf(motor_state2.mech.omega) < 0.5f && fabsf(net_torque) < 0.005f) {
 8005c40:	4b23      	ldr	r3, [pc, #140]	@ (8005cd0 <update_bldc_model2+0x53c>)
 8005c42:	edd3 7a08 	vldr	s15, [r3, #32]
 8005c46:	eef0 7ae7 	vabs.f32	s15, s15
 8005c4a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8005c4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c56:	d50e      	bpl.n	8005c76 <update_bldc_model2+0x4e2>
 8005c58:	edd7 7a08 	vldr	s15, [r7, #32]
 8005c5c:	eef0 7ae7 	vabs.f32	s15, s15
 8005c60:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8005cd8 <update_bldc_model2+0x544>
 8005c64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c6c:	d503      	bpl.n	8005c76 <update_bldc_model2+0x4e2>
			motor_state2.mech.omega = 0;
 8005c6e:	4b18      	ldr	r3, [pc, #96]	@ (8005cd0 <update_bldc_model2+0x53c>)
 8005c70:	f04f 0200 	mov.w	r2, #0
 8005c74:	621a      	str	r2, [r3, #32]
		}

		// Update rotor position
		motor_state2.mech.theta_mech += motor_state2.mech.omega * sub_dt;
 8005c76:	4b16      	ldr	r3, [pc, #88]	@ (8005cd0 <update_bldc_model2+0x53c>)
 8005c78:	ed93 7a07 	vldr	s14, [r3, #28]
 8005c7c:	4b14      	ldr	r3, [pc, #80]	@ (8005cd0 <update_bldc_model2+0x53c>)
 8005c7e:	edd3 6a08 	vldr	s13, [r3, #32]
 8005c82:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8005c86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c8e:	4b10      	ldr	r3, [pc, #64]	@ (8005cd0 <update_bldc_model2+0x53c>)
 8005c90:	edc3 7a07 	vstr	s15, [r3, #28]
	for (int i = 0; i < steps; i++) {
 8005c94:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c96:	3301      	adds	r3, #1
 8005c98:	667b      	str	r3, [r7, #100]	@ 0x64
 8005c9a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005c9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	f6ff adca 	blt.w	8005838 <update_bldc_model2+0xa4>
	}

// Convert to RPM with reasonable limits
	float rpm = fabsf(motor_state2.mech.omega) * 9.5492968f;
 8005ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8005cd0 <update_bldc_model2+0x53c>)
 8005ca6:	edd3 7a08 	vldr	s15, [r3, #32]
 8005caa:	eef0 7ae7 	vabs.f32	s15, s15
 8005cae:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8005cdc <update_bldc_model2+0x548>
 8005cb2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005cb6:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
	return (uint32_t) rpm;
 8005cba:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8005cbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cc2:	ee17 3a90 	vmov	r3, s15
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3768      	adds	r7, #104	@ 0x68
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bdb0      	pop	{r4, r5, r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	20000ca0 	.word	0x20000ca0
 8005cd4:	3afba882 	.word	0x3afba882
 8005cd8:	3ba3d70a 	.word	0x3ba3d70a
 8005cdc:	4118c9eb 	.word	0x4118c9eb

08005ce0 <init_motor_state2>:

// Initialize motor state
void init_motor_state2(float initial_speed_rpm) {
 8005ce0:	b5b0      	push	{r4, r5, r7, lr}
 8005ce2:	b082      	sub	sp, #8
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	ed87 0a01 	vstr	s0, [r7, #4]
	memset(&motor_state2, 0, sizeof(motor_state2));
 8005cea:	2238      	movs	r2, #56	@ 0x38
 8005cec:	2100      	movs	r1, #0
 8005cee:	4812      	ldr	r0, [pc, #72]	@ (8005d38 <init_motor_state2+0x58>)
 8005cf0:	f001 f922 	bl	8006f38 <memset>
	motor_state2.mech.omega = initial_speed_rpm * 0.104719755f;
 8005cf4:	edd7 7a01 	vldr	s15, [r7, #4]
 8005cf8:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8005d3c <init_motor_state2+0x5c>
 8005cfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005d00:	4b0d      	ldr	r3, [pc, #52]	@ (8005d38 <init_motor_state2+0x58>)
 8005d02:	edc3 7a08 	vstr	s15, [r3, #32]
	motor_state2.last_update = HAL_GetTick();  // Store milliseconds directly
 8005d06:	f7fb fe3b 	bl	8001980 <HAL_GetTick>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	461c      	mov	r4, r3
 8005d10:	4615      	mov	r5, r2
 8005d12:	4b09      	ldr	r3, [pc, #36]	@ (8005d38 <init_motor_state2+0x58>)
 8005d14:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
// Initialize currents to zero
	motor_state2.elec.i_a = 0;
 8005d18:	4b07      	ldr	r3, [pc, #28]	@ (8005d38 <init_motor_state2+0x58>)
 8005d1a:	f04f 0200 	mov.w	r2, #0
 8005d1e:	605a      	str	r2, [r3, #4]
	motor_state2.elec.i_b = 0;
 8005d20:	4b05      	ldr	r3, [pc, #20]	@ (8005d38 <init_motor_state2+0x58>)
 8005d22:	f04f 0200 	mov.w	r2, #0
 8005d26:	609a      	str	r2, [r3, #8]
	motor_state2.elec.i_c = 0;
 8005d28:	4b03      	ldr	r3, [pc, #12]	@ (8005d38 <init_motor_state2+0x58>)
 8005d2a:	f04f 0200 	mov.w	r2, #0
 8005d2e:	60da      	str	r2, [r3, #12]
}
 8005d30:	bf00      	nop
 8005d32:	3708      	adds	r7, #8
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bdb0      	pop	{r4, r5, r7, pc}
 8005d38:	20000ca0 	.word	0x20000ca0
 8005d3c:	3dd67750 	.word	0x3dd67750

08005d40 <srand>:
 8005d40:	b538      	push	{r3, r4, r5, lr}
 8005d42:	4b10      	ldr	r3, [pc, #64]	@ (8005d84 <srand+0x44>)
 8005d44:	681d      	ldr	r5, [r3, #0]
 8005d46:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005d48:	4604      	mov	r4, r0
 8005d4a:	b9b3      	cbnz	r3, 8005d7a <srand+0x3a>
 8005d4c:	2018      	movs	r0, #24
 8005d4e:	f002 f839 	bl	8007dc4 <malloc>
 8005d52:	4602      	mov	r2, r0
 8005d54:	6328      	str	r0, [r5, #48]	@ 0x30
 8005d56:	b920      	cbnz	r0, 8005d62 <srand+0x22>
 8005d58:	4b0b      	ldr	r3, [pc, #44]	@ (8005d88 <srand+0x48>)
 8005d5a:	480c      	ldr	r0, [pc, #48]	@ (8005d8c <srand+0x4c>)
 8005d5c:	2146      	movs	r1, #70	@ 0x46
 8005d5e:	f001 f971 	bl	8007044 <__assert_func>
 8005d62:	490b      	ldr	r1, [pc, #44]	@ (8005d90 <srand+0x50>)
 8005d64:	4b0b      	ldr	r3, [pc, #44]	@ (8005d94 <srand+0x54>)
 8005d66:	e9c0 1300 	strd	r1, r3, [r0]
 8005d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8005d98 <srand+0x58>)
 8005d6c:	6083      	str	r3, [r0, #8]
 8005d6e:	230b      	movs	r3, #11
 8005d70:	8183      	strh	r3, [r0, #12]
 8005d72:	2100      	movs	r1, #0
 8005d74:	2001      	movs	r0, #1
 8005d76:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005d7a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	611c      	str	r4, [r3, #16]
 8005d80:	615a      	str	r2, [r3, #20]
 8005d82:	bd38      	pop	{r3, r4, r5, pc}
 8005d84:	20000048 	.word	0x20000048
 8005d88:	0800a8ec 	.word	0x0800a8ec
 8005d8c:	0800a903 	.word	0x0800a903
 8005d90:	abcd330e 	.word	0xabcd330e
 8005d94:	e66d1234 	.word	0xe66d1234
 8005d98:	0005deec 	.word	0x0005deec

08005d9c <rand>:
 8005d9c:	4b16      	ldr	r3, [pc, #88]	@ (8005df8 <rand+0x5c>)
 8005d9e:	b510      	push	{r4, lr}
 8005da0:	681c      	ldr	r4, [r3, #0]
 8005da2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005da4:	b9b3      	cbnz	r3, 8005dd4 <rand+0x38>
 8005da6:	2018      	movs	r0, #24
 8005da8:	f002 f80c 	bl	8007dc4 <malloc>
 8005dac:	4602      	mov	r2, r0
 8005dae:	6320      	str	r0, [r4, #48]	@ 0x30
 8005db0:	b920      	cbnz	r0, 8005dbc <rand+0x20>
 8005db2:	4b12      	ldr	r3, [pc, #72]	@ (8005dfc <rand+0x60>)
 8005db4:	4812      	ldr	r0, [pc, #72]	@ (8005e00 <rand+0x64>)
 8005db6:	2152      	movs	r1, #82	@ 0x52
 8005db8:	f001 f944 	bl	8007044 <__assert_func>
 8005dbc:	4911      	ldr	r1, [pc, #68]	@ (8005e04 <rand+0x68>)
 8005dbe:	4b12      	ldr	r3, [pc, #72]	@ (8005e08 <rand+0x6c>)
 8005dc0:	e9c0 1300 	strd	r1, r3, [r0]
 8005dc4:	4b11      	ldr	r3, [pc, #68]	@ (8005e0c <rand+0x70>)
 8005dc6:	6083      	str	r3, [r0, #8]
 8005dc8:	230b      	movs	r3, #11
 8005dca:	8183      	strh	r3, [r0, #12]
 8005dcc:	2100      	movs	r1, #0
 8005dce:	2001      	movs	r0, #1
 8005dd0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8005dd4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005dd6:	480e      	ldr	r0, [pc, #56]	@ (8005e10 <rand+0x74>)
 8005dd8:	690b      	ldr	r3, [r1, #16]
 8005dda:	694c      	ldr	r4, [r1, #20]
 8005ddc:	4a0d      	ldr	r2, [pc, #52]	@ (8005e14 <rand+0x78>)
 8005dde:	4358      	muls	r0, r3
 8005de0:	fb02 0004 	mla	r0, r2, r4, r0
 8005de4:	fba3 3202 	umull	r3, r2, r3, r2
 8005de8:	3301      	adds	r3, #1
 8005dea:	eb40 0002 	adc.w	r0, r0, r2
 8005dee:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8005df2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005df6:	bd10      	pop	{r4, pc}
 8005df8:	20000048 	.word	0x20000048
 8005dfc:	0800a8ec 	.word	0x0800a8ec
 8005e00:	0800a903 	.word	0x0800a903
 8005e04:	abcd330e 	.word	0xabcd330e
 8005e08:	e66d1234 	.word	0xe66d1234
 8005e0c:	0005deec 	.word	0x0005deec
 8005e10:	5851f42d 	.word	0x5851f42d
 8005e14:	4c957f2d 	.word	0x4c957f2d

08005e18 <__cvt>:
 8005e18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e1c:	ec57 6b10 	vmov	r6, r7, d0
 8005e20:	2f00      	cmp	r7, #0
 8005e22:	460c      	mov	r4, r1
 8005e24:	4619      	mov	r1, r3
 8005e26:	463b      	mov	r3, r7
 8005e28:	bfbb      	ittet	lt
 8005e2a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005e2e:	461f      	movlt	r7, r3
 8005e30:	2300      	movge	r3, #0
 8005e32:	232d      	movlt	r3, #45	@ 0x2d
 8005e34:	700b      	strb	r3, [r1, #0]
 8005e36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e38:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005e3c:	4691      	mov	r9, r2
 8005e3e:	f023 0820 	bic.w	r8, r3, #32
 8005e42:	bfbc      	itt	lt
 8005e44:	4632      	movlt	r2, r6
 8005e46:	4616      	movlt	r6, r2
 8005e48:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005e4c:	d005      	beq.n	8005e5a <__cvt+0x42>
 8005e4e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005e52:	d100      	bne.n	8005e56 <__cvt+0x3e>
 8005e54:	3401      	adds	r4, #1
 8005e56:	2102      	movs	r1, #2
 8005e58:	e000      	b.n	8005e5c <__cvt+0x44>
 8005e5a:	2103      	movs	r1, #3
 8005e5c:	ab03      	add	r3, sp, #12
 8005e5e:	9301      	str	r3, [sp, #4]
 8005e60:	ab02      	add	r3, sp, #8
 8005e62:	9300      	str	r3, [sp, #0]
 8005e64:	ec47 6b10 	vmov	d0, r6, r7
 8005e68:	4653      	mov	r3, sl
 8005e6a:	4622      	mov	r2, r4
 8005e6c:	f001 f990 	bl	8007190 <_dtoa_r>
 8005e70:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005e74:	4605      	mov	r5, r0
 8005e76:	d119      	bne.n	8005eac <__cvt+0x94>
 8005e78:	f019 0f01 	tst.w	r9, #1
 8005e7c:	d00e      	beq.n	8005e9c <__cvt+0x84>
 8005e7e:	eb00 0904 	add.w	r9, r0, r4
 8005e82:	2200      	movs	r2, #0
 8005e84:	2300      	movs	r3, #0
 8005e86:	4630      	mov	r0, r6
 8005e88:	4639      	mov	r1, r7
 8005e8a:	f7fa fe45 	bl	8000b18 <__aeabi_dcmpeq>
 8005e8e:	b108      	cbz	r0, 8005e94 <__cvt+0x7c>
 8005e90:	f8cd 900c 	str.w	r9, [sp, #12]
 8005e94:	2230      	movs	r2, #48	@ 0x30
 8005e96:	9b03      	ldr	r3, [sp, #12]
 8005e98:	454b      	cmp	r3, r9
 8005e9a:	d31e      	bcc.n	8005eda <__cvt+0xc2>
 8005e9c:	9b03      	ldr	r3, [sp, #12]
 8005e9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005ea0:	1b5b      	subs	r3, r3, r5
 8005ea2:	4628      	mov	r0, r5
 8005ea4:	6013      	str	r3, [r2, #0]
 8005ea6:	b004      	add	sp, #16
 8005ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005eac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005eb0:	eb00 0904 	add.w	r9, r0, r4
 8005eb4:	d1e5      	bne.n	8005e82 <__cvt+0x6a>
 8005eb6:	7803      	ldrb	r3, [r0, #0]
 8005eb8:	2b30      	cmp	r3, #48	@ 0x30
 8005eba:	d10a      	bne.n	8005ed2 <__cvt+0xba>
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	4630      	mov	r0, r6
 8005ec2:	4639      	mov	r1, r7
 8005ec4:	f7fa fe28 	bl	8000b18 <__aeabi_dcmpeq>
 8005ec8:	b918      	cbnz	r0, 8005ed2 <__cvt+0xba>
 8005eca:	f1c4 0401 	rsb	r4, r4, #1
 8005ece:	f8ca 4000 	str.w	r4, [sl]
 8005ed2:	f8da 3000 	ldr.w	r3, [sl]
 8005ed6:	4499      	add	r9, r3
 8005ed8:	e7d3      	b.n	8005e82 <__cvt+0x6a>
 8005eda:	1c59      	adds	r1, r3, #1
 8005edc:	9103      	str	r1, [sp, #12]
 8005ede:	701a      	strb	r2, [r3, #0]
 8005ee0:	e7d9      	b.n	8005e96 <__cvt+0x7e>

08005ee2 <__exponent>:
 8005ee2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ee4:	2900      	cmp	r1, #0
 8005ee6:	bfba      	itte	lt
 8005ee8:	4249      	neglt	r1, r1
 8005eea:	232d      	movlt	r3, #45	@ 0x2d
 8005eec:	232b      	movge	r3, #43	@ 0x2b
 8005eee:	2909      	cmp	r1, #9
 8005ef0:	7002      	strb	r2, [r0, #0]
 8005ef2:	7043      	strb	r3, [r0, #1]
 8005ef4:	dd29      	ble.n	8005f4a <__exponent+0x68>
 8005ef6:	f10d 0307 	add.w	r3, sp, #7
 8005efa:	461d      	mov	r5, r3
 8005efc:	270a      	movs	r7, #10
 8005efe:	461a      	mov	r2, r3
 8005f00:	fbb1 f6f7 	udiv	r6, r1, r7
 8005f04:	fb07 1416 	mls	r4, r7, r6, r1
 8005f08:	3430      	adds	r4, #48	@ 0x30
 8005f0a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005f0e:	460c      	mov	r4, r1
 8005f10:	2c63      	cmp	r4, #99	@ 0x63
 8005f12:	f103 33ff 	add.w	r3, r3, #4294967295
 8005f16:	4631      	mov	r1, r6
 8005f18:	dcf1      	bgt.n	8005efe <__exponent+0x1c>
 8005f1a:	3130      	adds	r1, #48	@ 0x30
 8005f1c:	1e94      	subs	r4, r2, #2
 8005f1e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005f22:	1c41      	adds	r1, r0, #1
 8005f24:	4623      	mov	r3, r4
 8005f26:	42ab      	cmp	r3, r5
 8005f28:	d30a      	bcc.n	8005f40 <__exponent+0x5e>
 8005f2a:	f10d 0309 	add.w	r3, sp, #9
 8005f2e:	1a9b      	subs	r3, r3, r2
 8005f30:	42ac      	cmp	r4, r5
 8005f32:	bf88      	it	hi
 8005f34:	2300      	movhi	r3, #0
 8005f36:	3302      	adds	r3, #2
 8005f38:	4403      	add	r3, r0
 8005f3a:	1a18      	subs	r0, r3, r0
 8005f3c:	b003      	add	sp, #12
 8005f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f40:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005f44:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005f48:	e7ed      	b.n	8005f26 <__exponent+0x44>
 8005f4a:	2330      	movs	r3, #48	@ 0x30
 8005f4c:	3130      	adds	r1, #48	@ 0x30
 8005f4e:	7083      	strb	r3, [r0, #2]
 8005f50:	70c1      	strb	r1, [r0, #3]
 8005f52:	1d03      	adds	r3, r0, #4
 8005f54:	e7f1      	b.n	8005f3a <__exponent+0x58>
	...

08005f58 <_printf_float>:
 8005f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f5c:	b08d      	sub	sp, #52	@ 0x34
 8005f5e:	460c      	mov	r4, r1
 8005f60:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005f64:	4616      	mov	r6, r2
 8005f66:	461f      	mov	r7, r3
 8005f68:	4605      	mov	r5, r0
 8005f6a:	f000 ffed 	bl	8006f48 <_localeconv_r>
 8005f6e:	6803      	ldr	r3, [r0, #0]
 8005f70:	9304      	str	r3, [sp, #16]
 8005f72:	4618      	mov	r0, r3
 8005f74:	f7fa f9a4 	bl	80002c0 <strlen>
 8005f78:	2300      	movs	r3, #0
 8005f7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f7c:	f8d8 3000 	ldr.w	r3, [r8]
 8005f80:	9005      	str	r0, [sp, #20]
 8005f82:	3307      	adds	r3, #7
 8005f84:	f023 0307 	bic.w	r3, r3, #7
 8005f88:	f103 0208 	add.w	r2, r3, #8
 8005f8c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005f90:	f8d4 b000 	ldr.w	fp, [r4]
 8005f94:	f8c8 2000 	str.w	r2, [r8]
 8005f98:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f9c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005fa0:	9307      	str	r3, [sp, #28]
 8005fa2:	f8cd 8018 	str.w	r8, [sp, #24]
 8005fa6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005faa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fae:	4b9c      	ldr	r3, [pc, #624]	@ (8006220 <_printf_float+0x2c8>)
 8005fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8005fb4:	f7fa fde2 	bl	8000b7c <__aeabi_dcmpun>
 8005fb8:	bb70      	cbnz	r0, 8006018 <_printf_float+0xc0>
 8005fba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005fbe:	4b98      	ldr	r3, [pc, #608]	@ (8006220 <_printf_float+0x2c8>)
 8005fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8005fc4:	f7fa fdbc 	bl	8000b40 <__aeabi_dcmple>
 8005fc8:	bb30      	cbnz	r0, 8006018 <_printf_float+0xc0>
 8005fca:	2200      	movs	r2, #0
 8005fcc:	2300      	movs	r3, #0
 8005fce:	4640      	mov	r0, r8
 8005fd0:	4649      	mov	r1, r9
 8005fd2:	f7fa fdab 	bl	8000b2c <__aeabi_dcmplt>
 8005fd6:	b110      	cbz	r0, 8005fde <_printf_float+0x86>
 8005fd8:	232d      	movs	r3, #45	@ 0x2d
 8005fda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fde:	4a91      	ldr	r2, [pc, #580]	@ (8006224 <_printf_float+0x2cc>)
 8005fe0:	4b91      	ldr	r3, [pc, #580]	@ (8006228 <_printf_float+0x2d0>)
 8005fe2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005fe6:	bf8c      	ite	hi
 8005fe8:	4690      	movhi	r8, r2
 8005fea:	4698      	movls	r8, r3
 8005fec:	2303      	movs	r3, #3
 8005fee:	6123      	str	r3, [r4, #16]
 8005ff0:	f02b 0304 	bic.w	r3, fp, #4
 8005ff4:	6023      	str	r3, [r4, #0]
 8005ff6:	f04f 0900 	mov.w	r9, #0
 8005ffa:	9700      	str	r7, [sp, #0]
 8005ffc:	4633      	mov	r3, r6
 8005ffe:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006000:	4621      	mov	r1, r4
 8006002:	4628      	mov	r0, r5
 8006004:	f000 f9d2 	bl	80063ac <_printf_common>
 8006008:	3001      	adds	r0, #1
 800600a:	f040 808d 	bne.w	8006128 <_printf_float+0x1d0>
 800600e:	f04f 30ff 	mov.w	r0, #4294967295
 8006012:	b00d      	add	sp, #52	@ 0x34
 8006014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006018:	4642      	mov	r2, r8
 800601a:	464b      	mov	r3, r9
 800601c:	4640      	mov	r0, r8
 800601e:	4649      	mov	r1, r9
 8006020:	f7fa fdac 	bl	8000b7c <__aeabi_dcmpun>
 8006024:	b140      	cbz	r0, 8006038 <_printf_float+0xe0>
 8006026:	464b      	mov	r3, r9
 8006028:	2b00      	cmp	r3, #0
 800602a:	bfbc      	itt	lt
 800602c:	232d      	movlt	r3, #45	@ 0x2d
 800602e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006032:	4a7e      	ldr	r2, [pc, #504]	@ (800622c <_printf_float+0x2d4>)
 8006034:	4b7e      	ldr	r3, [pc, #504]	@ (8006230 <_printf_float+0x2d8>)
 8006036:	e7d4      	b.n	8005fe2 <_printf_float+0x8a>
 8006038:	6863      	ldr	r3, [r4, #4]
 800603a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800603e:	9206      	str	r2, [sp, #24]
 8006040:	1c5a      	adds	r2, r3, #1
 8006042:	d13b      	bne.n	80060bc <_printf_float+0x164>
 8006044:	2306      	movs	r3, #6
 8006046:	6063      	str	r3, [r4, #4]
 8006048:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800604c:	2300      	movs	r3, #0
 800604e:	6022      	str	r2, [r4, #0]
 8006050:	9303      	str	r3, [sp, #12]
 8006052:	ab0a      	add	r3, sp, #40	@ 0x28
 8006054:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006058:	ab09      	add	r3, sp, #36	@ 0x24
 800605a:	9300      	str	r3, [sp, #0]
 800605c:	6861      	ldr	r1, [r4, #4]
 800605e:	ec49 8b10 	vmov	d0, r8, r9
 8006062:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006066:	4628      	mov	r0, r5
 8006068:	f7ff fed6 	bl	8005e18 <__cvt>
 800606c:	9b06      	ldr	r3, [sp, #24]
 800606e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006070:	2b47      	cmp	r3, #71	@ 0x47
 8006072:	4680      	mov	r8, r0
 8006074:	d129      	bne.n	80060ca <_printf_float+0x172>
 8006076:	1cc8      	adds	r0, r1, #3
 8006078:	db02      	blt.n	8006080 <_printf_float+0x128>
 800607a:	6863      	ldr	r3, [r4, #4]
 800607c:	4299      	cmp	r1, r3
 800607e:	dd41      	ble.n	8006104 <_printf_float+0x1ac>
 8006080:	f1aa 0a02 	sub.w	sl, sl, #2
 8006084:	fa5f fa8a 	uxtb.w	sl, sl
 8006088:	3901      	subs	r1, #1
 800608a:	4652      	mov	r2, sl
 800608c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006090:	9109      	str	r1, [sp, #36]	@ 0x24
 8006092:	f7ff ff26 	bl	8005ee2 <__exponent>
 8006096:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006098:	1813      	adds	r3, r2, r0
 800609a:	2a01      	cmp	r2, #1
 800609c:	4681      	mov	r9, r0
 800609e:	6123      	str	r3, [r4, #16]
 80060a0:	dc02      	bgt.n	80060a8 <_printf_float+0x150>
 80060a2:	6822      	ldr	r2, [r4, #0]
 80060a4:	07d2      	lsls	r2, r2, #31
 80060a6:	d501      	bpl.n	80060ac <_printf_float+0x154>
 80060a8:	3301      	adds	r3, #1
 80060aa:	6123      	str	r3, [r4, #16]
 80060ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d0a2      	beq.n	8005ffa <_printf_float+0xa2>
 80060b4:	232d      	movs	r3, #45	@ 0x2d
 80060b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060ba:	e79e      	b.n	8005ffa <_printf_float+0xa2>
 80060bc:	9a06      	ldr	r2, [sp, #24]
 80060be:	2a47      	cmp	r2, #71	@ 0x47
 80060c0:	d1c2      	bne.n	8006048 <_printf_float+0xf0>
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1c0      	bne.n	8006048 <_printf_float+0xf0>
 80060c6:	2301      	movs	r3, #1
 80060c8:	e7bd      	b.n	8006046 <_printf_float+0xee>
 80060ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80060ce:	d9db      	bls.n	8006088 <_printf_float+0x130>
 80060d0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80060d4:	d118      	bne.n	8006108 <_printf_float+0x1b0>
 80060d6:	2900      	cmp	r1, #0
 80060d8:	6863      	ldr	r3, [r4, #4]
 80060da:	dd0b      	ble.n	80060f4 <_printf_float+0x19c>
 80060dc:	6121      	str	r1, [r4, #16]
 80060de:	b913      	cbnz	r3, 80060e6 <_printf_float+0x18e>
 80060e0:	6822      	ldr	r2, [r4, #0]
 80060e2:	07d0      	lsls	r0, r2, #31
 80060e4:	d502      	bpl.n	80060ec <_printf_float+0x194>
 80060e6:	3301      	adds	r3, #1
 80060e8:	440b      	add	r3, r1
 80060ea:	6123      	str	r3, [r4, #16]
 80060ec:	65a1      	str	r1, [r4, #88]	@ 0x58
 80060ee:	f04f 0900 	mov.w	r9, #0
 80060f2:	e7db      	b.n	80060ac <_printf_float+0x154>
 80060f4:	b913      	cbnz	r3, 80060fc <_printf_float+0x1a4>
 80060f6:	6822      	ldr	r2, [r4, #0]
 80060f8:	07d2      	lsls	r2, r2, #31
 80060fa:	d501      	bpl.n	8006100 <_printf_float+0x1a8>
 80060fc:	3302      	adds	r3, #2
 80060fe:	e7f4      	b.n	80060ea <_printf_float+0x192>
 8006100:	2301      	movs	r3, #1
 8006102:	e7f2      	b.n	80060ea <_printf_float+0x192>
 8006104:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006108:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800610a:	4299      	cmp	r1, r3
 800610c:	db05      	blt.n	800611a <_printf_float+0x1c2>
 800610e:	6823      	ldr	r3, [r4, #0]
 8006110:	6121      	str	r1, [r4, #16]
 8006112:	07d8      	lsls	r0, r3, #31
 8006114:	d5ea      	bpl.n	80060ec <_printf_float+0x194>
 8006116:	1c4b      	adds	r3, r1, #1
 8006118:	e7e7      	b.n	80060ea <_printf_float+0x192>
 800611a:	2900      	cmp	r1, #0
 800611c:	bfd4      	ite	le
 800611e:	f1c1 0202 	rsble	r2, r1, #2
 8006122:	2201      	movgt	r2, #1
 8006124:	4413      	add	r3, r2
 8006126:	e7e0      	b.n	80060ea <_printf_float+0x192>
 8006128:	6823      	ldr	r3, [r4, #0]
 800612a:	055a      	lsls	r2, r3, #21
 800612c:	d407      	bmi.n	800613e <_printf_float+0x1e6>
 800612e:	6923      	ldr	r3, [r4, #16]
 8006130:	4642      	mov	r2, r8
 8006132:	4631      	mov	r1, r6
 8006134:	4628      	mov	r0, r5
 8006136:	47b8      	blx	r7
 8006138:	3001      	adds	r0, #1
 800613a:	d12b      	bne.n	8006194 <_printf_float+0x23c>
 800613c:	e767      	b.n	800600e <_printf_float+0xb6>
 800613e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006142:	f240 80dd 	bls.w	8006300 <_printf_float+0x3a8>
 8006146:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800614a:	2200      	movs	r2, #0
 800614c:	2300      	movs	r3, #0
 800614e:	f7fa fce3 	bl	8000b18 <__aeabi_dcmpeq>
 8006152:	2800      	cmp	r0, #0
 8006154:	d033      	beq.n	80061be <_printf_float+0x266>
 8006156:	4a37      	ldr	r2, [pc, #220]	@ (8006234 <_printf_float+0x2dc>)
 8006158:	2301      	movs	r3, #1
 800615a:	4631      	mov	r1, r6
 800615c:	4628      	mov	r0, r5
 800615e:	47b8      	blx	r7
 8006160:	3001      	adds	r0, #1
 8006162:	f43f af54 	beq.w	800600e <_printf_float+0xb6>
 8006166:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800616a:	4543      	cmp	r3, r8
 800616c:	db02      	blt.n	8006174 <_printf_float+0x21c>
 800616e:	6823      	ldr	r3, [r4, #0]
 8006170:	07d8      	lsls	r0, r3, #31
 8006172:	d50f      	bpl.n	8006194 <_printf_float+0x23c>
 8006174:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006178:	4631      	mov	r1, r6
 800617a:	4628      	mov	r0, r5
 800617c:	47b8      	blx	r7
 800617e:	3001      	adds	r0, #1
 8006180:	f43f af45 	beq.w	800600e <_printf_float+0xb6>
 8006184:	f04f 0900 	mov.w	r9, #0
 8006188:	f108 38ff 	add.w	r8, r8, #4294967295
 800618c:	f104 0a1a 	add.w	sl, r4, #26
 8006190:	45c8      	cmp	r8, r9
 8006192:	dc09      	bgt.n	80061a8 <_printf_float+0x250>
 8006194:	6823      	ldr	r3, [r4, #0]
 8006196:	079b      	lsls	r3, r3, #30
 8006198:	f100 8103 	bmi.w	80063a2 <_printf_float+0x44a>
 800619c:	68e0      	ldr	r0, [r4, #12]
 800619e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80061a0:	4298      	cmp	r0, r3
 80061a2:	bfb8      	it	lt
 80061a4:	4618      	movlt	r0, r3
 80061a6:	e734      	b.n	8006012 <_printf_float+0xba>
 80061a8:	2301      	movs	r3, #1
 80061aa:	4652      	mov	r2, sl
 80061ac:	4631      	mov	r1, r6
 80061ae:	4628      	mov	r0, r5
 80061b0:	47b8      	blx	r7
 80061b2:	3001      	adds	r0, #1
 80061b4:	f43f af2b 	beq.w	800600e <_printf_float+0xb6>
 80061b8:	f109 0901 	add.w	r9, r9, #1
 80061bc:	e7e8      	b.n	8006190 <_printf_float+0x238>
 80061be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	dc39      	bgt.n	8006238 <_printf_float+0x2e0>
 80061c4:	4a1b      	ldr	r2, [pc, #108]	@ (8006234 <_printf_float+0x2dc>)
 80061c6:	2301      	movs	r3, #1
 80061c8:	4631      	mov	r1, r6
 80061ca:	4628      	mov	r0, r5
 80061cc:	47b8      	blx	r7
 80061ce:	3001      	adds	r0, #1
 80061d0:	f43f af1d 	beq.w	800600e <_printf_float+0xb6>
 80061d4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80061d8:	ea59 0303 	orrs.w	r3, r9, r3
 80061dc:	d102      	bne.n	80061e4 <_printf_float+0x28c>
 80061de:	6823      	ldr	r3, [r4, #0]
 80061e0:	07d9      	lsls	r1, r3, #31
 80061e2:	d5d7      	bpl.n	8006194 <_printf_float+0x23c>
 80061e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061e8:	4631      	mov	r1, r6
 80061ea:	4628      	mov	r0, r5
 80061ec:	47b8      	blx	r7
 80061ee:	3001      	adds	r0, #1
 80061f0:	f43f af0d 	beq.w	800600e <_printf_float+0xb6>
 80061f4:	f04f 0a00 	mov.w	sl, #0
 80061f8:	f104 0b1a 	add.w	fp, r4, #26
 80061fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061fe:	425b      	negs	r3, r3
 8006200:	4553      	cmp	r3, sl
 8006202:	dc01      	bgt.n	8006208 <_printf_float+0x2b0>
 8006204:	464b      	mov	r3, r9
 8006206:	e793      	b.n	8006130 <_printf_float+0x1d8>
 8006208:	2301      	movs	r3, #1
 800620a:	465a      	mov	r2, fp
 800620c:	4631      	mov	r1, r6
 800620e:	4628      	mov	r0, r5
 8006210:	47b8      	blx	r7
 8006212:	3001      	adds	r0, #1
 8006214:	f43f aefb 	beq.w	800600e <_printf_float+0xb6>
 8006218:	f10a 0a01 	add.w	sl, sl, #1
 800621c:	e7ee      	b.n	80061fc <_printf_float+0x2a4>
 800621e:	bf00      	nop
 8006220:	7fefffff 	.word	0x7fefffff
 8006224:	0800a95f 	.word	0x0800a95f
 8006228:	0800a95b 	.word	0x0800a95b
 800622c:	0800a967 	.word	0x0800a967
 8006230:	0800a963 	.word	0x0800a963
 8006234:	0800a96b 	.word	0x0800a96b
 8006238:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800623a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800623e:	4553      	cmp	r3, sl
 8006240:	bfa8      	it	ge
 8006242:	4653      	movge	r3, sl
 8006244:	2b00      	cmp	r3, #0
 8006246:	4699      	mov	r9, r3
 8006248:	dc36      	bgt.n	80062b8 <_printf_float+0x360>
 800624a:	f04f 0b00 	mov.w	fp, #0
 800624e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006252:	f104 021a 	add.w	r2, r4, #26
 8006256:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006258:	9306      	str	r3, [sp, #24]
 800625a:	eba3 0309 	sub.w	r3, r3, r9
 800625e:	455b      	cmp	r3, fp
 8006260:	dc31      	bgt.n	80062c6 <_printf_float+0x36e>
 8006262:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006264:	459a      	cmp	sl, r3
 8006266:	dc3a      	bgt.n	80062de <_printf_float+0x386>
 8006268:	6823      	ldr	r3, [r4, #0]
 800626a:	07da      	lsls	r2, r3, #31
 800626c:	d437      	bmi.n	80062de <_printf_float+0x386>
 800626e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006270:	ebaa 0903 	sub.w	r9, sl, r3
 8006274:	9b06      	ldr	r3, [sp, #24]
 8006276:	ebaa 0303 	sub.w	r3, sl, r3
 800627a:	4599      	cmp	r9, r3
 800627c:	bfa8      	it	ge
 800627e:	4699      	movge	r9, r3
 8006280:	f1b9 0f00 	cmp.w	r9, #0
 8006284:	dc33      	bgt.n	80062ee <_printf_float+0x396>
 8006286:	f04f 0800 	mov.w	r8, #0
 800628a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800628e:	f104 0b1a 	add.w	fp, r4, #26
 8006292:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006294:	ebaa 0303 	sub.w	r3, sl, r3
 8006298:	eba3 0309 	sub.w	r3, r3, r9
 800629c:	4543      	cmp	r3, r8
 800629e:	f77f af79 	ble.w	8006194 <_printf_float+0x23c>
 80062a2:	2301      	movs	r3, #1
 80062a4:	465a      	mov	r2, fp
 80062a6:	4631      	mov	r1, r6
 80062a8:	4628      	mov	r0, r5
 80062aa:	47b8      	blx	r7
 80062ac:	3001      	adds	r0, #1
 80062ae:	f43f aeae 	beq.w	800600e <_printf_float+0xb6>
 80062b2:	f108 0801 	add.w	r8, r8, #1
 80062b6:	e7ec      	b.n	8006292 <_printf_float+0x33a>
 80062b8:	4642      	mov	r2, r8
 80062ba:	4631      	mov	r1, r6
 80062bc:	4628      	mov	r0, r5
 80062be:	47b8      	blx	r7
 80062c0:	3001      	adds	r0, #1
 80062c2:	d1c2      	bne.n	800624a <_printf_float+0x2f2>
 80062c4:	e6a3      	b.n	800600e <_printf_float+0xb6>
 80062c6:	2301      	movs	r3, #1
 80062c8:	4631      	mov	r1, r6
 80062ca:	4628      	mov	r0, r5
 80062cc:	9206      	str	r2, [sp, #24]
 80062ce:	47b8      	blx	r7
 80062d0:	3001      	adds	r0, #1
 80062d2:	f43f ae9c 	beq.w	800600e <_printf_float+0xb6>
 80062d6:	9a06      	ldr	r2, [sp, #24]
 80062d8:	f10b 0b01 	add.w	fp, fp, #1
 80062dc:	e7bb      	b.n	8006256 <_printf_float+0x2fe>
 80062de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062e2:	4631      	mov	r1, r6
 80062e4:	4628      	mov	r0, r5
 80062e6:	47b8      	blx	r7
 80062e8:	3001      	adds	r0, #1
 80062ea:	d1c0      	bne.n	800626e <_printf_float+0x316>
 80062ec:	e68f      	b.n	800600e <_printf_float+0xb6>
 80062ee:	9a06      	ldr	r2, [sp, #24]
 80062f0:	464b      	mov	r3, r9
 80062f2:	4442      	add	r2, r8
 80062f4:	4631      	mov	r1, r6
 80062f6:	4628      	mov	r0, r5
 80062f8:	47b8      	blx	r7
 80062fa:	3001      	adds	r0, #1
 80062fc:	d1c3      	bne.n	8006286 <_printf_float+0x32e>
 80062fe:	e686      	b.n	800600e <_printf_float+0xb6>
 8006300:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006304:	f1ba 0f01 	cmp.w	sl, #1
 8006308:	dc01      	bgt.n	800630e <_printf_float+0x3b6>
 800630a:	07db      	lsls	r3, r3, #31
 800630c:	d536      	bpl.n	800637c <_printf_float+0x424>
 800630e:	2301      	movs	r3, #1
 8006310:	4642      	mov	r2, r8
 8006312:	4631      	mov	r1, r6
 8006314:	4628      	mov	r0, r5
 8006316:	47b8      	blx	r7
 8006318:	3001      	adds	r0, #1
 800631a:	f43f ae78 	beq.w	800600e <_printf_float+0xb6>
 800631e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006322:	4631      	mov	r1, r6
 8006324:	4628      	mov	r0, r5
 8006326:	47b8      	blx	r7
 8006328:	3001      	adds	r0, #1
 800632a:	f43f ae70 	beq.w	800600e <_printf_float+0xb6>
 800632e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006332:	2200      	movs	r2, #0
 8006334:	2300      	movs	r3, #0
 8006336:	f10a 3aff 	add.w	sl, sl, #4294967295
 800633a:	f7fa fbed 	bl	8000b18 <__aeabi_dcmpeq>
 800633e:	b9c0      	cbnz	r0, 8006372 <_printf_float+0x41a>
 8006340:	4653      	mov	r3, sl
 8006342:	f108 0201 	add.w	r2, r8, #1
 8006346:	4631      	mov	r1, r6
 8006348:	4628      	mov	r0, r5
 800634a:	47b8      	blx	r7
 800634c:	3001      	adds	r0, #1
 800634e:	d10c      	bne.n	800636a <_printf_float+0x412>
 8006350:	e65d      	b.n	800600e <_printf_float+0xb6>
 8006352:	2301      	movs	r3, #1
 8006354:	465a      	mov	r2, fp
 8006356:	4631      	mov	r1, r6
 8006358:	4628      	mov	r0, r5
 800635a:	47b8      	blx	r7
 800635c:	3001      	adds	r0, #1
 800635e:	f43f ae56 	beq.w	800600e <_printf_float+0xb6>
 8006362:	f108 0801 	add.w	r8, r8, #1
 8006366:	45d0      	cmp	r8, sl
 8006368:	dbf3      	blt.n	8006352 <_printf_float+0x3fa>
 800636a:	464b      	mov	r3, r9
 800636c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006370:	e6df      	b.n	8006132 <_printf_float+0x1da>
 8006372:	f04f 0800 	mov.w	r8, #0
 8006376:	f104 0b1a 	add.w	fp, r4, #26
 800637a:	e7f4      	b.n	8006366 <_printf_float+0x40e>
 800637c:	2301      	movs	r3, #1
 800637e:	4642      	mov	r2, r8
 8006380:	e7e1      	b.n	8006346 <_printf_float+0x3ee>
 8006382:	2301      	movs	r3, #1
 8006384:	464a      	mov	r2, r9
 8006386:	4631      	mov	r1, r6
 8006388:	4628      	mov	r0, r5
 800638a:	47b8      	blx	r7
 800638c:	3001      	adds	r0, #1
 800638e:	f43f ae3e 	beq.w	800600e <_printf_float+0xb6>
 8006392:	f108 0801 	add.w	r8, r8, #1
 8006396:	68e3      	ldr	r3, [r4, #12]
 8006398:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800639a:	1a5b      	subs	r3, r3, r1
 800639c:	4543      	cmp	r3, r8
 800639e:	dcf0      	bgt.n	8006382 <_printf_float+0x42a>
 80063a0:	e6fc      	b.n	800619c <_printf_float+0x244>
 80063a2:	f04f 0800 	mov.w	r8, #0
 80063a6:	f104 0919 	add.w	r9, r4, #25
 80063aa:	e7f4      	b.n	8006396 <_printf_float+0x43e>

080063ac <_printf_common>:
 80063ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063b0:	4616      	mov	r6, r2
 80063b2:	4698      	mov	r8, r3
 80063b4:	688a      	ldr	r2, [r1, #8]
 80063b6:	690b      	ldr	r3, [r1, #16]
 80063b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80063bc:	4293      	cmp	r3, r2
 80063be:	bfb8      	it	lt
 80063c0:	4613      	movlt	r3, r2
 80063c2:	6033      	str	r3, [r6, #0]
 80063c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80063c8:	4607      	mov	r7, r0
 80063ca:	460c      	mov	r4, r1
 80063cc:	b10a      	cbz	r2, 80063d2 <_printf_common+0x26>
 80063ce:	3301      	adds	r3, #1
 80063d0:	6033      	str	r3, [r6, #0]
 80063d2:	6823      	ldr	r3, [r4, #0]
 80063d4:	0699      	lsls	r1, r3, #26
 80063d6:	bf42      	ittt	mi
 80063d8:	6833      	ldrmi	r3, [r6, #0]
 80063da:	3302      	addmi	r3, #2
 80063dc:	6033      	strmi	r3, [r6, #0]
 80063de:	6825      	ldr	r5, [r4, #0]
 80063e0:	f015 0506 	ands.w	r5, r5, #6
 80063e4:	d106      	bne.n	80063f4 <_printf_common+0x48>
 80063e6:	f104 0a19 	add.w	sl, r4, #25
 80063ea:	68e3      	ldr	r3, [r4, #12]
 80063ec:	6832      	ldr	r2, [r6, #0]
 80063ee:	1a9b      	subs	r3, r3, r2
 80063f0:	42ab      	cmp	r3, r5
 80063f2:	dc26      	bgt.n	8006442 <_printf_common+0x96>
 80063f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80063f8:	6822      	ldr	r2, [r4, #0]
 80063fa:	3b00      	subs	r3, #0
 80063fc:	bf18      	it	ne
 80063fe:	2301      	movne	r3, #1
 8006400:	0692      	lsls	r2, r2, #26
 8006402:	d42b      	bmi.n	800645c <_printf_common+0xb0>
 8006404:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006408:	4641      	mov	r1, r8
 800640a:	4638      	mov	r0, r7
 800640c:	47c8      	blx	r9
 800640e:	3001      	adds	r0, #1
 8006410:	d01e      	beq.n	8006450 <_printf_common+0xa4>
 8006412:	6823      	ldr	r3, [r4, #0]
 8006414:	6922      	ldr	r2, [r4, #16]
 8006416:	f003 0306 	and.w	r3, r3, #6
 800641a:	2b04      	cmp	r3, #4
 800641c:	bf02      	ittt	eq
 800641e:	68e5      	ldreq	r5, [r4, #12]
 8006420:	6833      	ldreq	r3, [r6, #0]
 8006422:	1aed      	subeq	r5, r5, r3
 8006424:	68a3      	ldr	r3, [r4, #8]
 8006426:	bf0c      	ite	eq
 8006428:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800642c:	2500      	movne	r5, #0
 800642e:	4293      	cmp	r3, r2
 8006430:	bfc4      	itt	gt
 8006432:	1a9b      	subgt	r3, r3, r2
 8006434:	18ed      	addgt	r5, r5, r3
 8006436:	2600      	movs	r6, #0
 8006438:	341a      	adds	r4, #26
 800643a:	42b5      	cmp	r5, r6
 800643c:	d11a      	bne.n	8006474 <_printf_common+0xc8>
 800643e:	2000      	movs	r0, #0
 8006440:	e008      	b.n	8006454 <_printf_common+0xa8>
 8006442:	2301      	movs	r3, #1
 8006444:	4652      	mov	r2, sl
 8006446:	4641      	mov	r1, r8
 8006448:	4638      	mov	r0, r7
 800644a:	47c8      	blx	r9
 800644c:	3001      	adds	r0, #1
 800644e:	d103      	bne.n	8006458 <_printf_common+0xac>
 8006450:	f04f 30ff 	mov.w	r0, #4294967295
 8006454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006458:	3501      	adds	r5, #1
 800645a:	e7c6      	b.n	80063ea <_printf_common+0x3e>
 800645c:	18e1      	adds	r1, r4, r3
 800645e:	1c5a      	adds	r2, r3, #1
 8006460:	2030      	movs	r0, #48	@ 0x30
 8006462:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006466:	4422      	add	r2, r4
 8006468:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800646c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006470:	3302      	adds	r3, #2
 8006472:	e7c7      	b.n	8006404 <_printf_common+0x58>
 8006474:	2301      	movs	r3, #1
 8006476:	4622      	mov	r2, r4
 8006478:	4641      	mov	r1, r8
 800647a:	4638      	mov	r0, r7
 800647c:	47c8      	blx	r9
 800647e:	3001      	adds	r0, #1
 8006480:	d0e6      	beq.n	8006450 <_printf_common+0xa4>
 8006482:	3601      	adds	r6, #1
 8006484:	e7d9      	b.n	800643a <_printf_common+0x8e>
	...

08006488 <_printf_i>:
 8006488:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800648c:	7e0f      	ldrb	r7, [r1, #24]
 800648e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006490:	2f78      	cmp	r7, #120	@ 0x78
 8006492:	4691      	mov	r9, r2
 8006494:	4680      	mov	r8, r0
 8006496:	460c      	mov	r4, r1
 8006498:	469a      	mov	sl, r3
 800649a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800649e:	d807      	bhi.n	80064b0 <_printf_i+0x28>
 80064a0:	2f62      	cmp	r7, #98	@ 0x62
 80064a2:	d80a      	bhi.n	80064ba <_printf_i+0x32>
 80064a4:	2f00      	cmp	r7, #0
 80064a6:	f000 80d1 	beq.w	800664c <_printf_i+0x1c4>
 80064aa:	2f58      	cmp	r7, #88	@ 0x58
 80064ac:	f000 80b8 	beq.w	8006620 <_printf_i+0x198>
 80064b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80064b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80064b8:	e03a      	b.n	8006530 <_printf_i+0xa8>
 80064ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80064be:	2b15      	cmp	r3, #21
 80064c0:	d8f6      	bhi.n	80064b0 <_printf_i+0x28>
 80064c2:	a101      	add	r1, pc, #4	@ (adr r1, 80064c8 <_printf_i+0x40>)
 80064c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80064c8:	08006521 	.word	0x08006521
 80064cc:	08006535 	.word	0x08006535
 80064d0:	080064b1 	.word	0x080064b1
 80064d4:	080064b1 	.word	0x080064b1
 80064d8:	080064b1 	.word	0x080064b1
 80064dc:	080064b1 	.word	0x080064b1
 80064e0:	08006535 	.word	0x08006535
 80064e4:	080064b1 	.word	0x080064b1
 80064e8:	080064b1 	.word	0x080064b1
 80064ec:	080064b1 	.word	0x080064b1
 80064f0:	080064b1 	.word	0x080064b1
 80064f4:	08006633 	.word	0x08006633
 80064f8:	0800655f 	.word	0x0800655f
 80064fc:	080065ed 	.word	0x080065ed
 8006500:	080064b1 	.word	0x080064b1
 8006504:	080064b1 	.word	0x080064b1
 8006508:	08006655 	.word	0x08006655
 800650c:	080064b1 	.word	0x080064b1
 8006510:	0800655f 	.word	0x0800655f
 8006514:	080064b1 	.word	0x080064b1
 8006518:	080064b1 	.word	0x080064b1
 800651c:	080065f5 	.word	0x080065f5
 8006520:	6833      	ldr	r3, [r6, #0]
 8006522:	1d1a      	adds	r2, r3, #4
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	6032      	str	r2, [r6, #0]
 8006528:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800652c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006530:	2301      	movs	r3, #1
 8006532:	e09c      	b.n	800666e <_printf_i+0x1e6>
 8006534:	6833      	ldr	r3, [r6, #0]
 8006536:	6820      	ldr	r0, [r4, #0]
 8006538:	1d19      	adds	r1, r3, #4
 800653a:	6031      	str	r1, [r6, #0]
 800653c:	0606      	lsls	r6, r0, #24
 800653e:	d501      	bpl.n	8006544 <_printf_i+0xbc>
 8006540:	681d      	ldr	r5, [r3, #0]
 8006542:	e003      	b.n	800654c <_printf_i+0xc4>
 8006544:	0645      	lsls	r5, r0, #25
 8006546:	d5fb      	bpl.n	8006540 <_printf_i+0xb8>
 8006548:	f9b3 5000 	ldrsh.w	r5, [r3]
 800654c:	2d00      	cmp	r5, #0
 800654e:	da03      	bge.n	8006558 <_printf_i+0xd0>
 8006550:	232d      	movs	r3, #45	@ 0x2d
 8006552:	426d      	negs	r5, r5
 8006554:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006558:	4858      	ldr	r0, [pc, #352]	@ (80066bc <_printf_i+0x234>)
 800655a:	230a      	movs	r3, #10
 800655c:	e011      	b.n	8006582 <_printf_i+0xfa>
 800655e:	6821      	ldr	r1, [r4, #0]
 8006560:	6833      	ldr	r3, [r6, #0]
 8006562:	0608      	lsls	r0, r1, #24
 8006564:	f853 5b04 	ldr.w	r5, [r3], #4
 8006568:	d402      	bmi.n	8006570 <_printf_i+0xe8>
 800656a:	0649      	lsls	r1, r1, #25
 800656c:	bf48      	it	mi
 800656e:	b2ad      	uxthmi	r5, r5
 8006570:	2f6f      	cmp	r7, #111	@ 0x6f
 8006572:	4852      	ldr	r0, [pc, #328]	@ (80066bc <_printf_i+0x234>)
 8006574:	6033      	str	r3, [r6, #0]
 8006576:	bf14      	ite	ne
 8006578:	230a      	movne	r3, #10
 800657a:	2308      	moveq	r3, #8
 800657c:	2100      	movs	r1, #0
 800657e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006582:	6866      	ldr	r6, [r4, #4]
 8006584:	60a6      	str	r6, [r4, #8]
 8006586:	2e00      	cmp	r6, #0
 8006588:	db05      	blt.n	8006596 <_printf_i+0x10e>
 800658a:	6821      	ldr	r1, [r4, #0]
 800658c:	432e      	orrs	r6, r5
 800658e:	f021 0104 	bic.w	r1, r1, #4
 8006592:	6021      	str	r1, [r4, #0]
 8006594:	d04b      	beq.n	800662e <_printf_i+0x1a6>
 8006596:	4616      	mov	r6, r2
 8006598:	fbb5 f1f3 	udiv	r1, r5, r3
 800659c:	fb03 5711 	mls	r7, r3, r1, r5
 80065a0:	5dc7      	ldrb	r7, [r0, r7]
 80065a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80065a6:	462f      	mov	r7, r5
 80065a8:	42bb      	cmp	r3, r7
 80065aa:	460d      	mov	r5, r1
 80065ac:	d9f4      	bls.n	8006598 <_printf_i+0x110>
 80065ae:	2b08      	cmp	r3, #8
 80065b0:	d10b      	bne.n	80065ca <_printf_i+0x142>
 80065b2:	6823      	ldr	r3, [r4, #0]
 80065b4:	07df      	lsls	r7, r3, #31
 80065b6:	d508      	bpl.n	80065ca <_printf_i+0x142>
 80065b8:	6923      	ldr	r3, [r4, #16]
 80065ba:	6861      	ldr	r1, [r4, #4]
 80065bc:	4299      	cmp	r1, r3
 80065be:	bfde      	ittt	le
 80065c0:	2330      	movle	r3, #48	@ 0x30
 80065c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80065c6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80065ca:	1b92      	subs	r2, r2, r6
 80065cc:	6122      	str	r2, [r4, #16]
 80065ce:	f8cd a000 	str.w	sl, [sp]
 80065d2:	464b      	mov	r3, r9
 80065d4:	aa03      	add	r2, sp, #12
 80065d6:	4621      	mov	r1, r4
 80065d8:	4640      	mov	r0, r8
 80065da:	f7ff fee7 	bl	80063ac <_printf_common>
 80065de:	3001      	adds	r0, #1
 80065e0:	d14a      	bne.n	8006678 <_printf_i+0x1f0>
 80065e2:	f04f 30ff 	mov.w	r0, #4294967295
 80065e6:	b004      	add	sp, #16
 80065e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ec:	6823      	ldr	r3, [r4, #0]
 80065ee:	f043 0320 	orr.w	r3, r3, #32
 80065f2:	6023      	str	r3, [r4, #0]
 80065f4:	4832      	ldr	r0, [pc, #200]	@ (80066c0 <_printf_i+0x238>)
 80065f6:	2778      	movs	r7, #120	@ 0x78
 80065f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80065fc:	6823      	ldr	r3, [r4, #0]
 80065fe:	6831      	ldr	r1, [r6, #0]
 8006600:	061f      	lsls	r7, r3, #24
 8006602:	f851 5b04 	ldr.w	r5, [r1], #4
 8006606:	d402      	bmi.n	800660e <_printf_i+0x186>
 8006608:	065f      	lsls	r7, r3, #25
 800660a:	bf48      	it	mi
 800660c:	b2ad      	uxthmi	r5, r5
 800660e:	6031      	str	r1, [r6, #0]
 8006610:	07d9      	lsls	r1, r3, #31
 8006612:	bf44      	itt	mi
 8006614:	f043 0320 	orrmi.w	r3, r3, #32
 8006618:	6023      	strmi	r3, [r4, #0]
 800661a:	b11d      	cbz	r5, 8006624 <_printf_i+0x19c>
 800661c:	2310      	movs	r3, #16
 800661e:	e7ad      	b.n	800657c <_printf_i+0xf4>
 8006620:	4826      	ldr	r0, [pc, #152]	@ (80066bc <_printf_i+0x234>)
 8006622:	e7e9      	b.n	80065f8 <_printf_i+0x170>
 8006624:	6823      	ldr	r3, [r4, #0]
 8006626:	f023 0320 	bic.w	r3, r3, #32
 800662a:	6023      	str	r3, [r4, #0]
 800662c:	e7f6      	b.n	800661c <_printf_i+0x194>
 800662e:	4616      	mov	r6, r2
 8006630:	e7bd      	b.n	80065ae <_printf_i+0x126>
 8006632:	6833      	ldr	r3, [r6, #0]
 8006634:	6825      	ldr	r5, [r4, #0]
 8006636:	6961      	ldr	r1, [r4, #20]
 8006638:	1d18      	adds	r0, r3, #4
 800663a:	6030      	str	r0, [r6, #0]
 800663c:	062e      	lsls	r6, r5, #24
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	d501      	bpl.n	8006646 <_printf_i+0x1be>
 8006642:	6019      	str	r1, [r3, #0]
 8006644:	e002      	b.n	800664c <_printf_i+0x1c4>
 8006646:	0668      	lsls	r0, r5, #25
 8006648:	d5fb      	bpl.n	8006642 <_printf_i+0x1ba>
 800664a:	8019      	strh	r1, [r3, #0]
 800664c:	2300      	movs	r3, #0
 800664e:	6123      	str	r3, [r4, #16]
 8006650:	4616      	mov	r6, r2
 8006652:	e7bc      	b.n	80065ce <_printf_i+0x146>
 8006654:	6833      	ldr	r3, [r6, #0]
 8006656:	1d1a      	adds	r2, r3, #4
 8006658:	6032      	str	r2, [r6, #0]
 800665a:	681e      	ldr	r6, [r3, #0]
 800665c:	6862      	ldr	r2, [r4, #4]
 800665e:	2100      	movs	r1, #0
 8006660:	4630      	mov	r0, r6
 8006662:	f7f9 fddd 	bl	8000220 <memchr>
 8006666:	b108      	cbz	r0, 800666c <_printf_i+0x1e4>
 8006668:	1b80      	subs	r0, r0, r6
 800666a:	6060      	str	r0, [r4, #4]
 800666c:	6863      	ldr	r3, [r4, #4]
 800666e:	6123      	str	r3, [r4, #16]
 8006670:	2300      	movs	r3, #0
 8006672:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006676:	e7aa      	b.n	80065ce <_printf_i+0x146>
 8006678:	6923      	ldr	r3, [r4, #16]
 800667a:	4632      	mov	r2, r6
 800667c:	4649      	mov	r1, r9
 800667e:	4640      	mov	r0, r8
 8006680:	47d0      	blx	sl
 8006682:	3001      	adds	r0, #1
 8006684:	d0ad      	beq.n	80065e2 <_printf_i+0x15a>
 8006686:	6823      	ldr	r3, [r4, #0]
 8006688:	079b      	lsls	r3, r3, #30
 800668a:	d413      	bmi.n	80066b4 <_printf_i+0x22c>
 800668c:	68e0      	ldr	r0, [r4, #12]
 800668e:	9b03      	ldr	r3, [sp, #12]
 8006690:	4298      	cmp	r0, r3
 8006692:	bfb8      	it	lt
 8006694:	4618      	movlt	r0, r3
 8006696:	e7a6      	b.n	80065e6 <_printf_i+0x15e>
 8006698:	2301      	movs	r3, #1
 800669a:	4632      	mov	r2, r6
 800669c:	4649      	mov	r1, r9
 800669e:	4640      	mov	r0, r8
 80066a0:	47d0      	blx	sl
 80066a2:	3001      	adds	r0, #1
 80066a4:	d09d      	beq.n	80065e2 <_printf_i+0x15a>
 80066a6:	3501      	adds	r5, #1
 80066a8:	68e3      	ldr	r3, [r4, #12]
 80066aa:	9903      	ldr	r1, [sp, #12]
 80066ac:	1a5b      	subs	r3, r3, r1
 80066ae:	42ab      	cmp	r3, r5
 80066b0:	dcf2      	bgt.n	8006698 <_printf_i+0x210>
 80066b2:	e7eb      	b.n	800668c <_printf_i+0x204>
 80066b4:	2500      	movs	r5, #0
 80066b6:	f104 0619 	add.w	r6, r4, #25
 80066ba:	e7f5      	b.n	80066a8 <_printf_i+0x220>
 80066bc:	0800a96d 	.word	0x0800a96d
 80066c0:	0800a97e 	.word	0x0800a97e

080066c4 <_scanf_float>:
 80066c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066c8:	b087      	sub	sp, #28
 80066ca:	4691      	mov	r9, r2
 80066cc:	9303      	str	r3, [sp, #12]
 80066ce:	688b      	ldr	r3, [r1, #8]
 80066d0:	1e5a      	subs	r2, r3, #1
 80066d2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80066d6:	bf81      	itttt	hi
 80066d8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80066dc:	eb03 0b05 	addhi.w	fp, r3, r5
 80066e0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80066e4:	608b      	strhi	r3, [r1, #8]
 80066e6:	680b      	ldr	r3, [r1, #0]
 80066e8:	460a      	mov	r2, r1
 80066ea:	f04f 0500 	mov.w	r5, #0
 80066ee:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80066f2:	f842 3b1c 	str.w	r3, [r2], #28
 80066f6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80066fa:	4680      	mov	r8, r0
 80066fc:	460c      	mov	r4, r1
 80066fe:	bf98      	it	ls
 8006700:	f04f 0b00 	movls.w	fp, #0
 8006704:	9201      	str	r2, [sp, #4]
 8006706:	4616      	mov	r6, r2
 8006708:	46aa      	mov	sl, r5
 800670a:	462f      	mov	r7, r5
 800670c:	9502      	str	r5, [sp, #8]
 800670e:	68a2      	ldr	r2, [r4, #8]
 8006710:	b15a      	cbz	r2, 800672a <_scanf_float+0x66>
 8006712:	f8d9 3000 	ldr.w	r3, [r9]
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	2b4e      	cmp	r3, #78	@ 0x4e
 800671a:	d863      	bhi.n	80067e4 <_scanf_float+0x120>
 800671c:	2b40      	cmp	r3, #64	@ 0x40
 800671e:	d83b      	bhi.n	8006798 <_scanf_float+0xd4>
 8006720:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006724:	b2c8      	uxtb	r0, r1
 8006726:	280e      	cmp	r0, #14
 8006728:	d939      	bls.n	800679e <_scanf_float+0xda>
 800672a:	b11f      	cbz	r7, 8006734 <_scanf_float+0x70>
 800672c:	6823      	ldr	r3, [r4, #0]
 800672e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006732:	6023      	str	r3, [r4, #0]
 8006734:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006738:	f1ba 0f01 	cmp.w	sl, #1
 800673c:	f200 8114 	bhi.w	8006968 <_scanf_float+0x2a4>
 8006740:	9b01      	ldr	r3, [sp, #4]
 8006742:	429e      	cmp	r6, r3
 8006744:	f200 8105 	bhi.w	8006952 <_scanf_float+0x28e>
 8006748:	2001      	movs	r0, #1
 800674a:	b007      	add	sp, #28
 800674c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006750:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006754:	2a0d      	cmp	r2, #13
 8006756:	d8e8      	bhi.n	800672a <_scanf_float+0x66>
 8006758:	a101      	add	r1, pc, #4	@ (adr r1, 8006760 <_scanf_float+0x9c>)
 800675a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800675e:	bf00      	nop
 8006760:	080068a9 	.word	0x080068a9
 8006764:	0800672b 	.word	0x0800672b
 8006768:	0800672b 	.word	0x0800672b
 800676c:	0800672b 	.word	0x0800672b
 8006770:	08006905 	.word	0x08006905
 8006774:	080068df 	.word	0x080068df
 8006778:	0800672b 	.word	0x0800672b
 800677c:	0800672b 	.word	0x0800672b
 8006780:	080068b7 	.word	0x080068b7
 8006784:	0800672b 	.word	0x0800672b
 8006788:	0800672b 	.word	0x0800672b
 800678c:	0800672b 	.word	0x0800672b
 8006790:	0800672b 	.word	0x0800672b
 8006794:	08006873 	.word	0x08006873
 8006798:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800679c:	e7da      	b.n	8006754 <_scanf_float+0x90>
 800679e:	290e      	cmp	r1, #14
 80067a0:	d8c3      	bhi.n	800672a <_scanf_float+0x66>
 80067a2:	a001      	add	r0, pc, #4	@ (adr r0, 80067a8 <_scanf_float+0xe4>)
 80067a4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80067a8:	08006863 	.word	0x08006863
 80067ac:	0800672b 	.word	0x0800672b
 80067b0:	08006863 	.word	0x08006863
 80067b4:	080068f3 	.word	0x080068f3
 80067b8:	0800672b 	.word	0x0800672b
 80067bc:	08006805 	.word	0x08006805
 80067c0:	08006849 	.word	0x08006849
 80067c4:	08006849 	.word	0x08006849
 80067c8:	08006849 	.word	0x08006849
 80067cc:	08006849 	.word	0x08006849
 80067d0:	08006849 	.word	0x08006849
 80067d4:	08006849 	.word	0x08006849
 80067d8:	08006849 	.word	0x08006849
 80067dc:	08006849 	.word	0x08006849
 80067e0:	08006849 	.word	0x08006849
 80067e4:	2b6e      	cmp	r3, #110	@ 0x6e
 80067e6:	d809      	bhi.n	80067fc <_scanf_float+0x138>
 80067e8:	2b60      	cmp	r3, #96	@ 0x60
 80067ea:	d8b1      	bhi.n	8006750 <_scanf_float+0x8c>
 80067ec:	2b54      	cmp	r3, #84	@ 0x54
 80067ee:	d07b      	beq.n	80068e8 <_scanf_float+0x224>
 80067f0:	2b59      	cmp	r3, #89	@ 0x59
 80067f2:	d19a      	bne.n	800672a <_scanf_float+0x66>
 80067f4:	2d07      	cmp	r5, #7
 80067f6:	d198      	bne.n	800672a <_scanf_float+0x66>
 80067f8:	2508      	movs	r5, #8
 80067fa:	e02f      	b.n	800685c <_scanf_float+0x198>
 80067fc:	2b74      	cmp	r3, #116	@ 0x74
 80067fe:	d073      	beq.n	80068e8 <_scanf_float+0x224>
 8006800:	2b79      	cmp	r3, #121	@ 0x79
 8006802:	e7f6      	b.n	80067f2 <_scanf_float+0x12e>
 8006804:	6821      	ldr	r1, [r4, #0]
 8006806:	05c8      	lsls	r0, r1, #23
 8006808:	d51e      	bpl.n	8006848 <_scanf_float+0x184>
 800680a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800680e:	6021      	str	r1, [r4, #0]
 8006810:	3701      	adds	r7, #1
 8006812:	f1bb 0f00 	cmp.w	fp, #0
 8006816:	d003      	beq.n	8006820 <_scanf_float+0x15c>
 8006818:	3201      	adds	r2, #1
 800681a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800681e:	60a2      	str	r2, [r4, #8]
 8006820:	68a3      	ldr	r3, [r4, #8]
 8006822:	3b01      	subs	r3, #1
 8006824:	60a3      	str	r3, [r4, #8]
 8006826:	6923      	ldr	r3, [r4, #16]
 8006828:	3301      	adds	r3, #1
 800682a:	6123      	str	r3, [r4, #16]
 800682c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006830:	3b01      	subs	r3, #1
 8006832:	2b00      	cmp	r3, #0
 8006834:	f8c9 3004 	str.w	r3, [r9, #4]
 8006838:	f340 8082 	ble.w	8006940 <_scanf_float+0x27c>
 800683c:	f8d9 3000 	ldr.w	r3, [r9]
 8006840:	3301      	adds	r3, #1
 8006842:	f8c9 3000 	str.w	r3, [r9]
 8006846:	e762      	b.n	800670e <_scanf_float+0x4a>
 8006848:	eb1a 0105 	adds.w	r1, sl, r5
 800684c:	f47f af6d 	bne.w	800672a <_scanf_float+0x66>
 8006850:	6822      	ldr	r2, [r4, #0]
 8006852:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006856:	6022      	str	r2, [r4, #0]
 8006858:	460d      	mov	r5, r1
 800685a:	468a      	mov	sl, r1
 800685c:	f806 3b01 	strb.w	r3, [r6], #1
 8006860:	e7de      	b.n	8006820 <_scanf_float+0x15c>
 8006862:	6822      	ldr	r2, [r4, #0]
 8006864:	0610      	lsls	r0, r2, #24
 8006866:	f57f af60 	bpl.w	800672a <_scanf_float+0x66>
 800686a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800686e:	6022      	str	r2, [r4, #0]
 8006870:	e7f4      	b.n	800685c <_scanf_float+0x198>
 8006872:	f1ba 0f00 	cmp.w	sl, #0
 8006876:	d10c      	bne.n	8006892 <_scanf_float+0x1ce>
 8006878:	b977      	cbnz	r7, 8006898 <_scanf_float+0x1d4>
 800687a:	6822      	ldr	r2, [r4, #0]
 800687c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006880:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006884:	d108      	bne.n	8006898 <_scanf_float+0x1d4>
 8006886:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800688a:	6022      	str	r2, [r4, #0]
 800688c:	f04f 0a01 	mov.w	sl, #1
 8006890:	e7e4      	b.n	800685c <_scanf_float+0x198>
 8006892:	f1ba 0f02 	cmp.w	sl, #2
 8006896:	d050      	beq.n	800693a <_scanf_float+0x276>
 8006898:	2d01      	cmp	r5, #1
 800689a:	d002      	beq.n	80068a2 <_scanf_float+0x1de>
 800689c:	2d04      	cmp	r5, #4
 800689e:	f47f af44 	bne.w	800672a <_scanf_float+0x66>
 80068a2:	3501      	adds	r5, #1
 80068a4:	b2ed      	uxtb	r5, r5
 80068a6:	e7d9      	b.n	800685c <_scanf_float+0x198>
 80068a8:	f1ba 0f01 	cmp.w	sl, #1
 80068ac:	f47f af3d 	bne.w	800672a <_scanf_float+0x66>
 80068b0:	f04f 0a02 	mov.w	sl, #2
 80068b4:	e7d2      	b.n	800685c <_scanf_float+0x198>
 80068b6:	b975      	cbnz	r5, 80068d6 <_scanf_float+0x212>
 80068b8:	2f00      	cmp	r7, #0
 80068ba:	f47f af37 	bne.w	800672c <_scanf_float+0x68>
 80068be:	6822      	ldr	r2, [r4, #0]
 80068c0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80068c4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80068c8:	f040 8103 	bne.w	8006ad2 <_scanf_float+0x40e>
 80068cc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80068d0:	6022      	str	r2, [r4, #0]
 80068d2:	2501      	movs	r5, #1
 80068d4:	e7c2      	b.n	800685c <_scanf_float+0x198>
 80068d6:	2d03      	cmp	r5, #3
 80068d8:	d0e3      	beq.n	80068a2 <_scanf_float+0x1de>
 80068da:	2d05      	cmp	r5, #5
 80068dc:	e7df      	b.n	800689e <_scanf_float+0x1da>
 80068de:	2d02      	cmp	r5, #2
 80068e0:	f47f af23 	bne.w	800672a <_scanf_float+0x66>
 80068e4:	2503      	movs	r5, #3
 80068e6:	e7b9      	b.n	800685c <_scanf_float+0x198>
 80068e8:	2d06      	cmp	r5, #6
 80068ea:	f47f af1e 	bne.w	800672a <_scanf_float+0x66>
 80068ee:	2507      	movs	r5, #7
 80068f0:	e7b4      	b.n	800685c <_scanf_float+0x198>
 80068f2:	6822      	ldr	r2, [r4, #0]
 80068f4:	0591      	lsls	r1, r2, #22
 80068f6:	f57f af18 	bpl.w	800672a <_scanf_float+0x66>
 80068fa:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80068fe:	6022      	str	r2, [r4, #0]
 8006900:	9702      	str	r7, [sp, #8]
 8006902:	e7ab      	b.n	800685c <_scanf_float+0x198>
 8006904:	6822      	ldr	r2, [r4, #0]
 8006906:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800690a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800690e:	d005      	beq.n	800691c <_scanf_float+0x258>
 8006910:	0550      	lsls	r0, r2, #21
 8006912:	f57f af0a 	bpl.w	800672a <_scanf_float+0x66>
 8006916:	2f00      	cmp	r7, #0
 8006918:	f000 80db 	beq.w	8006ad2 <_scanf_float+0x40e>
 800691c:	0591      	lsls	r1, r2, #22
 800691e:	bf58      	it	pl
 8006920:	9902      	ldrpl	r1, [sp, #8]
 8006922:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006926:	bf58      	it	pl
 8006928:	1a79      	subpl	r1, r7, r1
 800692a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800692e:	bf58      	it	pl
 8006930:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006934:	6022      	str	r2, [r4, #0]
 8006936:	2700      	movs	r7, #0
 8006938:	e790      	b.n	800685c <_scanf_float+0x198>
 800693a:	f04f 0a03 	mov.w	sl, #3
 800693e:	e78d      	b.n	800685c <_scanf_float+0x198>
 8006940:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006944:	4649      	mov	r1, r9
 8006946:	4640      	mov	r0, r8
 8006948:	4798      	blx	r3
 800694a:	2800      	cmp	r0, #0
 800694c:	f43f aedf 	beq.w	800670e <_scanf_float+0x4a>
 8006950:	e6eb      	b.n	800672a <_scanf_float+0x66>
 8006952:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006956:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800695a:	464a      	mov	r2, r9
 800695c:	4640      	mov	r0, r8
 800695e:	4798      	blx	r3
 8006960:	6923      	ldr	r3, [r4, #16]
 8006962:	3b01      	subs	r3, #1
 8006964:	6123      	str	r3, [r4, #16]
 8006966:	e6eb      	b.n	8006740 <_scanf_float+0x7c>
 8006968:	1e6b      	subs	r3, r5, #1
 800696a:	2b06      	cmp	r3, #6
 800696c:	d824      	bhi.n	80069b8 <_scanf_float+0x2f4>
 800696e:	2d02      	cmp	r5, #2
 8006970:	d836      	bhi.n	80069e0 <_scanf_float+0x31c>
 8006972:	9b01      	ldr	r3, [sp, #4]
 8006974:	429e      	cmp	r6, r3
 8006976:	f67f aee7 	bls.w	8006748 <_scanf_float+0x84>
 800697a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800697e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006982:	464a      	mov	r2, r9
 8006984:	4640      	mov	r0, r8
 8006986:	4798      	blx	r3
 8006988:	6923      	ldr	r3, [r4, #16]
 800698a:	3b01      	subs	r3, #1
 800698c:	6123      	str	r3, [r4, #16]
 800698e:	e7f0      	b.n	8006972 <_scanf_float+0x2ae>
 8006990:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006994:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006998:	464a      	mov	r2, r9
 800699a:	4640      	mov	r0, r8
 800699c:	4798      	blx	r3
 800699e:	6923      	ldr	r3, [r4, #16]
 80069a0:	3b01      	subs	r3, #1
 80069a2:	6123      	str	r3, [r4, #16]
 80069a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80069a8:	fa5f fa8a 	uxtb.w	sl, sl
 80069ac:	f1ba 0f02 	cmp.w	sl, #2
 80069b0:	d1ee      	bne.n	8006990 <_scanf_float+0x2cc>
 80069b2:	3d03      	subs	r5, #3
 80069b4:	b2ed      	uxtb	r5, r5
 80069b6:	1b76      	subs	r6, r6, r5
 80069b8:	6823      	ldr	r3, [r4, #0]
 80069ba:	05da      	lsls	r2, r3, #23
 80069bc:	d530      	bpl.n	8006a20 <_scanf_float+0x35c>
 80069be:	055b      	lsls	r3, r3, #21
 80069c0:	d511      	bpl.n	80069e6 <_scanf_float+0x322>
 80069c2:	9b01      	ldr	r3, [sp, #4]
 80069c4:	429e      	cmp	r6, r3
 80069c6:	f67f aebf 	bls.w	8006748 <_scanf_float+0x84>
 80069ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80069ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80069d2:	464a      	mov	r2, r9
 80069d4:	4640      	mov	r0, r8
 80069d6:	4798      	blx	r3
 80069d8:	6923      	ldr	r3, [r4, #16]
 80069da:	3b01      	subs	r3, #1
 80069dc:	6123      	str	r3, [r4, #16]
 80069de:	e7f0      	b.n	80069c2 <_scanf_float+0x2fe>
 80069e0:	46aa      	mov	sl, r5
 80069e2:	46b3      	mov	fp, r6
 80069e4:	e7de      	b.n	80069a4 <_scanf_float+0x2e0>
 80069e6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80069ea:	6923      	ldr	r3, [r4, #16]
 80069ec:	2965      	cmp	r1, #101	@ 0x65
 80069ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80069f2:	f106 35ff 	add.w	r5, r6, #4294967295
 80069f6:	6123      	str	r3, [r4, #16]
 80069f8:	d00c      	beq.n	8006a14 <_scanf_float+0x350>
 80069fa:	2945      	cmp	r1, #69	@ 0x45
 80069fc:	d00a      	beq.n	8006a14 <_scanf_float+0x350>
 80069fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006a02:	464a      	mov	r2, r9
 8006a04:	4640      	mov	r0, r8
 8006a06:	4798      	blx	r3
 8006a08:	6923      	ldr	r3, [r4, #16]
 8006a0a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	1eb5      	subs	r5, r6, #2
 8006a12:	6123      	str	r3, [r4, #16]
 8006a14:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006a18:	464a      	mov	r2, r9
 8006a1a:	4640      	mov	r0, r8
 8006a1c:	4798      	blx	r3
 8006a1e:	462e      	mov	r6, r5
 8006a20:	6822      	ldr	r2, [r4, #0]
 8006a22:	f012 0210 	ands.w	r2, r2, #16
 8006a26:	d001      	beq.n	8006a2c <_scanf_float+0x368>
 8006a28:	2000      	movs	r0, #0
 8006a2a:	e68e      	b.n	800674a <_scanf_float+0x86>
 8006a2c:	7032      	strb	r2, [r6, #0]
 8006a2e:	6823      	ldr	r3, [r4, #0]
 8006a30:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006a34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a38:	d125      	bne.n	8006a86 <_scanf_float+0x3c2>
 8006a3a:	9b02      	ldr	r3, [sp, #8]
 8006a3c:	429f      	cmp	r7, r3
 8006a3e:	d00a      	beq.n	8006a56 <_scanf_float+0x392>
 8006a40:	1bda      	subs	r2, r3, r7
 8006a42:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006a46:	429e      	cmp	r6, r3
 8006a48:	bf28      	it	cs
 8006a4a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006a4e:	4922      	ldr	r1, [pc, #136]	@ (8006ad8 <_scanf_float+0x414>)
 8006a50:	4630      	mov	r0, r6
 8006a52:	f000 f977 	bl	8006d44 <siprintf>
 8006a56:	9901      	ldr	r1, [sp, #4]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	4640      	mov	r0, r8
 8006a5c:	f002 fd14 	bl	8009488 <_strtod_r>
 8006a60:	9b03      	ldr	r3, [sp, #12]
 8006a62:	6821      	ldr	r1, [r4, #0]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f011 0f02 	tst.w	r1, #2
 8006a6a:	ec57 6b10 	vmov	r6, r7, d0
 8006a6e:	f103 0204 	add.w	r2, r3, #4
 8006a72:	d015      	beq.n	8006aa0 <_scanf_float+0x3dc>
 8006a74:	9903      	ldr	r1, [sp, #12]
 8006a76:	600a      	str	r2, [r1, #0]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	e9c3 6700 	strd	r6, r7, [r3]
 8006a7e:	68e3      	ldr	r3, [r4, #12]
 8006a80:	3301      	adds	r3, #1
 8006a82:	60e3      	str	r3, [r4, #12]
 8006a84:	e7d0      	b.n	8006a28 <_scanf_float+0x364>
 8006a86:	9b04      	ldr	r3, [sp, #16]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d0e4      	beq.n	8006a56 <_scanf_float+0x392>
 8006a8c:	9905      	ldr	r1, [sp, #20]
 8006a8e:	230a      	movs	r3, #10
 8006a90:	3101      	adds	r1, #1
 8006a92:	4640      	mov	r0, r8
 8006a94:	f002 fd78 	bl	8009588 <_strtol_r>
 8006a98:	9b04      	ldr	r3, [sp, #16]
 8006a9a:	9e05      	ldr	r6, [sp, #20]
 8006a9c:	1ac2      	subs	r2, r0, r3
 8006a9e:	e7d0      	b.n	8006a42 <_scanf_float+0x37e>
 8006aa0:	f011 0f04 	tst.w	r1, #4
 8006aa4:	9903      	ldr	r1, [sp, #12]
 8006aa6:	600a      	str	r2, [r1, #0]
 8006aa8:	d1e6      	bne.n	8006a78 <_scanf_float+0x3b4>
 8006aaa:	681d      	ldr	r5, [r3, #0]
 8006aac:	4632      	mov	r2, r6
 8006aae:	463b      	mov	r3, r7
 8006ab0:	4630      	mov	r0, r6
 8006ab2:	4639      	mov	r1, r7
 8006ab4:	f7fa f862 	bl	8000b7c <__aeabi_dcmpun>
 8006ab8:	b128      	cbz	r0, 8006ac6 <_scanf_float+0x402>
 8006aba:	4808      	ldr	r0, [pc, #32]	@ (8006adc <_scanf_float+0x418>)
 8006abc:	f000 fabc 	bl	8007038 <nanf>
 8006ac0:	ed85 0a00 	vstr	s0, [r5]
 8006ac4:	e7db      	b.n	8006a7e <_scanf_float+0x3ba>
 8006ac6:	4630      	mov	r0, r6
 8006ac8:	4639      	mov	r1, r7
 8006aca:	f7fa f8b5 	bl	8000c38 <__aeabi_d2f>
 8006ace:	6028      	str	r0, [r5, #0]
 8006ad0:	e7d5      	b.n	8006a7e <_scanf_float+0x3ba>
 8006ad2:	2700      	movs	r7, #0
 8006ad4:	e62e      	b.n	8006734 <_scanf_float+0x70>
 8006ad6:	bf00      	nop
 8006ad8:	0800a98f 	.word	0x0800a98f
 8006adc:	0800a9cf 	.word	0x0800a9cf

08006ae0 <std>:
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	b510      	push	{r4, lr}
 8006ae4:	4604      	mov	r4, r0
 8006ae6:	e9c0 3300 	strd	r3, r3, [r0]
 8006aea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006aee:	6083      	str	r3, [r0, #8]
 8006af0:	8181      	strh	r1, [r0, #12]
 8006af2:	6643      	str	r3, [r0, #100]	@ 0x64
 8006af4:	81c2      	strh	r2, [r0, #14]
 8006af6:	6183      	str	r3, [r0, #24]
 8006af8:	4619      	mov	r1, r3
 8006afa:	2208      	movs	r2, #8
 8006afc:	305c      	adds	r0, #92	@ 0x5c
 8006afe:	f000 fa1b 	bl	8006f38 <memset>
 8006b02:	4b0d      	ldr	r3, [pc, #52]	@ (8006b38 <std+0x58>)
 8006b04:	6263      	str	r3, [r4, #36]	@ 0x24
 8006b06:	4b0d      	ldr	r3, [pc, #52]	@ (8006b3c <std+0x5c>)
 8006b08:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8006b40 <std+0x60>)
 8006b0c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8006b44 <std+0x64>)
 8006b10:	6323      	str	r3, [r4, #48]	@ 0x30
 8006b12:	4b0d      	ldr	r3, [pc, #52]	@ (8006b48 <std+0x68>)
 8006b14:	6224      	str	r4, [r4, #32]
 8006b16:	429c      	cmp	r4, r3
 8006b18:	d006      	beq.n	8006b28 <std+0x48>
 8006b1a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006b1e:	4294      	cmp	r4, r2
 8006b20:	d002      	beq.n	8006b28 <std+0x48>
 8006b22:	33d0      	adds	r3, #208	@ 0xd0
 8006b24:	429c      	cmp	r4, r3
 8006b26:	d105      	bne.n	8006b34 <std+0x54>
 8006b28:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b30:	f000 ba7e 	b.w	8007030 <__retarget_lock_init_recursive>
 8006b34:	bd10      	pop	{r4, pc}
 8006b36:	bf00      	nop
 8006b38:	08006d89 	.word	0x08006d89
 8006b3c:	08006dab 	.word	0x08006dab
 8006b40:	08006de3 	.word	0x08006de3
 8006b44:	08006e07 	.word	0x08006e07
 8006b48:	20000cd8 	.word	0x20000cd8

08006b4c <stdio_exit_handler>:
 8006b4c:	4a02      	ldr	r2, [pc, #8]	@ (8006b58 <stdio_exit_handler+0xc>)
 8006b4e:	4903      	ldr	r1, [pc, #12]	@ (8006b5c <stdio_exit_handler+0x10>)
 8006b50:	4803      	ldr	r0, [pc, #12]	@ (8006b60 <stdio_exit_handler+0x14>)
 8006b52:	f000 b869 	b.w	8006c28 <_fwalk_sglue>
 8006b56:	bf00      	nop
 8006b58:	2000003c 	.word	0x2000003c
 8006b5c:	08009bc9 	.word	0x08009bc9
 8006b60:	2000004c 	.word	0x2000004c

08006b64 <cleanup_stdio>:
 8006b64:	6841      	ldr	r1, [r0, #4]
 8006b66:	4b0c      	ldr	r3, [pc, #48]	@ (8006b98 <cleanup_stdio+0x34>)
 8006b68:	4299      	cmp	r1, r3
 8006b6a:	b510      	push	{r4, lr}
 8006b6c:	4604      	mov	r4, r0
 8006b6e:	d001      	beq.n	8006b74 <cleanup_stdio+0x10>
 8006b70:	f003 f82a 	bl	8009bc8 <_fflush_r>
 8006b74:	68a1      	ldr	r1, [r4, #8]
 8006b76:	4b09      	ldr	r3, [pc, #36]	@ (8006b9c <cleanup_stdio+0x38>)
 8006b78:	4299      	cmp	r1, r3
 8006b7a:	d002      	beq.n	8006b82 <cleanup_stdio+0x1e>
 8006b7c:	4620      	mov	r0, r4
 8006b7e:	f003 f823 	bl	8009bc8 <_fflush_r>
 8006b82:	68e1      	ldr	r1, [r4, #12]
 8006b84:	4b06      	ldr	r3, [pc, #24]	@ (8006ba0 <cleanup_stdio+0x3c>)
 8006b86:	4299      	cmp	r1, r3
 8006b88:	d004      	beq.n	8006b94 <cleanup_stdio+0x30>
 8006b8a:	4620      	mov	r0, r4
 8006b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b90:	f003 b81a 	b.w	8009bc8 <_fflush_r>
 8006b94:	bd10      	pop	{r4, pc}
 8006b96:	bf00      	nop
 8006b98:	20000cd8 	.word	0x20000cd8
 8006b9c:	20000d40 	.word	0x20000d40
 8006ba0:	20000da8 	.word	0x20000da8

08006ba4 <global_stdio_init.part.0>:
 8006ba4:	b510      	push	{r4, lr}
 8006ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8006bd4 <global_stdio_init.part.0+0x30>)
 8006ba8:	4c0b      	ldr	r4, [pc, #44]	@ (8006bd8 <global_stdio_init.part.0+0x34>)
 8006baa:	4a0c      	ldr	r2, [pc, #48]	@ (8006bdc <global_stdio_init.part.0+0x38>)
 8006bac:	601a      	str	r2, [r3, #0]
 8006bae:	4620      	mov	r0, r4
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	2104      	movs	r1, #4
 8006bb4:	f7ff ff94 	bl	8006ae0 <std>
 8006bb8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	2109      	movs	r1, #9
 8006bc0:	f7ff ff8e 	bl	8006ae0 <std>
 8006bc4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006bc8:	2202      	movs	r2, #2
 8006bca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bce:	2112      	movs	r1, #18
 8006bd0:	f7ff bf86 	b.w	8006ae0 <std>
 8006bd4:	20000e10 	.word	0x20000e10
 8006bd8:	20000cd8 	.word	0x20000cd8
 8006bdc:	08006b4d 	.word	0x08006b4d

08006be0 <__sfp_lock_acquire>:
 8006be0:	4801      	ldr	r0, [pc, #4]	@ (8006be8 <__sfp_lock_acquire+0x8>)
 8006be2:	f000 ba26 	b.w	8007032 <__retarget_lock_acquire_recursive>
 8006be6:	bf00      	nop
 8006be8:	20000e19 	.word	0x20000e19

08006bec <__sfp_lock_release>:
 8006bec:	4801      	ldr	r0, [pc, #4]	@ (8006bf4 <__sfp_lock_release+0x8>)
 8006bee:	f000 ba21 	b.w	8007034 <__retarget_lock_release_recursive>
 8006bf2:	bf00      	nop
 8006bf4:	20000e19 	.word	0x20000e19

08006bf8 <__sinit>:
 8006bf8:	b510      	push	{r4, lr}
 8006bfa:	4604      	mov	r4, r0
 8006bfc:	f7ff fff0 	bl	8006be0 <__sfp_lock_acquire>
 8006c00:	6a23      	ldr	r3, [r4, #32]
 8006c02:	b11b      	cbz	r3, 8006c0c <__sinit+0x14>
 8006c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c08:	f7ff bff0 	b.w	8006bec <__sfp_lock_release>
 8006c0c:	4b04      	ldr	r3, [pc, #16]	@ (8006c20 <__sinit+0x28>)
 8006c0e:	6223      	str	r3, [r4, #32]
 8006c10:	4b04      	ldr	r3, [pc, #16]	@ (8006c24 <__sinit+0x2c>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d1f5      	bne.n	8006c04 <__sinit+0xc>
 8006c18:	f7ff ffc4 	bl	8006ba4 <global_stdio_init.part.0>
 8006c1c:	e7f2      	b.n	8006c04 <__sinit+0xc>
 8006c1e:	bf00      	nop
 8006c20:	08006b65 	.word	0x08006b65
 8006c24:	20000e10 	.word	0x20000e10

08006c28 <_fwalk_sglue>:
 8006c28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c2c:	4607      	mov	r7, r0
 8006c2e:	4688      	mov	r8, r1
 8006c30:	4614      	mov	r4, r2
 8006c32:	2600      	movs	r6, #0
 8006c34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c38:	f1b9 0901 	subs.w	r9, r9, #1
 8006c3c:	d505      	bpl.n	8006c4a <_fwalk_sglue+0x22>
 8006c3e:	6824      	ldr	r4, [r4, #0]
 8006c40:	2c00      	cmp	r4, #0
 8006c42:	d1f7      	bne.n	8006c34 <_fwalk_sglue+0xc>
 8006c44:	4630      	mov	r0, r6
 8006c46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c4a:	89ab      	ldrh	r3, [r5, #12]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d907      	bls.n	8006c60 <_fwalk_sglue+0x38>
 8006c50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c54:	3301      	adds	r3, #1
 8006c56:	d003      	beq.n	8006c60 <_fwalk_sglue+0x38>
 8006c58:	4629      	mov	r1, r5
 8006c5a:	4638      	mov	r0, r7
 8006c5c:	47c0      	blx	r8
 8006c5e:	4306      	orrs	r6, r0
 8006c60:	3568      	adds	r5, #104	@ 0x68
 8006c62:	e7e9      	b.n	8006c38 <_fwalk_sglue+0x10>

08006c64 <iprintf>:
 8006c64:	b40f      	push	{r0, r1, r2, r3}
 8006c66:	b507      	push	{r0, r1, r2, lr}
 8006c68:	4906      	ldr	r1, [pc, #24]	@ (8006c84 <iprintf+0x20>)
 8006c6a:	ab04      	add	r3, sp, #16
 8006c6c:	6808      	ldr	r0, [r1, #0]
 8006c6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c72:	6881      	ldr	r1, [r0, #8]
 8006c74:	9301      	str	r3, [sp, #4]
 8006c76:	f002 fe0b 	bl	8009890 <_vfiprintf_r>
 8006c7a:	b003      	add	sp, #12
 8006c7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c80:	b004      	add	sp, #16
 8006c82:	4770      	bx	lr
 8006c84:	20000048 	.word	0x20000048

08006c88 <_puts_r>:
 8006c88:	6a03      	ldr	r3, [r0, #32]
 8006c8a:	b570      	push	{r4, r5, r6, lr}
 8006c8c:	6884      	ldr	r4, [r0, #8]
 8006c8e:	4605      	mov	r5, r0
 8006c90:	460e      	mov	r6, r1
 8006c92:	b90b      	cbnz	r3, 8006c98 <_puts_r+0x10>
 8006c94:	f7ff ffb0 	bl	8006bf8 <__sinit>
 8006c98:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c9a:	07db      	lsls	r3, r3, #31
 8006c9c:	d405      	bmi.n	8006caa <_puts_r+0x22>
 8006c9e:	89a3      	ldrh	r3, [r4, #12]
 8006ca0:	0598      	lsls	r0, r3, #22
 8006ca2:	d402      	bmi.n	8006caa <_puts_r+0x22>
 8006ca4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ca6:	f000 f9c4 	bl	8007032 <__retarget_lock_acquire_recursive>
 8006caa:	89a3      	ldrh	r3, [r4, #12]
 8006cac:	0719      	lsls	r1, r3, #28
 8006cae:	d502      	bpl.n	8006cb6 <_puts_r+0x2e>
 8006cb0:	6923      	ldr	r3, [r4, #16]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d135      	bne.n	8006d22 <_puts_r+0x9a>
 8006cb6:	4621      	mov	r1, r4
 8006cb8:	4628      	mov	r0, r5
 8006cba:	f000 f8e7 	bl	8006e8c <__swsetup_r>
 8006cbe:	b380      	cbz	r0, 8006d22 <_puts_r+0x9a>
 8006cc0:	f04f 35ff 	mov.w	r5, #4294967295
 8006cc4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006cc6:	07da      	lsls	r2, r3, #31
 8006cc8:	d405      	bmi.n	8006cd6 <_puts_r+0x4e>
 8006cca:	89a3      	ldrh	r3, [r4, #12]
 8006ccc:	059b      	lsls	r3, r3, #22
 8006cce:	d402      	bmi.n	8006cd6 <_puts_r+0x4e>
 8006cd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006cd2:	f000 f9af 	bl	8007034 <__retarget_lock_release_recursive>
 8006cd6:	4628      	mov	r0, r5
 8006cd8:	bd70      	pop	{r4, r5, r6, pc}
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	da04      	bge.n	8006ce8 <_puts_r+0x60>
 8006cde:	69a2      	ldr	r2, [r4, #24]
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	dc17      	bgt.n	8006d14 <_puts_r+0x8c>
 8006ce4:	290a      	cmp	r1, #10
 8006ce6:	d015      	beq.n	8006d14 <_puts_r+0x8c>
 8006ce8:	6823      	ldr	r3, [r4, #0]
 8006cea:	1c5a      	adds	r2, r3, #1
 8006cec:	6022      	str	r2, [r4, #0]
 8006cee:	7019      	strb	r1, [r3, #0]
 8006cf0:	68a3      	ldr	r3, [r4, #8]
 8006cf2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006cf6:	3b01      	subs	r3, #1
 8006cf8:	60a3      	str	r3, [r4, #8]
 8006cfa:	2900      	cmp	r1, #0
 8006cfc:	d1ed      	bne.n	8006cda <_puts_r+0x52>
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	da11      	bge.n	8006d26 <_puts_r+0x9e>
 8006d02:	4622      	mov	r2, r4
 8006d04:	210a      	movs	r1, #10
 8006d06:	4628      	mov	r0, r5
 8006d08:	f000 f881 	bl	8006e0e <__swbuf_r>
 8006d0c:	3001      	adds	r0, #1
 8006d0e:	d0d7      	beq.n	8006cc0 <_puts_r+0x38>
 8006d10:	250a      	movs	r5, #10
 8006d12:	e7d7      	b.n	8006cc4 <_puts_r+0x3c>
 8006d14:	4622      	mov	r2, r4
 8006d16:	4628      	mov	r0, r5
 8006d18:	f000 f879 	bl	8006e0e <__swbuf_r>
 8006d1c:	3001      	adds	r0, #1
 8006d1e:	d1e7      	bne.n	8006cf0 <_puts_r+0x68>
 8006d20:	e7ce      	b.n	8006cc0 <_puts_r+0x38>
 8006d22:	3e01      	subs	r6, #1
 8006d24:	e7e4      	b.n	8006cf0 <_puts_r+0x68>
 8006d26:	6823      	ldr	r3, [r4, #0]
 8006d28:	1c5a      	adds	r2, r3, #1
 8006d2a:	6022      	str	r2, [r4, #0]
 8006d2c:	220a      	movs	r2, #10
 8006d2e:	701a      	strb	r2, [r3, #0]
 8006d30:	e7ee      	b.n	8006d10 <_puts_r+0x88>
	...

08006d34 <puts>:
 8006d34:	4b02      	ldr	r3, [pc, #8]	@ (8006d40 <puts+0xc>)
 8006d36:	4601      	mov	r1, r0
 8006d38:	6818      	ldr	r0, [r3, #0]
 8006d3a:	f7ff bfa5 	b.w	8006c88 <_puts_r>
 8006d3e:	bf00      	nop
 8006d40:	20000048 	.word	0x20000048

08006d44 <siprintf>:
 8006d44:	b40e      	push	{r1, r2, r3}
 8006d46:	b510      	push	{r4, lr}
 8006d48:	b09d      	sub	sp, #116	@ 0x74
 8006d4a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006d4c:	9002      	str	r0, [sp, #8]
 8006d4e:	9006      	str	r0, [sp, #24]
 8006d50:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006d54:	480a      	ldr	r0, [pc, #40]	@ (8006d80 <siprintf+0x3c>)
 8006d56:	9107      	str	r1, [sp, #28]
 8006d58:	9104      	str	r1, [sp, #16]
 8006d5a:	490a      	ldr	r1, [pc, #40]	@ (8006d84 <siprintf+0x40>)
 8006d5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d60:	9105      	str	r1, [sp, #20]
 8006d62:	2400      	movs	r4, #0
 8006d64:	a902      	add	r1, sp, #8
 8006d66:	6800      	ldr	r0, [r0, #0]
 8006d68:	9301      	str	r3, [sp, #4]
 8006d6a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006d6c:	f002 fc6a 	bl	8009644 <_svfiprintf_r>
 8006d70:	9b02      	ldr	r3, [sp, #8]
 8006d72:	701c      	strb	r4, [r3, #0]
 8006d74:	b01d      	add	sp, #116	@ 0x74
 8006d76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d7a:	b003      	add	sp, #12
 8006d7c:	4770      	bx	lr
 8006d7e:	bf00      	nop
 8006d80:	20000048 	.word	0x20000048
 8006d84:	ffff0208 	.word	0xffff0208

08006d88 <__sread>:
 8006d88:	b510      	push	{r4, lr}
 8006d8a:	460c      	mov	r4, r1
 8006d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d90:	f000 f900 	bl	8006f94 <_read_r>
 8006d94:	2800      	cmp	r0, #0
 8006d96:	bfab      	itete	ge
 8006d98:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006d9a:	89a3      	ldrhlt	r3, [r4, #12]
 8006d9c:	181b      	addge	r3, r3, r0
 8006d9e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006da2:	bfac      	ite	ge
 8006da4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006da6:	81a3      	strhlt	r3, [r4, #12]
 8006da8:	bd10      	pop	{r4, pc}

08006daa <__swrite>:
 8006daa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dae:	461f      	mov	r7, r3
 8006db0:	898b      	ldrh	r3, [r1, #12]
 8006db2:	05db      	lsls	r3, r3, #23
 8006db4:	4605      	mov	r5, r0
 8006db6:	460c      	mov	r4, r1
 8006db8:	4616      	mov	r6, r2
 8006dba:	d505      	bpl.n	8006dc8 <__swrite+0x1e>
 8006dbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	f000 f8d4 	bl	8006f70 <_lseek_r>
 8006dc8:	89a3      	ldrh	r3, [r4, #12]
 8006dca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006dd2:	81a3      	strh	r3, [r4, #12]
 8006dd4:	4632      	mov	r2, r6
 8006dd6:	463b      	mov	r3, r7
 8006dd8:	4628      	mov	r0, r5
 8006dda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006dde:	f000 b8eb 	b.w	8006fb8 <_write_r>

08006de2 <__sseek>:
 8006de2:	b510      	push	{r4, lr}
 8006de4:	460c      	mov	r4, r1
 8006de6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dea:	f000 f8c1 	bl	8006f70 <_lseek_r>
 8006dee:	1c43      	adds	r3, r0, #1
 8006df0:	89a3      	ldrh	r3, [r4, #12]
 8006df2:	bf15      	itete	ne
 8006df4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006df6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006dfa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006dfe:	81a3      	strheq	r3, [r4, #12]
 8006e00:	bf18      	it	ne
 8006e02:	81a3      	strhne	r3, [r4, #12]
 8006e04:	bd10      	pop	{r4, pc}

08006e06 <__sclose>:
 8006e06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e0a:	f000 b8a1 	b.w	8006f50 <_close_r>

08006e0e <__swbuf_r>:
 8006e0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e10:	460e      	mov	r6, r1
 8006e12:	4614      	mov	r4, r2
 8006e14:	4605      	mov	r5, r0
 8006e16:	b118      	cbz	r0, 8006e20 <__swbuf_r+0x12>
 8006e18:	6a03      	ldr	r3, [r0, #32]
 8006e1a:	b90b      	cbnz	r3, 8006e20 <__swbuf_r+0x12>
 8006e1c:	f7ff feec 	bl	8006bf8 <__sinit>
 8006e20:	69a3      	ldr	r3, [r4, #24]
 8006e22:	60a3      	str	r3, [r4, #8]
 8006e24:	89a3      	ldrh	r3, [r4, #12]
 8006e26:	071a      	lsls	r2, r3, #28
 8006e28:	d501      	bpl.n	8006e2e <__swbuf_r+0x20>
 8006e2a:	6923      	ldr	r3, [r4, #16]
 8006e2c:	b943      	cbnz	r3, 8006e40 <__swbuf_r+0x32>
 8006e2e:	4621      	mov	r1, r4
 8006e30:	4628      	mov	r0, r5
 8006e32:	f000 f82b 	bl	8006e8c <__swsetup_r>
 8006e36:	b118      	cbz	r0, 8006e40 <__swbuf_r+0x32>
 8006e38:	f04f 37ff 	mov.w	r7, #4294967295
 8006e3c:	4638      	mov	r0, r7
 8006e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e40:	6823      	ldr	r3, [r4, #0]
 8006e42:	6922      	ldr	r2, [r4, #16]
 8006e44:	1a98      	subs	r0, r3, r2
 8006e46:	6963      	ldr	r3, [r4, #20]
 8006e48:	b2f6      	uxtb	r6, r6
 8006e4a:	4283      	cmp	r3, r0
 8006e4c:	4637      	mov	r7, r6
 8006e4e:	dc05      	bgt.n	8006e5c <__swbuf_r+0x4e>
 8006e50:	4621      	mov	r1, r4
 8006e52:	4628      	mov	r0, r5
 8006e54:	f002 feb8 	bl	8009bc8 <_fflush_r>
 8006e58:	2800      	cmp	r0, #0
 8006e5a:	d1ed      	bne.n	8006e38 <__swbuf_r+0x2a>
 8006e5c:	68a3      	ldr	r3, [r4, #8]
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	60a3      	str	r3, [r4, #8]
 8006e62:	6823      	ldr	r3, [r4, #0]
 8006e64:	1c5a      	adds	r2, r3, #1
 8006e66:	6022      	str	r2, [r4, #0]
 8006e68:	701e      	strb	r6, [r3, #0]
 8006e6a:	6962      	ldr	r2, [r4, #20]
 8006e6c:	1c43      	adds	r3, r0, #1
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d004      	beq.n	8006e7c <__swbuf_r+0x6e>
 8006e72:	89a3      	ldrh	r3, [r4, #12]
 8006e74:	07db      	lsls	r3, r3, #31
 8006e76:	d5e1      	bpl.n	8006e3c <__swbuf_r+0x2e>
 8006e78:	2e0a      	cmp	r6, #10
 8006e7a:	d1df      	bne.n	8006e3c <__swbuf_r+0x2e>
 8006e7c:	4621      	mov	r1, r4
 8006e7e:	4628      	mov	r0, r5
 8006e80:	f002 fea2 	bl	8009bc8 <_fflush_r>
 8006e84:	2800      	cmp	r0, #0
 8006e86:	d0d9      	beq.n	8006e3c <__swbuf_r+0x2e>
 8006e88:	e7d6      	b.n	8006e38 <__swbuf_r+0x2a>
	...

08006e8c <__swsetup_r>:
 8006e8c:	b538      	push	{r3, r4, r5, lr}
 8006e8e:	4b29      	ldr	r3, [pc, #164]	@ (8006f34 <__swsetup_r+0xa8>)
 8006e90:	4605      	mov	r5, r0
 8006e92:	6818      	ldr	r0, [r3, #0]
 8006e94:	460c      	mov	r4, r1
 8006e96:	b118      	cbz	r0, 8006ea0 <__swsetup_r+0x14>
 8006e98:	6a03      	ldr	r3, [r0, #32]
 8006e9a:	b90b      	cbnz	r3, 8006ea0 <__swsetup_r+0x14>
 8006e9c:	f7ff feac 	bl	8006bf8 <__sinit>
 8006ea0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ea4:	0719      	lsls	r1, r3, #28
 8006ea6:	d422      	bmi.n	8006eee <__swsetup_r+0x62>
 8006ea8:	06da      	lsls	r2, r3, #27
 8006eaa:	d407      	bmi.n	8006ebc <__swsetup_r+0x30>
 8006eac:	2209      	movs	r2, #9
 8006eae:	602a      	str	r2, [r5, #0]
 8006eb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006eb4:	81a3      	strh	r3, [r4, #12]
 8006eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8006eba:	e033      	b.n	8006f24 <__swsetup_r+0x98>
 8006ebc:	0758      	lsls	r0, r3, #29
 8006ebe:	d512      	bpl.n	8006ee6 <__swsetup_r+0x5a>
 8006ec0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006ec2:	b141      	cbz	r1, 8006ed6 <__swsetup_r+0x4a>
 8006ec4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006ec8:	4299      	cmp	r1, r3
 8006eca:	d002      	beq.n	8006ed2 <__swsetup_r+0x46>
 8006ecc:	4628      	mov	r0, r5
 8006ece:	f000 ff2f 	bl	8007d30 <_free_r>
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	6363      	str	r3, [r4, #52]	@ 0x34
 8006ed6:	89a3      	ldrh	r3, [r4, #12]
 8006ed8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006edc:	81a3      	strh	r3, [r4, #12]
 8006ede:	2300      	movs	r3, #0
 8006ee0:	6063      	str	r3, [r4, #4]
 8006ee2:	6923      	ldr	r3, [r4, #16]
 8006ee4:	6023      	str	r3, [r4, #0]
 8006ee6:	89a3      	ldrh	r3, [r4, #12]
 8006ee8:	f043 0308 	orr.w	r3, r3, #8
 8006eec:	81a3      	strh	r3, [r4, #12]
 8006eee:	6923      	ldr	r3, [r4, #16]
 8006ef0:	b94b      	cbnz	r3, 8006f06 <__swsetup_r+0x7a>
 8006ef2:	89a3      	ldrh	r3, [r4, #12]
 8006ef4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006ef8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006efc:	d003      	beq.n	8006f06 <__swsetup_r+0x7a>
 8006efe:	4621      	mov	r1, r4
 8006f00:	4628      	mov	r0, r5
 8006f02:	f002 fec1 	bl	8009c88 <__smakebuf_r>
 8006f06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f0a:	f013 0201 	ands.w	r2, r3, #1
 8006f0e:	d00a      	beq.n	8006f26 <__swsetup_r+0x9a>
 8006f10:	2200      	movs	r2, #0
 8006f12:	60a2      	str	r2, [r4, #8]
 8006f14:	6962      	ldr	r2, [r4, #20]
 8006f16:	4252      	negs	r2, r2
 8006f18:	61a2      	str	r2, [r4, #24]
 8006f1a:	6922      	ldr	r2, [r4, #16]
 8006f1c:	b942      	cbnz	r2, 8006f30 <__swsetup_r+0xa4>
 8006f1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006f22:	d1c5      	bne.n	8006eb0 <__swsetup_r+0x24>
 8006f24:	bd38      	pop	{r3, r4, r5, pc}
 8006f26:	0799      	lsls	r1, r3, #30
 8006f28:	bf58      	it	pl
 8006f2a:	6962      	ldrpl	r2, [r4, #20]
 8006f2c:	60a2      	str	r2, [r4, #8]
 8006f2e:	e7f4      	b.n	8006f1a <__swsetup_r+0x8e>
 8006f30:	2000      	movs	r0, #0
 8006f32:	e7f7      	b.n	8006f24 <__swsetup_r+0x98>
 8006f34:	20000048 	.word	0x20000048

08006f38 <memset>:
 8006f38:	4402      	add	r2, r0
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d100      	bne.n	8006f42 <memset+0xa>
 8006f40:	4770      	bx	lr
 8006f42:	f803 1b01 	strb.w	r1, [r3], #1
 8006f46:	e7f9      	b.n	8006f3c <memset+0x4>

08006f48 <_localeconv_r>:
 8006f48:	4800      	ldr	r0, [pc, #0]	@ (8006f4c <_localeconv_r+0x4>)
 8006f4a:	4770      	bx	lr
 8006f4c:	20000188 	.word	0x20000188

08006f50 <_close_r>:
 8006f50:	b538      	push	{r3, r4, r5, lr}
 8006f52:	4d06      	ldr	r5, [pc, #24]	@ (8006f6c <_close_r+0x1c>)
 8006f54:	2300      	movs	r3, #0
 8006f56:	4604      	mov	r4, r0
 8006f58:	4608      	mov	r0, r1
 8006f5a:	602b      	str	r3, [r5, #0]
 8006f5c:	f7fa fb05 	bl	800156a <_close>
 8006f60:	1c43      	adds	r3, r0, #1
 8006f62:	d102      	bne.n	8006f6a <_close_r+0x1a>
 8006f64:	682b      	ldr	r3, [r5, #0]
 8006f66:	b103      	cbz	r3, 8006f6a <_close_r+0x1a>
 8006f68:	6023      	str	r3, [r4, #0]
 8006f6a:	bd38      	pop	{r3, r4, r5, pc}
 8006f6c:	20000e14 	.word	0x20000e14

08006f70 <_lseek_r>:
 8006f70:	b538      	push	{r3, r4, r5, lr}
 8006f72:	4d07      	ldr	r5, [pc, #28]	@ (8006f90 <_lseek_r+0x20>)
 8006f74:	4604      	mov	r4, r0
 8006f76:	4608      	mov	r0, r1
 8006f78:	4611      	mov	r1, r2
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	602a      	str	r2, [r5, #0]
 8006f7e:	461a      	mov	r2, r3
 8006f80:	f7fa fb1a 	bl	80015b8 <_lseek>
 8006f84:	1c43      	adds	r3, r0, #1
 8006f86:	d102      	bne.n	8006f8e <_lseek_r+0x1e>
 8006f88:	682b      	ldr	r3, [r5, #0]
 8006f8a:	b103      	cbz	r3, 8006f8e <_lseek_r+0x1e>
 8006f8c:	6023      	str	r3, [r4, #0]
 8006f8e:	bd38      	pop	{r3, r4, r5, pc}
 8006f90:	20000e14 	.word	0x20000e14

08006f94 <_read_r>:
 8006f94:	b538      	push	{r3, r4, r5, lr}
 8006f96:	4d07      	ldr	r5, [pc, #28]	@ (8006fb4 <_read_r+0x20>)
 8006f98:	4604      	mov	r4, r0
 8006f9a:	4608      	mov	r0, r1
 8006f9c:	4611      	mov	r1, r2
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	602a      	str	r2, [r5, #0]
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	f7fa faa8 	bl	80014f8 <_read>
 8006fa8:	1c43      	adds	r3, r0, #1
 8006faa:	d102      	bne.n	8006fb2 <_read_r+0x1e>
 8006fac:	682b      	ldr	r3, [r5, #0]
 8006fae:	b103      	cbz	r3, 8006fb2 <_read_r+0x1e>
 8006fb0:	6023      	str	r3, [r4, #0]
 8006fb2:	bd38      	pop	{r3, r4, r5, pc}
 8006fb4:	20000e14 	.word	0x20000e14

08006fb8 <_write_r>:
 8006fb8:	b538      	push	{r3, r4, r5, lr}
 8006fba:	4d07      	ldr	r5, [pc, #28]	@ (8006fd8 <_write_r+0x20>)
 8006fbc:	4604      	mov	r4, r0
 8006fbe:	4608      	mov	r0, r1
 8006fc0:	4611      	mov	r1, r2
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	602a      	str	r2, [r5, #0]
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	f7fa fab3 	bl	8001532 <_write>
 8006fcc:	1c43      	adds	r3, r0, #1
 8006fce:	d102      	bne.n	8006fd6 <_write_r+0x1e>
 8006fd0:	682b      	ldr	r3, [r5, #0]
 8006fd2:	b103      	cbz	r3, 8006fd6 <_write_r+0x1e>
 8006fd4:	6023      	str	r3, [r4, #0]
 8006fd6:	bd38      	pop	{r3, r4, r5, pc}
 8006fd8:	20000e14 	.word	0x20000e14

08006fdc <__errno>:
 8006fdc:	4b01      	ldr	r3, [pc, #4]	@ (8006fe4 <__errno+0x8>)
 8006fde:	6818      	ldr	r0, [r3, #0]
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	20000048 	.word	0x20000048

08006fe8 <__libc_init_array>:
 8006fe8:	b570      	push	{r4, r5, r6, lr}
 8006fea:	4d0d      	ldr	r5, [pc, #52]	@ (8007020 <__libc_init_array+0x38>)
 8006fec:	4c0d      	ldr	r4, [pc, #52]	@ (8007024 <__libc_init_array+0x3c>)
 8006fee:	1b64      	subs	r4, r4, r5
 8006ff0:	10a4      	asrs	r4, r4, #2
 8006ff2:	2600      	movs	r6, #0
 8006ff4:	42a6      	cmp	r6, r4
 8006ff6:	d109      	bne.n	800700c <__libc_init_array+0x24>
 8006ff8:	4d0b      	ldr	r5, [pc, #44]	@ (8007028 <__libc_init_array+0x40>)
 8006ffa:	4c0c      	ldr	r4, [pc, #48]	@ (800702c <__libc_init_array+0x44>)
 8006ffc:	f003 fc26 	bl	800a84c <_init>
 8007000:	1b64      	subs	r4, r4, r5
 8007002:	10a4      	asrs	r4, r4, #2
 8007004:	2600      	movs	r6, #0
 8007006:	42a6      	cmp	r6, r4
 8007008:	d105      	bne.n	8007016 <__libc_init_array+0x2e>
 800700a:	bd70      	pop	{r4, r5, r6, pc}
 800700c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007010:	4798      	blx	r3
 8007012:	3601      	adds	r6, #1
 8007014:	e7ee      	b.n	8006ff4 <__libc_init_array+0xc>
 8007016:	f855 3b04 	ldr.w	r3, [r5], #4
 800701a:	4798      	blx	r3
 800701c:	3601      	adds	r6, #1
 800701e:	e7f2      	b.n	8007006 <__libc_init_array+0x1e>
 8007020:	0800ad7c 	.word	0x0800ad7c
 8007024:	0800ad7c 	.word	0x0800ad7c
 8007028:	0800ad7c 	.word	0x0800ad7c
 800702c:	0800ad80 	.word	0x0800ad80

08007030 <__retarget_lock_init_recursive>:
 8007030:	4770      	bx	lr

08007032 <__retarget_lock_acquire_recursive>:
 8007032:	4770      	bx	lr

08007034 <__retarget_lock_release_recursive>:
 8007034:	4770      	bx	lr
	...

08007038 <nanf>:
 8007038:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007040 <nanf+0x8>
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	7fc00000 	.word	0x7fc00000

08007044 <__assert_func>:
 8007044:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007046:	4614      	mov	r4, r2
 8007048:	461a      	mov	r2, r3
 800704a:	4b09      	ldr	r3, [pc, #36]	@ (8007070 <__assert_func+0x2c>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4605      	mov	r5, r0
 8007050:	68d8      	ldr	r0, [r3, #12]
 8007052:	b14c      	cbz	r4, 8007068 <__assert_func+0x24>
 8007054:	4b07      	ldr	r3, [pc, #28]	@ (8007074 <__assert_func+0x30>)
 8007056:	9100      	str	r1, [sp, #0]
 8007058:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800705c:	4906      	ldr	r1, [pc, #24]	@ (8007078 <__assert_func+0x34>)
 800705e:	462b      	mov	r3, r5
 8007060:	f002 fdda 	bl	8009c18 <fiprintf>
 8007064:	f002 fec0 	bl	8009de8 <abort>
 8007068:	4b04      	ldr	r3, [pc, #16]	@ (800707c <__assert_func+0x38>)
 800706a:	461c      	mov	r4, r3
 800706c:	e7f3      	b.n	8007056 <__assert_func+0x12>
 800706e:	bf00      	nop
 8007070:	20000048 	.word	0x20000048
 8007074:	0800a994 	.word	0x0800a994
 8007078:	0800a9a1 	.word	0x0800a9a1
 800707c:	0800a9cf 	.word	0x0800a9cf

08007080 <quorem>:
 8007080:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007084:	6903      	ldr	r3, [r0, #16]
 8007086:	690c      	ldr	r4, [r1, #16]
 8007088:	42a3      	cmp	r3, r4
 800708a:	4607      	mov	r7, r0
 800708c:	db7e      	blt.n	800718c <quorem+0x10c>
 800708e:	3c01      	subs	r4, #1
 8007090:	f101 0814 	add.w	r8, r1, #20
 8007094:	00a3      	lsls	r3, r4, #2
 8007096:	f100 0514 	add.w	r5, r0, #20
 800709a:	9300      	str	r3, [sp, #0]
 800709c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070a0:	9301      	str	r3, [sp, #4]
 80070a2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80070a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070aa:	3301      	adds	r3, #1
 80070ac:	429a      	cmp	r2, r3
 80070ae:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80070b2:	fbb2 f6f3 	udiv	r6, r2, r3
 80070b6:	d32e      	bcc.n	8007116 <quorem+0x96>
 80070b8:	f04f 0a00 	mov.w	sl, #0
 80070bc:	46c4      	mov	ip, r8
 80070be:	46ae      	mov	lr, r5
 80070c0:	46d3      	mov	fp, sl
 80070c2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80070c6:	b298      	uxth	r0, r3
 80070c8:	fb06 a000 	mla	r0, r6, r0, sl
 80070cc:	0c02      	lsrs	r2, r0, #16
 80070ce:	0c1b      	lsrs	r3, r3, #16
 80070d0:	fb06 2303 	mla	r3, r6, r3, r2
 80070d4:	f8de 2000 	ldr.w	r2, [lr]
 80070d8:	b280      	uxth	r0, r0
 80070da:	b292      	uxth	r2, r2
 80070dc:	1a12      	subs	r2, r2, r0
 80070de:	445a      	add	r2, fp
 80070e0:	f8de 0000 	ldr.w	r0, [lr]
 80070e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80070ee:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80070f2:	b292      	uxth	r2, r2
 80070f4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80070f8:	45e1      	cmp	r9, ip
 80070fa:	f84e 2b04 	str.w	r2, [lr], #4
 80070fe:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007102:	d2de      	bcs.n	80070c2 <quorem+0x42>
 8007104:	9b00      	ldr	r3, [sp, #0]
 8007106:	58eb      	ldr	r3, [r5, r3]
 8007108:	b92b      	cbnz	r3, 8007116 <quorem+0x96>
 800710a:	9b01      	ldr	r3, [sp, #4]
 800710c:	3b04      	subs	r3, #4
 800710e:	429d      	cmp	r5, r3
 8007110:	461a      	mov	r2, r3
 8007112:	d32f      	bcc.n	8007174 <quorem+0xf4>
 8007114:	613c      	str	r4, [r7, #16]
 8007116:	4638      	mov	r0, r7
 8007118:	f001 f9c6 	bl	80084a8 <__mcmp>
 800711c:	2800      	cmp	r0, #0
 800711e:	db25      	blt.n	800716c <quorem+0xec>
 8007120:	4629      	mov	r1, r5
 8007122:	2000      	movs	r0, #0
 8007124:	f858 2b04 	ldr.w	r2, [r8], #4
 8007128:	f8d1 c000 	ldr.w	ip, [r1]
 800712c:	fa1f fe82 	uxth.w	lr, r2
 8007130:	fa1f f38c 	uxth.w	r3, ip
 8007134:	eba3 030e 	sub.w	r3, r3, lr
 8007138:	4403      	add	r3, r0
 800713a:	0c12      	lsrs	r2, r2, #16
 800713c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007140:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007144:	b29b      	uxth	r3, r3
 8007146:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800714a:	45c1      	cmp	r9, r8
 800714c:	f841 3b04 	str.w	r3, [r1], #4
 8007150:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007154:	d2e6      	bcs.n	8007124 <quorem+0xa4>
 8007156:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800715a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800715e:	b922      	cbnz	r2, 800716a <quorem+0xea>
 8007160:	3b04      	subs	r3, #4
 8007162:	429d      	cmp	r5, r3
 8007164:	461a      	mov	r2, r3
 8007166:	d30b      	bcc.n	8007180 <quorem+0x100>
 8007168:	613c      	str	r4, [r7, #16]
 800716a:	3601      	adds	r6, #1
 800716c:	4630      	mov	r0, r6
 800716e:	b003      	add	sp, #12
 8007170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007174:	6812      	ldr	r2, [r2, #0]
 8007176:	3b04      	subs	r3, #4
 8007178:	2a00      	cmp	r2, #0
 800717a:	d1cb      	bne.n	8007114 <quorem+0x94>
 800717c:	3c01      	subs	r4, #1
 800717e:	e7c6      	b.n	800710e <quorem+0x8e>
 8007180:	6812      	ldr	r2, [r2, #0]
 8007182:	3b04      	subs	r3, #4
 8007184:	2a00      	cmp	r2, #0
 8007186:	d1ef      	bne.n	8007168 <quorem+0xe8>
 8007188:	3c01      	subs	r4, #1
 800718a:	e7ea      	b.n	8007162 <quorem+0xe2>
 800718c:	2000      	movs	r0, #0
 800718e:	e7ee      	b.n	800716e <quorem+0xee>

08007190 <_dtoa_r>:
 8007190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007194:	69c7      	ldr	r7, [r0, #28]
 8007196:	b097      	sub	sp, #92	@ 0x5c
 8007198:	ed8d 0b04 	vstr	d0, [sp, #16]
 800719c:	ec55 4b10 	vmov	r4, r5, d0
 80071a0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80071a2:	9107      	str	r1, [sp, #28]
 80071a4:	4681      	mov	r9, r0
 80071a6:	920c      	str	r2, [sp, #48]	@ 0x30
 80071a8:	9311      	str	r3, [sp, #68]	@ 0x44
 80071aa:	b97f      	cbnz	r7, 80071cc <_dtoa_r+0x3c>
 80071ac:	2010      	movs	r0, #16
 80071ae:	f000 fe09 	bl	8007dc4 <malloc>
 80071b2:	4602      	mov	r2, r0
 80071b4:	f8c9 001c 	str.w	r0, [r9, #28]
 80071b8:	b920      	cbnz	r0, 80071c4 <_dtoa_r+0x34>
 80071ba:	4ba9      	ldr	r3, [pc, #676]	@ (8007460 <_dtoa_r+0x2d0>)
 80071bc:	21ef      	movs	r1, #239	@ 0xef
 80071be:	48a9      	ldr	r0, [pc, #676]	@ (8007464 <_dtoa_r+0x2d4>)
 80071c0:	f7ff ff40 	bl	8007044 <__assert_func>
 80071c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80071c8:	6007      	str	r7, [r0, #0]
 80071ca:	60c7      	str	r7, [r0, #12]
 80071cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80071d0:	6819      	ldr	r1, [r3, #0]
 80071d2:	b159      	cbz	r1, 80071ec <_dtoa_r+0x5c>
 80071d4:	685a      	ldr	r2, [r3, #4]
 80071d6:	604a      	str	r2, [r1, #4]
 80071d8:	2301      	movs	r3, #1
 80071da:	4093      	lsls	r3, r2
 80071dc:	608b      	str	r3, [r1, #8]
 80071de:	4648      	mov	r0, r9
 80071e0:	f000 fee6 	bl	8007fb0 <_Bfree>
 80071e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80071e8:	2200      	movs	r2, #0
 80071ea:	601a      	str	r2, [r3, #0]
 80071ec:	1e2b      	subs	r3, r5, #0
 80071ee:	bfb9      	ittee	lt
 80071f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80071f4:	9305      	strlt	r3, [sp, #20]
 80071f6:	2300      	movge	r3, #0
 80071f8:	6033      	strge	r3, [r6, #0]
 80071fa:	9f05      	ldr	r7, [sp, #20]
 80071fc:	4b9a      	ldr	r3, [pc, #616]	@ (8007468 <_dtoa_r+0x2d8>)
 80071fe:	bfbc      	itt	lt
 8007200:	2201      	movlt	r2, #1
 8007202:	6032      	strlt	r2, [r6, #0]
 8007204:	43bb      	bics	r3, r7
 8007206:	d112      	bne.n	800722e <_dtoa_r+0x9e>
 8007208:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800720a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800720e:	6013      	str	r3, [r2, #0]
 8007210:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007214:	4323      	orrs	r3, r4
 8007216:	f000 855a 	beq.w	8007cce <_dtoa_r+0xb3e>
 800721a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800721c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800747c <_dtoa_r+0x2ec>
 8007220:	2b00      	cmp	r3, #0
 8007222:	f000 855c 	beq.w	8007cde <_dtoa_r+0xb4e>
 8007226:	f10a 0303 	add.w	r3, sl, #3
 800722a:	f000 bd56 	b.w	8007cda <_dtoa_r+0xb4a>
 800722e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007232:	2200      	movs	r2, #0
 8007234:	ec51 0b17 	vmov	r0, r1, d7
 8007238:	2300      	movs	r3, #0
 800723a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800723e:	f7f9 fc6b 	bl	8000b18 <__aeabi_dcmpeq>
 8007242:	4680      	mov	r8, r0
 8007244:	b158      	cbz	r0, 800725e <_dtoa_r+0xce>
 8007246:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007248:	2301      	movs	r3, #1
 800724a:	6013      	str	r3, [r2, #0]
 800724c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800724e:	b113      	cbz	r3, 8007256 <_dtoa_r+0xc6>
 8007250:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007252:	4b86      	ldr	r3, [pc, #536]	@ (800746c <_dtoa_r+0x2dc>)
 8007254:	6013      	str	r3, [r2, #0]
 8007256:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007480 <_dtoa_r+0x2f0>
 800725a:	f000 bd40 	b.w	8007cde <_dtoa_r+0xb4e>
 800725e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007262:	aa14      	add	r2, sp, #80	@ 0x50
 8007264:	a915      	add	r1, sp, #84	@ 0x54
 8007266:	4648      	mov	r0, r9
 8007268:	f001 fa3e 	bl	80086e8 <__d2b>
 800726c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007270:	9002      	str	r0, [sp, #8]
 8007272:	2e00      	cmp	r6, #0
 8007274:	d078      	beq.n	8007368 <_dtoa_r+0x1d8>
 8007276:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007278:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800727c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007280:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007284:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007288:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800728c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007290:	4619      	mov	r1, r3
 8007292:	2200      	movs	r2, #0
 8007294:	4b76      	ldr	r3, [pc, #472]	@ (8007470 <_dtoa_r+0x2e0>)
 8007296:	f7f9 f81f 	bl	80002d8 <__aeabi_dsub>
 800729a:	a36b      	add	r3, pc, #428	@ (adr r3, 8007448 <_dtoa_r+0x2b8>)
 800729c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a0:	f7f9 f9d2 	bl	8000648 <__aeabi_dmul>
 80072a4:	a36a      	add	r3, pc, #424	@ (adr r3, 8007450 <_dtoa_r+0x2c0>)
 80072a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072aa:	f7f9 f817 	bl	80002dc <__adddf3>
 80072ae:	4604      	mov	r4, r0
 80072b0:	4630      	mov	r0, r6
 80072b2:	460d      	mov	r5, r1
 80072b4:	f7f9 f95e 	bl	8000574 <__aeabi_i2d>
 80072b8:	a367      	add	r3, pc, #412	@ (adr r3, 8007458 <_dtoa_r+0x2c8>)
 80072ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072be:	f7f9 f9c3 	bl	8000648 <__aeabi_dmul>
 80072c2:	4602      	mov	r2, r0
 80072c4:	460b      	mov	r3, r1
 80072c6:	4620      	mov	r0, r4
 80072c8:	4629      	mov	r1, r5
 80072ca:	f7f9 f807 	bl	80002dc <__adddf3>
 80072ce:	4604      	mov	r4, r0
 80072d0:	460d      	mov	r5, r1
 80072d2:	f7f9 fc69 	bl	8000ba8 <__aeabi_d2iz>
 80072d6:	2200      	movs	r2, #0
 80072d8:	4607      	mov	r7, r0
 80072da:	2300      	movs	r3, #0
 80072dc:	4620      	mov	r0, r4
 80072de:	4629      	mov	r1, r5
 80072e0:	f7f9 fc24 	bl	8000b2c <__aeabi_dcmplt>
 80072e4:	b140      	cbz	r0, 80072f8 <_dtoa_r+0x168>
 80072e6:	4638      	mov	r0, r7
 80072e8:	f7f9 f944 	bl	8000574 <__aeabi_i2d>
 80072ec:	4622      	mov	r2, r4
 80072ee:	462b      	mov	r3, r5
 80072f0:	f7f9 fc12 	bl	8000b18 <__aeabi_dcmpeq>
 80072f4:	b900      	cbnz	r0, 80072f8 <_dtoa_r+0x168>
 80072f6:	3f01      	subs	r7, #1
 80072f8:	2f16      	cmp	r7, #22
 80072fa:	d852      	bhi.n	80073a2 <_dtoa_r+0x212>
 80072fc:	4b5d      	ldr	r3, [pc, #372]	@ (8007474 <_dtoa_r+0x2e4>)
 80072fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007306:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800730a:	f7f9 fc0f 	bl	8000b2c <__aeabi_dcmplt>
 800730e:	2800      	cmp	r0, #0
 8007310:	d049      	beq.n	80073a6 <_dtoa_r+0x216>
 8007312:	3f01      	subs	r7, #1
 8007314:	2300      	movs	r3, #0
 8007316:	9310      	str	r3, [sp, #64]	@ 0x40
 8007318:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800731a:	1b9b      	subs	r3, r3, r6
 800731c:	1e5a      	subs	r2, r3, #1
 800731e:	bf45      	ittet	mi
 8007320:	f1c3 0301 	rsbmi	r3, r3, #1
 8007324:	9300      	strmi	r3, [sp, #0]
 8007326:	2300      	movpl	r3, #0
 8007328:	2300      	movmi	r3, #0
 800732a:	9206      	str	r2, [sp, #24]
 800732c:	bf54      	ite	pl
 800732e:	9300      	strpl	r3, [sp, #0]
 8007330:	9306      	strmi	r3, [sp, #24]
 8007332:	2f00      	cmp	r7, #0
 8007334:	db39      	blt.n	80073aa <_dtoa_r+0x21a>
 8007336:	9b06      	ldr	r3, [sp, #24]
 8007338:	970d      	str	r7, [sp, #52]	@ 0x34
 800733a:	443b      	add	r3, r7
 800733c:	9306      	str	r3, [sp, #24]
 800733e:	2300      	movs	r3, #0
 8007340:	9308      	str	r3, [sp, #32]
 8007342:	9b07      	ldr	r3, [sp, #28]
 8007344:	2b09      	cmp	r3, #9
 8007346:	d863      	bhi.n	8007410 <_dtoa_r+0x280>
 8007348:	2b05      	cmp	r3, #5
 800734a:	bfc4      	itt	gt
 800734c:	3b04      	subgt	r3, #4
 800734e:	9307      	strgt	r3, [sp, #28]
 8007350:	9b07      	ldr	r3, [sp, #28]
 8007352:	f1a3 0302 	sub.w	r3, r3, #2
 8007356:	bfcc      	ite	gt
 8007358:	2400      	movgt	r4, #0
 800735a:	2401      	movle	r4, #1
 800735c:	2b03      	cmp	r3, #3
 800735e:	d863      	bhi.n	8007428 <_dtoa_r+0x298>
 8007360:	e8df f003 	tbb	[pc, r3]
 8007364:	2b375452 	.word	0x2b375452
 8007368:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800736c:	441e      	add	r6, r3
 800736e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007372:	2b20      	cmp	r3, #32
 8007374:	bfc1      	itttt	gt
 8007376:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800737a:	409f      	lslgt	r7, r3
 800737c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007380:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007384:	bfd6      	itet	le
 8007386:	f1c3 0320 	rsble	r3, r3, #32
 800738a:	ea47 0003 	orrgt.w	r0, r7, r3
 800738e:	fa04 f003 	lslle.w	r0, r4, r3
 8007392:	f7f9 f8df 	bl	8000554 <__aeabi_ui2d>
 8007396:	2201      	movs	r2, #1
 8007398:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800739c:	3e01      	subs	r6, #1
 800739e:	9212      	str	r2, [sp, #72]	@ 0x48
 80073a0:	e776      	b.n	8007290 <_dtoa_r+0x100>
 80073a2:	2301      	movs	r3, #1
 80073a4:	e7b7      	b.n	8007316 <_dtoa_r+0x186>
 80073a6:	9010      	str	r0, [sp, #64]	@ 0x40
 80073a8:	e7b6      	b.n	8007318 <_dtoa_r+0x188>
 80073aa:	9b00      	ldr	r3, [sp, #0]
 80073ac:	1bdb      	subs	r3, r3, r7
 80073ae:	9300      	str	r3, [sp, #0]
 80073b0:	427b      	negs	r3, r7
 80073b2:	9308      	str	r3, [sp, #32]
 80073b4:	2300      	movs	r3, #0
 80073b6:	930d      	str	r3, [sp, #52]	@ 0x34
 80073b8:	e7c3      	b.n	8007342 <_dtoa_r+0x1b2>
 80073ba:	2301      	movs	r3, #1
 80073bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80073be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80073c0:	eb07 0b03 	add.w	fp, r7, r3
 80073c4:	f10b 0301 	add.w	r3, fp, #1
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	9303      	str	r3, [sp, #12]
 80073cc:	bfb8      	it	lt
 80073ce:	2301      	movlt	r3, #1
 80073d0:	e006      	b.n	80073e0 <_dtoa_r+0x250>
 80073d2:	2301      	movs	r3, #1
 80073d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80073d6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80073d8:	2b00      	cmp	r3, #0
 80073da:	dd28      	ble.n	800742e <_dtoa_r+0x29e>
 80073dc:	469b      	mov	fp, r3
 80073de:	9303      	str	r3, [sp, #12]
 80073e0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80073e4:	2100      	movs	r1, #0
 80073e6:	2204      	movs	r2, #4
 80073e8:	f102 0514 	add.w	r5, r2, #20
 80073ec:	429d      	cmp	r5, r3
 80073ee:	d926      	bls.n	800743e <_dtoa_r+0x2ae>
 80073f0:	6041      	str	r1, [r0, #4]
 80073f2:	4648      	mov	r0, r9
 80073f4:	f000 fd9c 	bl	8007f30 <_Balloc>
 80073f8:	4682      	mov	sl, r0
 80073fa:	2800      	cmp	r0, #0
 80073fc:	d142      	bne.n	8007484 <_dtoa_r+0x2f4>
 80073fe:	4b1e      	ldr	r3, [pc, #120]	@ (8007478 <_dtoa_r+0x2e8>)
 8007400:	4602      	mov	r2, r0
 8007402:	f240 11af 	movw	r1, #431	@ 0x1af
 8007406:	e6da      	b.n	80071be <_dtoa_r+0x2e>
 8007408:	2300      	movs	r3, #0
 800740a:	e7e3      	b.n	80073d4 <_dtoa_r+0x244>
 800740c:	2300      	movs	r3, #0
 800740e:	e7d5      	b.n	80073bc <_dtoa_r+0x22c>
 8007410:	2401      	movs	r4, #1
 8007412:	2300      	movs	r3, #0
 8007414:	9307      	str	r3, [sp, #28]
 8007416:	9409      	str	r4, [sp, #36]	@ 0x24
 8007418:	f04f 3bff 	mov.w	fp, #4294967295
 800741c:	2200      	movs	r2, #0
 800741e:	f8cd b00c 	str.w	fp, [sp, #12]
 8007422:	2312      	movs	r3, #18
 8007424:	920c      	str	r2, [sp, #48]	@ 0x30
 8007426:	e7db      	b.n	80073e0 <_dtoa_r+0x250>
 8007428:	2301      	movs	r3, #1
 800742a:	9309      	str	r3, [sp, #36]	@ 0x24
 800742c:	e7f4      	b.n	8007418 <_dtoa_r+0x288>
 800742e:	f04f 0b01 	mov.w	fp, #1
 8007432:	f8cd b00c 	str.w	fp, [sp, #12]
 8007436:	465b      	mov	r3, fp
 8007438:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800743c:	e7d0      	b.n	80073e0 <_dtoa_r+0x250>
 800743e:	3101      	adds	r1, #1
 8007440:	0052      	lsls	r2, r2, #1
 8007442:	e7d1      	b.n	80073e8 <_dtoa_r+0x258>
 8007444:	f3af 8000 	nop.w
 8007448:	636f4361 	.word	0x636f4361
 800744c:	3fd287a7 	.word	0x3fd287a7
 8007450:	8b60c8b3 	.word	0x8b60c8b3
 8007454:	3fc68a28 	.word	0x3fc68a28
 8007458:	509f79fb 	.word	0x509f79fb
 800745c:	3fd34413 	.word	0x3fd34413
 8007460:	0800a8ec 	.word	0x0800a8ec
 8007464:	0800a9dd 	.word	0x0800a9dd
 8007468:	7ff00000 	.word	0x7ff00000
 800746c:	0800a96c 	.word	0x0800a96c
 8007470:	3ff80000 	.word	0x3ff80000
 8007474:	0800ab50 	.word	0x0800ab50
 8007478:	0800aa35 	.word	0x0800aa35
 800747c:	0800a9d9 	.word	0x0800a9d9
 8007480:	0800a96b 	.word	0x0800a96b
 8007484:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007488:	6018      	str	r0, [r3, #0]
 800748a:	9b03      	ldr	r3, [sp, #12]
 800748c:	2b0e      	cmp	r3, #14
 800748e:	f200 80a1 	bhi.w	80075d4 <_dtoa_r+0x444>
 8007492:	2c00      	cmp	r4, #0
 8007494:	f000 809e 	beq.w	80075d4 <_dtoa_r+0x444>
 8007498:	2f00      	cmp	r7, #0
 800749a:	dd33      	ble.n	8007504 <_dtoa_r+0x374>
 800749c:	4b9c      	ldr	r3, [pc, #624]	@ (8007710 <_dtoa_r+0x580>)
 800749e:	f007 020f 	and.w	r2, r7, #15
 80074a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074a6:	ed93 7b00 	vldr	d7, [r3]
 80074aa:	05f8      	lsls	r0, r7, #23
 80074ac:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80074b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80074b4:	d516      	bpl.n	80074e4 <_dtoa_r+0x354>
 80074b6:	4b97      	ldr	r3, [pc, #604]	@ (8007714 <_dtoa_r+0x584>)
 80074b8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80074bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80074c0:	f7f9 f9ec 	bl	800089c <__aeabi_ddiv>
 80074c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074c8:	f004 040f 	and.w	r4, r4, #15
 80074cc:	2603      	movs	r6, #3
 80074ce:	4d91      	ldr	r5, [pc, #580]	@ (8007714 <_dtoa_r+0x584>)
 80074d0:	b954      	cbnz	r4, 80074e8 <_dtoa_r+0x358>
 80074d2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80074d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074da:	f7f9 f9df 	bl	800089c <__aeabi_ddiv>
 80074de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80074e2:	e028      	b.n	8007536 <_dtoa_r+0x3a6>
 80074e4:	2602      	movs	r6, #2
 80074e6:	e7f2      	b.n	80074ce <_dtoa_r+0x33e>
 80074e8:	07e1      	lsls	r1, r4, #31
 80074ea:	d508      	bpl.n	80074fe <_dtoa_r+0x36e>
 80074ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80074f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80074f4:	f7f9 f8a8 	bl	8000648 <__aeabi_dmul>
 80074f8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80074fc:	3601      	adds	r6, #1
 80074fe:	1064      	asrs	r4, r4, #1
 8007500:	3508      	adds	r5, #8
 8007502:	e7e5      	b.n	80074d0 <_dtoa_r+0x340>
 8007504:	f000 80af 	beq.w	8007666 <_dtoa_r+0x4d6>
 8007508:	427c      	negs	r4, r7
 800750a:	4b81      	ldr	r3, [pc, #516]	@ (8007710 <_dtoa_r+0x580>)
 800750c:	4d81      	ldr	r5, [pc, #516]	@ (8007714 <_dtoa_r+0x584>)
 800750e:	f004 020f 	and.w	r2, r4, #15
 8007512:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800751e:	f7f9 f893 	bl	8000648 <__aeabi_dmul>
 8007522:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007526:	1124      	asrs	r4, r4, #4
 8007528:	2300      	movs	r3, #0
 800752a:	2602      	movs	r6, #2
 800752c:	2c00      	cmp	r4, #0
 800752e:	f040 808f 	bne.w	8007650 <_dtoa_r+0x4c0>
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1d3      	bne.n	80074de <_dtoa_r+0x34e>
 8007536:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007538:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800753c:	2b00      	cmp	r3, #0
 800753e:	f000 8094 	beq.w	800766a <_dtoa_r+0x4da>
 8007542:	4b75      	ldr	r3, [pc, #468]	@ (8007718 <_dtoa_r+0x588>)
 8007544:	2200      	movs	r2, #0
 8007546:	4620      	mov	r0, r4
 8007548:	4629      	mov	r1, r5
 800754a:	f7f9 faef 	bl	8000b2c <__aeabi_dcmplt>
 800754e:	2800      	cmp	r0, #0
 8007550:	f000 808b 	beq.w	800766a <_dtoa_r+0x4da>
 8007554:	9b03      	ldr	r3, [sp, #12]
 8007556:	2b00      	cmp	r3, #0
 8007558:	f000 8087 	beq.w	800766a <_dtoa_r+0x4da>
 800755c:	f1bb 0f00 	cmp.w	fp, #0
 8007560:	dd34      	ble.n	80075cc <_dtoa_r+0x43c>
 8007562:	4620      	mov	r0, r4
 8007564:	4b6d      	ldr	r3, [pc, #436]	@ (800771c <_dtoa_r+0x58c>)
 8007566:	2200      	movs	r2, #0
 8007568:	4629      	mov	r1, r5
 800756a:	f7f9 f86d 	bl	8000648 <__aeabi_dmul>
 800756e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007572:	f107 38ff 	add.w	r8, r7, #4294967295
 8007576:	3601      	adds	r6, #1
 8007578:	465c      	mov	r4, fp
 800757a:	4630      	mov	r0, r6
 800757c:	f7f8 fffa 	bl	8000574 <__aeabi_i2d>
 8007580:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007584:	f7f9 f860 	bl	8000648 <__aeabi_dmul>
 8007588:	4b65      	ldr	r3, [pc, #404]	@ (8007720 <_dtoa_r+0x590>)
 800758a:	2200      	movs	r2, #0
 800758c:	f7f8 fea6 	bl	80002dc <__adddf3>
 8007590:	4605      	mov	r5, r0
 8007592:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007596:	2c00      	cmp	r4, #0
 8007598:	d16a      	bne.n	8007670 <_dtoa_r+0x4e0>
 800759a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800759e:	4b61      	ldr	r3, [pc, #388]	@ (8007724 <_dtoa_r+0x594>)
 80075a0:	2200      	movs	r2, #0
 80075a2:	f7f8 fe99 	bl	80002d8 <__aeabi_dsub>
 80075a6:	4602      	mov	r2, r0
 80075a8:	460b      	mov	r3, r1
 80075aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80075ae:	462a      	mov	r2, r5
 80075b0:	4633      	mov	r3, r6
 80075b2:	f7f9 fad9 	bl	8000b68 <__aeabi_dcmpgt>
 80075b6:	2800      	cmp	r0, #0
 80075b8:	f040 8298 	bne.w	8007aec <_dtoa_r+0x95c>
 80075bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075c0:	462a      	mov	r2, r5
 80075c2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80075c6:	f7f9 fab1 	bl	8000b2c <__aeabi_dcmplt>
 80075ca:	bb38      	cbnz	r0, 800761c <_dtoa_r+0x48c>
 80075cc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80075d0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80075d4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	f2c0 8157 	blt.w	800788a <_dtoa_r+0x6fa>
 80075dc:	2f0e      	cmp	r7, #14
 80075de:	f300 8154 	bgt.w	800788a <_dtoa_r+0x6fa>
 80075e2:	4b4b      	ldr	r3, [pc, #300]	@ (8007710 <_dtoa_r+0x580>)
 80075e4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80075e8:	ed93 7b00 	vldr	d7, [r3]
 80075ec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	ed8d 7b00 	vstr	d7, [sp]
 80075f4:	f280 80e5 	bge.w	80077c2 <_dtoa_r+0x632>
 80075f8:	9b03      	ldr	r3, [sp, #12]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	f300 80e1 	bgt.w	80077c2 <_dtoa_r+0x632>
 8007600:	d10c      	bne.n	800761c <_dtoa_r+0x48c>
 8007602:	4b48      	ldr	r3, [pc, #288]	@ (8007724 <_dtoa_r+0x594>)
 8007604:	2200      	movs	r2, #0
 8007606:	ec51 0b17 	vmov	r0, r1, d7
 800760a:	f7f9 f81d 	bl	8000648 <__aeabi_dmul>
 800760e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007612:	f7f9 fa9f 	bl	8000b54 <__aeabi_dcmpge>
 8007616:	2800      	cmp	r0, #0
 8007618:	f000 8266 	beq.w	8007ae8 <_dtoa_r+0x958>
 800761c:	2400      	movs	r4, #0
 800761e:	4625      	mov	r5, r4
 8007620:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007622:	4656      	mov	r6, sl
 8007624:	ea6f 0803 	mvn.w	r8, r3
 8007628:	2700      	movs	r7, #0
 800762a:	4621      	mov	r1, r4
 800762c:	4648      	mov	r0, r9
 800762e:	f000 fcbf 	bl	8007fb0 <_Bfree>
 8007632:	2d00      	cmp	r5, #0
 8007634:	f000 80bd 	beq.w	80077b2 <_dtoa_r+0x622>
 8007638:	b12f      	cbz	r7, 8007646 <_dtoa_r+0x4b6>
 800763a:	42af      	cmp	r7, r5
 800763c:	d003      	beq.n	8007646 <_dtoa_r+0x4b6>
 800763e:	4639      	mov	r1, r7
 8007640:	4648      	mov	r0, r9
 8007642:	f000 fcb5 	bl	8007fb0 <_Bfree>
 8007646:	4629      	mov	r1, r5
 8007648:	4648      	mov	r0, r9
 800764a:	f000 fcb1 	bl	8007fb0 <_Bfree>
 800764e:	e0b0      	b.n	80077b2 <_dtoa_r+0x622>
 8007650:	07e2      	lsls	r2, r4, #31
 8007652:	d505      	bpl.n	8007660 <_dtoa_r+0x4d0>
 8007654:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007658:	f7f8 fff6 	bl	8000648 <__aeabi_dmul>
 800765c:	3601      	adds	r6, #1
 800765e:	2301      	movs	r3, #1
 8007660:	1064      	asrs	r4, r4, #1
 8007662:	3508      	adds	r5, #8
 8007664:	e762      	b.n	800752c <_dtoa_r+0x39c>
 8007666:	2602      	movs	r6, #2
 8007668:	e765      	b.n	8007536 <_dtoa_r+0x3a6>
 800766a:	9c03      	ldr	r4, [sp, #12]
 800766c:	46b8      	mov	r8, r7
 800766e:	e784      	b.n	800757a <_dtoa_r+0x3ea>
 8007670:	4b27      	ldr	r3, [pc, #156]	@ (8007710 <_dtoa_r+0x580>)
 8007672:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007674:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007678:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800767c:	4454      	add	r4, sl
 800767e:	2900      	cmp	r1, #0
 8007680:	d054      	beq.n	800772c <_dtoa_r+0x59c>
 8007682:	4929      	ldr	r1, [pc, #164]	@ (8007728 <_dtoa_r+0x598>)
 8007684:	2000      	movs	r0, #0
 8007686:	f7f9 f909 	bl	800089c <__aeabi_ddiv>
 800768a:	4633      	mov	r3, r6
 800768c:	462a      	mov	r2, r5
 800768e:	f7f8 fe23 	bl	80002d8 <__aeabi_dsub>
 8007692:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007696:	4656      	mov	r6, sl
 8007698:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800769c:	f7f9 fa84 	bl	8000ba8 <__aeabi_d2iz>
 80076a0:	4605      	mov	r5, r0
 80076a2:	f7f8 ff67 	bl	8000574 <__aeabi_i2d>
 80076a6:	4602      	mov	r2, r0
 80076a8:	460b      	mov	r3, r1
 80076aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076ae:	f7f8 fe13 	bl	80002d8 <__aeabi_dsub>
 80076b2:	3530      	adds	r5, #48	@ 0x30
 80076b4:	4602      	mov	r2, r0
 80076b6:	460b      	mov	r3, r1
 80076b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80076bc:	f806 5b01 	strb.w	r5, [r6], #1
 80076c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80076c4:	f7f9 fa32 	bl	8000b2c <__aeabi_dcmplt>
 80076c8:	2800      	cmp	r0, #0
 80076ca:	d172      	bne.n	80077b2 <_dtoa_r+0x622>
 80076cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076d0:	4911      	ldr	r1, [pc, #68]	@ (8007718 <_dtoa_r+0x588>)
 80076d2:	2000      	movs	r0, #0
 80076d4:	f7f8 fe00 	bl	80002d8 <__aeabi_dsub>
 80076d8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80076dc:	f7f9 fa26 	bl	8000b2c <__aeabi_dcmplt>
 80076e0:	2800      	cmp	r0, #0
 80076e2:	f040 80b4 	bne.w	800784e <_dtoa_r+0x6be>
 80076e6:	42a6      	cmp	r6, r4
 80076e8:	f43f af70 	beq.w	80075cc <_dtoa_r+0x43c>
 80076ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80076f0:	4b0a      	ldr	r3, [pc, #40]	@ (800771c <_dtoa_r+0x58c>)
 80076f2:	2200      	movs	r2, #0
 80076f4:	f7f8 ffa8 	bl	8000648 <__aeabi_dmul>
 80076f8:	4b08      	ldr	r3, [pc, #32]	@ (800771c <_dtoa_r+0x58c>)
 80076fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80076fe:	2200      	movs	r2, #0
 8007700:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007704:	f7f8 ffa0 	bl	8000648 <__aeabi_dmul>
 8007708:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800770c:	e7c4      	b.n	8007698 <_dtoa_r+0x508>
 800770e:	bf00      	nop
 8007710:	0800ab50 	.word	0x0800ab50
 8007714:	0800ab28 	.word	0x0800ab28
 8007718:	3ff00000 	.word	0x3ff00000
 800771c:	40240000 	.word	0x40240000
 8007720:	401c0000 	.word	0x401c0000
 8007724:	40140000 	.word	0x40140000
 8007728:	3fe00000 	.word	0x3fe00000
 800772c:	4631      	mov	r1, r6
 800772e:	4628      	mov	r0, r5
 8007730:	f7f8 ff8a 	bl	8000648 <__aeabi_dmul>
 8007734:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007738:	9413      	str	r4, [sp, #76]	@ 0x4c
 800773a:	4656      	mov	r6, sl
 800773c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007740:	f7f9 fa32 	bl	8000ba8 <__aeabi_d2iz>
 8007744:	4605      	mov	r5, r0
 8007746:	f7f8 ff15 	bl	8000574 <__aeabi_i2d>
 800774a:	4602      	mov	r2, r0
 800774c:	460b      	mov	r3, r1
 800774e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007752:	f7f8 fdc1 	bl	80002d8 <__aeabi_dsub>
 8007756:	3530      	adds	r5, #48	@ 0x30
 8007758:	f806 5b01 	strb.w	r5, [r6], #1
 800775c:	4602      	mov	r2, r0
 800775e:	460b      	mov	r3, r1
 8007760:	42a6      	cmp	r6, r4
 8007762:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007766:	f04f 0200 	mov.w	r2, #0
 800776a:	d124      	bne.n	80077b6 <_dtoa_r+0x626>
 800776c:	4baf      	ldr	r3, [pc, #700]	@ (8007a2c <_dtoa_r+0x89c>)
 800776e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007772:	f7f8 fdb3 	bl	80002dc <__adddf3>
 8007776:	4602      	mov	r2, r0
 8007778:	460b      	mov	r3, r1
 800777a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800777e:	f7f9 f9f3 	bl	8000b68 <__aeabi_dcmpgt>
 8007782:	2800      	cmp	r0, #0
 8007784:	d163      	bne.n	800784e <_dtoa_r+0x6be>
 8007786:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800778a:	49a8      	ldr	r1, [pc, #672]	@ (8007a2c <_dtoa_r+0x89c>)
 800778c:	2000      	movs	r0, #0
 800778e:	f7f8 fda3 	bl	80002d8 <__aeabi_dsub>
 8007792:	4602      	mov	r2, r0
 8007794:	460b      	mov	r3, r1
 8007796:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800779a:	f7f9 f9c7 	bl	8000b2c <__aeabi_dcmplt>
 800779e:	2800      	cmp	r0, #0
 80077a0:	f43f af14 	beq.w	80075cc <_dtoa_r+0x43c>
 80077a4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80077a6:	1e73      	subs	r3, r6, #1
 80077a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80077aa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80077ae:	2b30      	cmp	r3, #48	@ 0x30
 80077b0:	d0f8      	beq.n	80077a4 <_dtoa_r+0x614>
 80077b2:	4647      	mov	r7, r8
 80077b4:	e03b      	b.n	800782e <_dtoa_r+0x69e>
 80077b6:	4b9e      	ldr	r3, [pc, #632]	@ (8007a30 <_dtoa_r+0x8a0>)
 80077b8:	f7f8 ff46 	bl	8000648 <__aeabi_dmul>
 80077bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80077c0:	e7bc      	b.n	800773c <_dtoa_r+0x5ac>
 80077c2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80077c6:	4656      	mov	r6, sl
 80077c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077cc:	4620      	mov	r0, r4
 80077ce:	4629      	mov	r1, r5
 80077d0:	f7f9 f864 	bl	800089c <__aeabi_ddiv>
 80077d4:	f7f9 f9e8 	bl	8000ba8 <__aeabi_d2iz>
 80077d8:	4680      	mov	r8, r0
 80077da:	f7f8 fecb 	bl	8000574 <__aeabi_i2d>
 80077de:	e9dd 2300 	ldrd	r2, r3, [sp]
 80077e2:	f7f8 ff31 	bl	8000648 <__aeabi_dmul>
 80077e6:	4602      	mov	r2, r0
 80077e8:	460b      	mov	r3, r1
 80077ea:	4620      	mov	r0, r4
 80077ec:	4629      	mov	r1, r5
 80077ee:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80077f2:	f7f8 fd71 	bl	80002d8 <__aeabi_dsub>
 80077f6:	f806 4b01 	strb.w	r4, [r6], #1
 80077fa:	9d03      	ldr	r5, [sp, #12]
 80077fc:	eba6 040a 	sub.w	r4, r6, sl
 8007800:	42a5      	cmp	r5, r4
 8007802:	4602      	mov	r2, r0
 8007804:	460b      	mov	r3, r1
 8007806:	d133      	bne.n	8007870 <_dtoa_r+0x6e0>
 8007808:	f7f8 fd68 	bl	80002dc <__adddf3>
 800780c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007810:	4604      	mov	r4, r0
 8007812:	460d      	mov	r5, r1
 8007814:	f7f9 f9a8 	bl	8000b68 <__aeabi_dcmpgt>
 8007818:	b9c0      	cbnz	r0, 800784c <_dtoa_r+0x6bc>
 800781a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800781e:	4620      	mov	r0, r4
 8007820:	4629      	mov	r1, r5
 8007822:	f7f9 f979 	bl	8000b18 <__aeabi_dcmpeq>
 8007826:	b110      	cbz	r0, 800782e <_dtoa_r+0x69e>
 8007828:	f018 0f01 	tst.w	r8, #1
 800782c:	d10e      	bne.n	800784c <_dtoa_r+0x6bc>
 800782e:	9902      	ldr	r1, [sp, #8]
 8007830:	4648      	mov	r0, r9
 8007832:	f000 fbbd 	bl	8007fb0 <_Bfree>
 8007836:	2300      	movs	r3, #0
 8007838:	7033      	strb	r3, [r6, #0]
 800783a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800783c:	3701      	adds	r7, #1
 800783e:	601f      	str	r7, [r3, #0]
 8007840:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007842:	2b00      	cmp	r3, #0
 8007844:	f000 824b 	beq.w	8007cde <_dtoa_r+0xb4e>
 8007848:	601e      	str	r6, [r3, #0]
 800784a:	e248      	b.n	8007cde <_dtoa_r+0xb4e>
 800784c:	46b8      	mov	r8, r7
 800784e:	4633      	mov	r3, r6
 8007850:	461e      	mov	r6, r3
 8007852:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007856:	2a39      	cmp	r2, #57	@ 0x39
 8007858:	d106      	bne.n	8007868 <_dtoa_r+0x6d8>
 800785a:	459a      	cmp	sl, r3
 800785c:	d1f8      	bne.n	8007850 <_dtoa_r+0x6c0>
 800785e:	2230      	movs	r2, #48	@ 0x30
 8007860:	f108 0801 	add.w	r8, r8, #1
 8007864:	f88a 2000 	strb.w	r2, [sl]
 8007868:	781a      	ldrb	r2, [r3, #0]
 800786a:	3201      	adds	r2, #1
 800786c:	701a      	strb	r2, [r3, #0]
 800786e:	e7a0      	b.n	80077b2 <_dtoa_r+0x622>
 8007870:	4b6f      	ldr	r3, [pc, #444]	@ (8007a30 <_dtoa_r+0x8a0>)
 8007872:	2200      	movs	r2, #0
 8007874:	f7f8 fee8 	bl	8000648 <__aeabi_dmul>
 8007878:	2200      	movs	r2, #0
 800787a:	2300      	movs	r3, #0
 800787c:	4604      	mov	r4, r0
 800787e:	460d      	mov	r5, r1
 8007880:	f7f9 f94a 	bl	8000b18 <__aeabi_dcmpeq>
 8007884:	2800      	cmp	r0, #0
 8007886:	d09f      	beq.n	80077c8 <_dtoa_r+0x638>
 8007888:	e7d1      	b.n	800782e <_dtoa_r+0x69e>
 800788a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800788c:	2a00      	cmp	r2, #0
 800788e:	f000 80ea 	beq.w	8007a66 <_dtoa_r+0x8d6>
 8007892:	9a07      	ldr	r2, [sp, #28]
 8007894:	2a01      	cmp	r2, #1
 8007896:	f300 80cd 	bgt.w	8007a34 <_dtoa_r+0x8a4>
 800789a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800789c:	2a00      	cmp	r2, #0
 800789e:	f000 80c1 	beq.w	8007a24 <_dtoa_r+0x894>
 80078a2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80078a6:	9c08      	ldr	r4, [sp, #32]
 80078a8:	9e00      	ldr	r6, [sp, #0]
 80078aa:	9a00      	ldr	r2, [sp, #0]
 80078ac:	441a      	add	r2, r3
 80078ae:	9200      	str	r2, [sp, #0]
 80078b0:	9a06      	ldr	r2, [sp, #24]
 80078b2:	2101      	movs	r1, #1
 80078b4:	441a      	add	r2, r3
 80078b6:	4648      	mov	r0, r9
 80078b8:	9206      	str	r2, [sp, #24]
 80078ba:	f000 fc77 	bl	80081ac <__i2b>
 80078be:	4605      	mov	r5, r0
 80078c0:	b166      	cbz	r6, 80078dc <_dtoa_r+0x74c>
 80078c2:	9b06      	ldr	r3, [sp, #24]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	dd09      	ble.n	80078dc <_dtoa_r+0x74c>
 80078c8:	42b3      	cmp	r3, r6
 80078ca:	9a00      	ldr	r2, [sp, #0]
 80078cc:	bfa8      	it	ge
 80078ce:	4633      	movge	r3, r6
 80078d0:	1ad2      	subs	r2, r2, r3
 80078d2:	9200      	str	r2, [sp, #0]
 80078d4:	9a06      	ldr	r2, [sp, #24]
 80078d6:	1af6      	subs	r6, r6, r3
 80078d8:	1ad3      	subs	r3, r2, r3
 80078da:	9306      	str	r3, [sp, #24]
 80078dc:	9b08      	ldr	r3, [sp, #32]
 80078de:	b30b      	cbz	r3, 8007924 <_dtoa_r+0x794>
 80078e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	f000 80c6 	beq.w	8007a74 <_dtoa_r+0x8e4>
 80078e8:	2c00      	cmp	r4, #0
 80078ea:	f000 80c0 	beq.w	8007a6e <_dtoa_r+0x8de>
 80078ee:	4629      	mov	r1, r5
 80078f0:	4622      	mov	r2, r4
 80078f2:	4648      	mov	r0, r9
 80078f4:	f000 fd12 	bl	800831c <__pow5mult>
 80078f8:	9a02      	ldr	r2, [sp, #8]
 80078fa:	4601      	mov	r1, r0
 80078fc:	4605      	mov	r5, r0
 80078fe:	4648      	mov	r0, r9
 8007900:	f000 fc6a 	bl	80081d8 <__multiply>
 8007904:	9902      	ldr	r1, [sp, #8]
 8007906:	4680      	mov	r8, r0
 8007908:	4648      	mov	r0, r9
 800790a:	f000 fb51 	bl	8007fb0 <_Bfree>
 800790e:	9b08      	ldr	r3, [sp, #32]
 8007910:	1b1b      	subs	r3, r3, r4
 8007912:	9308      	str	r3, [sp, #32]
 8007914:	f000 80b1 	beq.w	8007a7a <_dtoa_r+0x8ea>
 8007918:	9a08      	ldr	r2, [sp, #32]
 800791a:	4641      	mov	r1, r8
 800791c:	4648      	mov	r0, r9
 800791e:	f000 fcfd 	bl	800831c <__pow5mult>
 8007922:	9002      	str	r0, [sp, #8]
 8007924:	2101      	movs	r1, #1
 8007926:	4648      	mov	r0, r9
 8007928:	f000 fc40 	bl	80081ac <__i2b>
 800792c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800792e:	4604      	mov	r4, r0
 8007930:	2b00      	cmp	r3, #0
 8007932:	f000 81d8 	beq.w	8007ce6 <_dtoa_r+0xb56>
 8007936:	461a      	mov	r2, r3
 8007938:	4601      	mov	r1, r0
 800793a:	4648      	mov	r0, r9
 800793c:	f000 fcee 	bl	800831c <__pow5mult>
 8007940:	9b07      	ldr	r3, [sp, #28]
 8007942:	2b01      	cmp	r3, #1
 8007944:	4604      	mov	r4, r0
 8007946:	f300 809f 	bgt.w	8007a88 <_dtoa_r+0x8f8>
 800794a:	9b04      	ldr	r3, [sp, #16]
 800794c:	2b00      	cmp	r3, #0
 800794e:	f040 8097 	bne.w	8007a80 <_dtoa_r+0x8f0>
 8007952:	9b05      	ldr	r3, [sp, #20]
 8007954:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007958:	2b00      	cmp	r3, #0
 800795a:	f040 8093 	bne.w	8007a84 <_dtoa_r+0x8f4>
 800795e:	9b05      	ldr	r3, [sp, #20]
 8007960:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007964:	0d1b      	lsrs	r3, r3, #20
 8007966:	051b      	lsls	r3, r3, #20
 8007968:	b133      	cbz	r3, 8007978 <_dtoa_r+0x7e8>
 800796a:	9b00      	ldr	r3, [sp, #0]
 800796c:	3301      	adds	r3, #1
 800796e:	9300      	str	r3, [sp, #0]
 8007970:	9b06      	ldr	r3, [sp, #24]
 8007972:	3301      	adds	r3, #1
 8007974:	9306      	str	r3, [sp, #24]
 8007976:	2301      	movs	r3, #1
 8007978:	9308      	str	r3, [sp, #32]
 800797a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800797c:	2b00      	cmp	r3, #0
 800797e:	f000 81b8 	beq.w	8007cf2 <_dtoa_r+0xb62>
 8007982:	6923      	ldr	r3, [r4, #16]
 8007984:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007988:	6918      	ldr	r0, [r3, #16]
 800798a:	f000 fbc3 	bl	8008114 <__hi0bits>
 800798e:	f1c0 0020 	rsb	r0, r0, #32
 8007992:	9b06      	ldr	r3, [sp, #24]
 8007994:	4418      	add	r0, r3
 8007996:	f010 001f 	ands.w	r0, r0, #31
 800799a:	f000 8082 	beq.w	8007aa2 <_dtoa_r+0x912>
 800799e:	f1c0 0320 	rsb	r3, r0, #32
 80079a2:	2b04      	cmp	r3, #4
 80079a4:	dd73      	ble.n	8007a8e <_dtoa_r+0x8fe>
 80079a6:	9b00      	ldr	r3, [sp, #0]
 80079a8:	f1c0 001c 	rsb	r0, r0, #28
 80079ac:	4403      	add	r3, r0
 80079ae:	9300      	str	r3, [sp, #0]
 80079b0:	9b06      	ldr	r3, [sp, #24]
 80079b2:	4403      	add	r3, r0
 80079b4:	4406      	add	r6, r0
 80079b6:	9306      	str	r3, [sp, #24]
 80079b8:	9b00      	ldr	r3, [sp, #0]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	dd05      	ble.n	80079ca <_dtoa_r+0x83a>
 80079be:	9902      	ldr	r1, [sp, #8]
 80079c0:	461a      	mov	r2, r3
 80079c2:	4648      	mov	r0, r9
 80079c4:	f000 fd04 	bl	80083d0 <__lshift>
 80079c8:	9002      	str	r0, [sp, #8]
 80079ca:	9b06      	ldr	r3, [sp, #24]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	dd05      	ble.n	80079dc <_dtoa_r+0x84c>
 80079d0:	4621      	mov	r1, r4
 80079d2:	461a      	mov	r2, r3
 80079d4:	4648      	mov	r0, r9
 80079d6:	f000 fcfb 	bl	80083d0 <__lshift>
 80079da:	4604      	mov	r4, r0
 80079dc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d061      	beq.n	8007aa6 <_dtoa_r+0x916>
 80079e2:	9802      	ldr	r0, [sp, #8]
 80079e4:	4621      	mov	r1, r4
 80079e6:	f000 fd5f 	bl	80084a8 <__mcmp>
 80079ea:	2800      	cmp	r0, #0
 80079ec:	da5b      	bge.n	8007aa6 <_dtoa_r+0x916>
 80079ee:	2300      	movs	r3, #0
 80079f0:	9902      	ldr	r1, [sp, #8]
 80079f2:	220a      	movs	r2, #10
 80079f4:	4648      	mov	r0, r9
 80079f6:	f000 fafd 	bl	8007ff4 <__multadd>
 80079fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079fc:	9002      	str	r0, [sp, #8]
 80079fe:	f107 38ff 	add.w	r8, r7, #4294967295
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	f000 8177 	beq.w	8007cf6 <_dtoa_r+0xb66>
 8007a08:	4629      	mov	r1, r5
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	220a      	movs	r2, #10
 8007a0e:	4648      	mov	r0, r9
 8007a10:	f000 faf0 	bl	8007ff4 <__multadd>
 8007a14:	f1bb 0f00 	cmp.w	fp, #0
 8007a18:	4605      	mov	r5, r0
 8007a1a:	dc6f      	bgt.n	8007afc <_dtoa_r+0x96c>
 8007a1c:	9b07      	ldr	r3, [sp, #28]
 8007a1e:	2b02      	cmp	r3, #2
 8007a20:	dc49      	bgt.n	8007ab6 <_dtoa_r+0x926>
 8007a22:	e06b      	b.n	8007afc <_dtoa_r+0x96c>
 8007a24:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007a26:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007a2a:	e73c      	b.n	80078a6 <_dtoa_r+0x716>
 8007a2c:	3fe00000 	.word	0x3fe00000
 8007a30:	40240000 	.word	0x40240000
 8007a34:	9b03      	ldr	r3, [sp, #12]
 8007a36:	1e5c      	subs	r4, r3, #1
 8007a38:	9b08      	ldr	r3, [sp, #32]
 8007a3a:	42a3      	cmp	r3, r4
 8007a3c:	db09      	blt.n	8007a52 <_dtoa_r+0x8c2>
 8007a3e:	1b1c      	subs	r4, r3, r4
 8007a40:	9b03      	ldr	r3, [sp, #12]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	f6bf af30 	bge.w	80078a8 <_dtoa_r+0x718>
 8007a48:	9b00      	ldr	r3, [sp, #0]
 8007a4a:	9a03      	ldr	r2, [sp, #12]
 8007a4c:	1a9e      	subs	r6, r3, r2
 8007a4e:	2300      	movs	r3, #0
 8007a50:	e72b      	b.n	80078aa <_dtoa_r+0x71a>
 8007a52:	9b08      	ldr	r3, [sp, #32]
 8007a54:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007a56:	9408      	str	r4, [sp, #32]
 8007a58:	1ae3      	subs	r3, r4, r3
 8007a5a:	441a      	add	r2, r3
 8007a5c:	9e00      	ldr	r6, [sp, #0]
 8007a5e:	9b03      	ldr	r3, [sp, #12]
 8007a60:	920d      	str	r2, [sp, #52]	@ 0x34
 8007a62:	2400      	movs	r4, #0
 8007a64:	e721      	b.n	80078aa <_dtoa_r+0x71a>
 8007a66:	9c08      	ldr	r4, [sp, #32]
 8007a68:	9e00      	ldr	r6, [sp, #0]
 8007a6a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8007a6c:	e728      	b.n	80078c0 <_dtoa_r+0x730>
 8007a6e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007a72:	e751      	b.n	8007918 <_dtoa_r+0x788>
 8007a74:	9a08      	ldr	r2, [sp, #32]
 8007a76:	9902      	ldr	r1, [sp, #8]
 8007a78:	e750      	b.n	800791c <_dtoa_r+0x78c>
 8007a7a:	f8cd 8008 	str.w	r8, [sp, #8]
 8007a7e:	e751      	b.n	8007924 <_dtoa_r+0x794>
 8007a80:	2300      	movs	r3, #0
 8007a82:	e779      	b.n	8007978 <_dtoa_r+0x7e8>
 8007a84:	9b04      	ldr	r3, [sp, #16]
 8007a86:	e777      	b.n	8007978 <_dtoa_r+0x7e8>
 8007a88:	2300      	movs	r3, #0
 8007a8a:	9308      	str	r3, [sp, #32]
 8007a8c:	e779      	b.n	8007982 <_dtoa_r+0x7f2>
 8007a8e:	d093      	beq.n	80079b8 <_dtoa_r+0x828>
 8007a90:	9a00      	ldr	r2, [sp, #0]
 8007a92:	331c      	adds	r3, #28
 8007a94:	441a      	add	r2, r3
 8007a96:	9200      	str	r2, [sp, #0]
 8007a98:	9a06      	ldr	r2, [sp, #24]
 8007a9a:	441a      	add	r2, r3
 8007a9c:	441e      	add	r6, r3
 8007a9e:	9206      	str	r2, [sp, #24]
 8007aa0:	e78a      	b.n	80079b8 <_dtoa_r+0x828>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	e7f4      	b.n	8007a90 <_dtoa_r+0x900>
 8007aa6:	9b03      	ldr	r3, [sp, #12]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	46b8      	mov	r8, r7
 8007aac:	dc20      	bgt.n	8007af0 <_dtoa_r+0x960>
 8007aae:	469b      	mov	fp, r3
 8007ab0:	9b07      	ldr	r3, [sp, #28]
 8007ab2:	2b02      	cmp	r3, #2
 8007ab4:	dd1e      	ble.n	8007af4 <_dtoa_r+0x964>
 8007ab6:	f1bb 0f00 	cmp.w	fp, #0
 8007aba:	f47f adb1 	bne.w	8007620 <_dtoa_r+0x490>
 8007abe:	4621      	mov	r1, r4
 8007ac0:	465b      	mov	r3, fp
 8007ac2:	2205      	movs	r2, #5
 8007ac4:	4648      	mov	r0, r9
 8007ac6:	f000 fa95 	bl	8007ff4 <__multadd>
 8007aca:	4601      	mov	r1, r0
 8007acc:	4604      	mov	r4, r0
 8007ace:	9802      	ldr	r0, [sp, #8]
 8007ad0:	f000 fcea 	bl	80084a8 <__mcmp>
 8007ad4:	2800      	cmp	r0, #0
 8007ad6:	f77f ada3 	ble.w	8007620 <_dtoa_r+0x490>
 8007ada:	4656      	mov	r6, sl
 8007adc:	2331      	movs	r3, #49	@ 0x31
 8007ade:	f806 3b01 	strb.w	r3, [r6], #1
 8007ae2:	f108 0801 	add.w	r8, r8, #1
 8007ae6:	e59f      	b.n	8007628 <_dtoa_r+0x498>
 8007ae8:	9c03      	ldr	r4, [sp, #12]
 8007aea:	46b8      	mov	r8, r7
 8007aec:	4625      	mov	r5, r4
 8007aee:	e7f4      	b.n	8007ada <_dtoa_r+0x94a>
 8007af0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007af4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	f000 8101 	beq.w	8007cfe <_dtoa_r+0xb6e>
 8007afc:	2e00      	cmp	r6, #0
 8007afe:	dd05      	ble.n	8007b0c <_dtoa_r+0x97c>
 8007b00:	4629      	mov	r1, r5
 8007b02:	4632      	mov	r2, r6
 8007b04:	4648      	mov	r0, r9
 8007b06:	f000 fc63 	bl	80083d0 <__lshift>
 8007b0a:	4605      	mov	r5, r0
 8007b0c:	9b08      	ldr	r3, [sp, #32]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d05c      	beq.n	8007bcc <_dtoa_r+0xa3c>
 8007b12:	6869      	ldr	r1, [r5, #4]
 8007b14:	4648      	mov	r0, r9
 8007b16:	f000 fa0b 	bl	8007f30 <_Balloc>
 8007b1a:	4606      	mov	r6, r0
 8007b1c:	b928      	cbnz	r0, 8007b2a <_dtoa_r+0x99a>
 8007b1e:	4b82      	ldr	r3, [pc, #520]	@ (8007d28 <_dtoa_r+0xb98>)
 8007b20:	4602      	mov	r2, r0
 8007b22:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007b26:	f7ff bb4a 	b.w	80071be <_dtoa_r+0x2e>
 8007b2a:	692a      	ldr	r2, [r5, #16]
 8007b2c:	3202      	adds	r2, #2
 8007b2e:	0092      	lsls	r2, r2, #2
 8007b30:	f105 010c 	add.w	r1, r5, #12
 8007b34:	300c      	adds	r0, #12
 8007b36:	f002 f941 	bl	8009dbc <memcpy>
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	4631      	mov	r1, r6
 8007b3e:	4648      	mov	r0, r9
 8007b40:	f000 fc46 	bl	80083d0 <__lshift>
 8007b44:	f10a 0301 	add.w	r3, sl, #1
 8007b48:	9300      	str	r3, [sp, #0]
 8007b4a:	eb0a 030b 	add.w	r3, sl, fp
 8007b4e:	9308      	str	r3, [sp, #32]
 8007b50:	9b04      	ldr	r3, [sp, #16]
 8007b52:	f003 0301 	and.w	r3, r3, #1
 8007b56:	462f      	mov	r7, r5
 8007b58:	9306      	str	r3, [sp, #24]
 8007b5a:	4605      	mov	r5, r0
 8007b5c:	9b00      	ldr	r3, [sp, #0]
 8007b5e:	9802      	ldr	r0, [sp, #8]
 8007b60:	4621      	mov	r1, r4
 8007b62:	f103 3bff 	add.w	fp, r3, #4294967295
 8007b66:	f7ff fa8b 	bl	8007080 <quorem>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	3330      	adds	r3, #48	@ 0x30
 8007b6e:	9003      	str	r0, [sp, #12]
 8007b70:	4639      	mov	r1, r7
 8007b72:	9802      	ldr	r0, [sp, #8]
 8007b74:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b76:	f000 fc97 	bl	80084a8 <__mcmp>
 8007b7a:	462a      	mov	r2, r5
 8007b7c:	9004      	str	r0, [sp, #16]
 8007b7e:	4621      	mov	r1, r4
 8007b80:	4648      	mov	r0, r9
 8007b82:	f000 fcad 	bl	80084e0 <__mdiff>
 8007b86:	68c2      	ldr	r2, [r0, #12]
 8007b88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b8a:	4606      	mov	r6, r0
 8007b8c:	bb02      	cbnz	r2, 8007bd0 <_dtoa_r+0xa40>
 8007b8e:	4601      	mov	r1, r0
 8007b90:	9802      	ldr	r0, [sp, #8]
 8007b92:	f000 fc89 	bl	80084a8 <__mcmp>
 8007b96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b98:	4602      	mov	r2, r0
 8007b9a:	4631      	mov	r1, r6
 8007b9c:	4648      	mov	r0, r9
 8007b9e:	920c      	str	r2, [sp, #48]	@ 0x30
 8007ba0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ba2:	f000 fa05 	bl	8007fb0 <_Bfree>
 8007ba6:	9b07      	ldr	r3, [sp, #28]
 8007ba8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007baa:	9e00      	ldr	r6, [sp, #0]
 8007bac:	ea42 0103 	orr.w	r1, r2, r3
 8007bb0:	9b06      	ldr	r3, [sp, #24]
 8007bb2:	4319      	orrs	r1, r3
 8007bb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bb6:	d10d      	bne.n	8007bd4 <_dtoa_r+0xa44>
 8007bb8:	2b39      	cmp	r3, #57	@ 0x39
 8007bba:	d027      	beq.n	8007c0c <_dtoa_r+0xa7c>
 8007bbc:	9a04      	ldr	r2, [sp, #16]
 8007bbe:	2a00      	cmp	r2, #0
 8007bc0:	dd01      	ble.n	8007bc6 <_dtoa_r+0xa36>
 8007bc2:	9b03      	ldr	r3, [sp, #12]
 8007bc4:	3331      	adds	r3, #49	@ 0x31
 8007bc6:	f88b 3000 	strb.w	r3, [fp]
 8007bca:	e52e      	b.n	800762a <_dtoa_r+0x49a>
 8007bcc:	4628      	mov	r0, r5
 8007bce:	e7b9      	b.n	8007b44 <_dtoa_r+0x9b4>
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	e7e2      	b.n	8007b9a <_dtoa_r+0xa0a>
 8007bd4:	9904      	ldr	r1, [sp, #16]
 8007bd6:	2900      	cmp	r1, #0
 8007bd8:	db04      	blt.n	8007be4 <_dtoa_r+0xa54>
 8007bda:	9807      	ldr	r0, [sp, #28]
 8007bdc:	4301      	orrs	r1, r0
 8007bde:	9806      	ldr	r0, [sp, #24]
 8007be0:	4301      	orrs	r1, r0
 8007be2:	d120      	bne.n	8007c26 <_dtoa_r+0xa96>
 8007be4:	2a00      	cmp	r2, #0
 8007be6:	ddee      	ble.n	8007bc6 <_dtoa_r+0xa36>
 8007be8:	9902      	ldr	r1, [sp, #8]
 8007bea:	9300      	str	r3, [sp, #0]
 8007bec:	2201      	movs	r2, #1
 8007bee:	4648      	mov	r0, r9
 8007bf0:	f000 fbee 	bl	80083d0 <__lshift>
 8007bf4:	4621      	mov	r1, r4
 8007bf6:	9002      	str	r0, [sp, #8]
 8007bf8:	f000 fc56 	bl	80084a8 <__mcmp>
 8007bfc:	2800      	cmp	r0, #0
 8007bfe:	9b00      	ldr	r3, [sp, #0]
 8007c00:	dc02      	bgt.n	8007c08 <_dtoa_r+0xa78>
 8007c02:	d1e0      	bne.n	8007bc6 <_dtoa_r+0xa36>
 8007c04:	07da      	lsls	r2, r3, #31
 8007c06:	d5de      	bpl.n	8007bc6 <_dtoa_r+0xa36>
 8007c08:	2b39      	cmp	r3, #57	@ 0x39
 8007c0a:	d1da      	bne.n	8007bc2 <_dtoa_r+0xa32>
 8007c0c:	2339      	movs	r3, #57	@ 0x39
 8007c0e:	f88b 3000 	strb.w	r3, [fp]
 8007c12:	4633      	mov	r3, r6
 8007c14:	461e      	mov	r6, r3
 8007c16:	3b01      	subs	r3, #1
 8007c18:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007c1c:	2a39      	cmp	r2, #57	@ 0x39
 8007c1e:	d04e      	beq.n	8007cbe <_dtoa_r+0xb2e>
 8007c20:	3201      	adds	r2, #1
 8007c22:	701a      	strb	r2, [r3, #0]
 8007c24:	e501      	b.n	800762a <_dtoa_r+0x49a>
 8007c26:	2a00      	cmp	r2, #0
 8007c28:	dd03      	ble.n	8007c32 <_dtoa_r+0xaa2>
 8007c2a:	2b39      	cmp	r3, #57	@ 0x39
 8007c2c:	d0ee      	beq.n	8007c0c <_dtoa_r+0xa7c>
 8007c2e:	3301      	adds	r3, #1
 8007c30:	e7c9      	b.n	8007bc6 <_dtoa_r+0xa36>
 8007c32:	9a00      	ldr	r2, [sp, #0]
 8007c34:	9908      	ldr	r1, [sp, #32]
 8007c36:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007c3a:	428a      	cmp	r2, r1
 8007c3c:	d028      	beq.n	8007c90 <_dtoa_r+0xb00>
 8007c3e:	9902      	ldr	r1, [sp, #8]
 8007c40:	2300      	movs	r3, #0
 8007c42:	220a      	movs	r2, #10
 8007c44:	4648      	mov	r0, r9
 8007c46:	f000 f9d5 	bl	8007ff4 <__multadd>
 8007c4a:	42af      	cmp	r7, r5
 8007c4c:	9002      	str	r0, [sp, #8]
 8007c4e:	f04f 0300 	mov.w	r3, #0
 8007c52:	f04f 020a 	mov.w	r2, #10
 8007c56:	4639      	mov	r1, r7
 8007c58:	4648      	mov	r0, r9
 8007c5a:	d107      	bne.n	8007c6c <_dtoa_r+0xadc>
 8007c5c:	f000 f9ca 	bl	8007ff4 <__multadd>
 8007c60:	4607      	mov	r7, r0
 8007c62:	4605      	mov	r5, r0
 8007c64:	9b00      	ldr	r3, [sp, #0]
 8007c66:	3301      	adds	r3, #1
 8007c68:	9300      	str	r3, [sp, #0]
 8007c6a:	e777      	b.n	8007b5c <_dtoa_r+0x9cc>
 8007c6c:	f000 f9c2 	bl	8007ff4 <__multadd>
 8007c70:	4629      	mov	r1, r5
 8007c72:	4607      	mov	r7, r0
 8007c74:	2300      	movs	r3, #0
 8007c76:	220a      	movs	r2, #10
 8007c78:	4648      	mov	r0, r9
 8007c7a:	f000 f9bb 	bl	8007ff4 <__multadd>
 8007c7e:	4605      	mov	r5, r0
 8007c80:	e7f0      	b.n	8007c64 <_dtoa_r+0xad4>
 8007c82:	f1bb 0f00 	cmp.w	fp, #0
 8007c86:	bfcc      	ite	gt
 8007c88:	465e      	movgt	r6, fp
 8007c8a:	2601      	movle	r6, #1
 8007c8c:	4456      	add	r6, sl
 8007c8e:	2700      	movs	r7, #0
 8007c90:	9902      	ldr	r1, [sp, #8]
 8007c92:	9300      	str	r3, [sp, #0]
 8007c94:	2201      	movs	r2, #1
 8007c96:	4648      	mov	r0, r9
 8007c98:	f000 fb9a 	bl	80083d0 <__lshift>
 8007c9c:	4621      	mov	r1, r4
 8007c9e:	9002      	str	r0, [sp, #8]
 8007ca0:	f000 fc02 	bl	80084a8 <__mcmp>
 8007ca4:	2800      	cmp	r0, #0
 8007ca6:	dcb4      	bgt.n	8007c12 <_dtoa_r+0xa82>
 8007ca8:	d102      	bne.n	8007cb0 <_dtoa_r+0xb20>
 8007caa:	9b00      	ldr	r3, [sp, #0]
 8007cac:	07db      	lsls	r3, r3, #31
 8007cae:	d4b0      	bmi.n	8007c12 <_dtoa_r+0xa82>
 8007cb0:	4633      	mov	r3, r6
 8007cb2:	461e      	mov	r6, r3
 8007cb4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007cb8:	2a30      	cmp	r2, #48	@ 0x30
 8007cba:	d0fa      	beq.n	8007cb2 <_dtoa_r+0xb22>
 8007cbc:	e4b5      	b.n	800762a <_dtoa_r+0x49a>
 8007cbe:	459a      	cmp	sl, r3
 8007cc0:	d1a8      	bne.n	8007c14 <_dtoa_r+0xa84>
 8007cc2:	2331      	movs	r3, #49	@ 0x31
 8007cc4:	f108 0801 	add.w	r8, r8, #1
 8007cc8:	f88a 3000 	strb.w	r3, [sl]
 8007ccc:	e4ad      	b.n	800762a <_dtoa_r+0x49a>
 8007cce:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007cd0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007d2c <_dtoa_r+0xb9c>
 8007cd4:	b11b      	cbz	r3, 8007cde <_dtoa_r+0xb4e>
 8007cd6:	f10a 0308 	add.w	r3, sl, #8
 8007cda:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007cdc:	6013      	str	r3, [r2, #0]
 8007cde:	4650      	mov	r0, sl
 8007ce0:	b017      	add	sp, #92	@ 0x5c
 8007ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ce6:	9b07      	ldr	r3, [sp, #28]
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	f77f ae2e 	ble.w	800794a <_dtoa_r+0x7ba>
 8007cee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007cf0:	9308      	str	r3, [sp, #32]
 8007cf2:	2001      	movs	r0, #1
 8007cf4:	e64d      	b.n	8007992 <_dtoa_r+0x802>
 8007cf6:	f1bb 0f00 	cmp.w	fp, #0
 8007cfa:	f77f aed9 	ble.w	8007ab0 <_dtoa_r+0x920>
 8007cfe:	4656      	mov	r6, sl
 8007d00:	9802      	ldr	r0, [sp, #8]
 8007d02:	4621      	mov	r1, r4
 8007d04:	f7ff f9bc 	bl	8007080 <quorem>
 8007d08:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007d0c:	f806 3b01 	strb.w	r3, [r6], #1
 8007d10:	eba6 020a 	sub.w	r2, r6, sl
 8007d14:	4593      	cmp	fp, r2
 8007d16:	ddb4      	ble.n	8007c82 <_dtoa_r+0xaf2>
 8007d18:	9902      	ldr	r1, [sp, #8]
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	220a      	movs	r2, #10
 8007d1e:	4648      	mov	r0, r9
 8007d20:	f000 f968 	bl	8007ff4 <__multadd>
 8007d24:	9002      	str	r0, [sp, #8]
 8007d26:	e7eb      	b.n	8007d00 <_dtoa_r+0xb70>
 8007d28:	0800aa35 	.word	0x0800aa35
 8007d2c:	0800a9d0 	.word	0x0800a9d0

08007d30 <_free_r>:
 8007d30:	b538      	push	{r3, r4, r5, lr}
 8007d32:	4605      	mov	r5, r0
 8007d34:	2900      	cmp	r1, #0
 8007d36:	d041      	beq.n	8007dbc <_free_r+0x8c>
 8007d38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d3c:	1f0c      	subs	r4, r1, #4
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	bfb8      	it	lt
 8007d42:	18e4      	addlt	r4, r4, r3
 8007d44:	f000 f8e8 	bl	8007f18 <__malloc_lock>
 8007d48:	4a1d      	ldr	r2, [pc, #116]	@ (8007dc0 <_free_r+0x90>)
 8007d4a:	6813      	ldr	r3, [r2, #0]
 8007d4c:	b933      	cbnz	r3, 8007d5c <_free_r+0x2c>
 8007d4e:	6063      	str	r3, [r4, #4]
 8007d50:	6014      	str	r4, [r2, #0]
 8007d52:	4628      	mov	r0, r5
 8007d54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d58:	f000 b8e4 	b.w	8007f24 <__malloc_unlock>
 8007d5c:	42a3      	cmp	r3, r4
 8007d5e:	d908      	bls.n	8007d72 <_free_r+0x42>
 8007d60:	6820      	ldr	r0, [r4, #0]
 8007d62:	1821      	adds	r1, r4, r0
 8007d64:	428b      	cmp	r3, r1
 8007d66:	bf01      	itttt	eq
 8007d68:	6819      	ldreq	r1, [r3, #0]
 8007d6a:	685b      	ldreq	r3, [r3, #4]
 8007d6c:	1809      	addeq	r1, r1, r0
 8007d6e:	6021      	streq	r1, [r4, #0]
 8007d70:	e7ed      	b.n	8007d4e <_free_r+0x1e>
 8007d72:	461a      	mov	r2, r3
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	b10b      	cbz	r3, 8007d7c <_free_r+0x4c>
 8007d78:	42a3      	cmp	r3, r4
 8007d7a:	d9fa      	bls.n	8007d72 <_free_r+0x42>
 8007d7c:	6811      	ldr	r1, [r2, #0]
 8007d7e:	1850      	adds	r0, r2, r1
 8007d80:	42a0      	cmp	r0, r4
 8007d82:	d10b      	bne.n	8007d9c <_free_r+0x6c>
 8007d84:	6820      	ldr	r0, [r4, #0]
 8007d86:	4401      	add	r1, r0
 8007d88:	1850      	adds	r0, r2, r1
 8007d8a:	4283      	cmp	r3, r0
 8007d8c:	6011      	str	r1, [r2, #0]
 8007d8e:	d1e0      	bne.n	8007d52 <_free_r+0x22>
 8007d90:	6818      	ldr	r0, [r3, #0]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	6053      	str	r3, [r2, #4]
 8007d96:	4408      	add	r0, r1
 8007d98:	6010      	str	r0, [r2, #0]
 8007d9a:	e7da      	b.n	8007d52 <_free_r+0x22>
 8007d9c:	d902      	bls.n	8007da4 <_free_r+0x74>
 8007d9e:	230c      	movs	r3, #12
 8007da0:	602b      	str	r3, [r5, #0]
 8007da2:	e7d6      	b.n	8007d52 <_free_r+0x22>
 8007da4:	6820      	ldr	r0, [r4, #0]
 8007da6:	1821      	adds	r1, r4, r0
 8007da8:	428b      	cmp	r3, r1
 8007daa:	bf04      	itt	eq
 8007dac:	6819      	ldreq	r1, [r3, #0]
 8007dae:	685b      	ldreq	r3, [r3, #4]
 8007db0:	6063      	str	r3, [r4, #4]
 8007db2:	bf04      	itt	eq
 8007db4:	1809      	addeq	r1, r1, r0
 8007db6:	6021      	streq	r1, [r4, #0]
 8007db8:	6054      	str	r4, [r2, #4]
 8007dba:	e7ca      	b.n	8007d52 <_free_r+0x22>
 8007dbc:	bd38      	pop	{r3, r4, r5, pc}
 8007dbe:	bf00      	nop
 8007dc0:	20000e20 	.word	0x20000e20

08007dc4 <malloc>:
 8007dc4:	4b02      	ldr	r3, [pc, #8]	@ (8007dd0 <malloc+0xc>)
 8007dc6:	4601      	mov	r1, r0
 8007dc8:	6818      	ldr	r0, [r3, #0]
 8007dca:	f000 b825 	b.w	8007e18 <_malloc_r>
 8007dce:	bf00      	nop
 8007dd0:	20000048 	.word	0x20000048

08007dd4 <sbrk_aligned>:
 8007dd4:	b570      	push	{r4, r5, r6, lr}
 8007dd6:	4e0f      	ldr	r6, [pc, #60]	@ (8007e14 <sbrk_aligned+0x40>)
 8007dd8:	460c      	mov	r4, r1
 8007dda:	6831      	ldr	r1, [r6, #0]
 8007ddc:	4605      	mov	r5, r0
 8007dde:	b911      	cbnz	r1, 8007de6 <sbrk_aligned+0x12>
 8007de0:	f001 ffdc 	bl	8009d9c <_sbrk_r>
 8007de4:	6030      	str	r0, [r6, #0]
 8007de6:	4621      	mov	r1, r4
 8007de8:	4628      	mov	r0, r5
 8007dea:	f001 ffd7 	bl	8009d9c <_sbrk_r>
 8007dee:	1c43      	adds	r3, r0, #1
 8007df0:	d103      	bne.n	8007dfa <sbrk_aligned+0x26>
 8007df2:	f04f 34ff 	mov.w	r4, #4294967295
 8007df6:	4620      	mov	r0, r4
 8007df8:	bd70      	pop	{r4, r5, r6, pc}
 8007dfa:	1cc4      	adds	r4, r0, #3
 8007dfc:	f024 0403 	bic.w	r4, r4, #3
 8007e00:	42a0      	cmp	r0, r4
 8007e02:	d0f8      	beq.n	8007df6 <sbrk_aligned+0x22>
 8007e04:	1a21      	subs	r1, r4, r0
 8007e06:	4628      	mov	r0, r5
 8007e08:	f001 ffc8 	bl	8009d9c <_sbrk_r>
 8007e0c:	3001      	adds	r0, #1
 8007e0e:	d1f2      	bne.n	8007df6 <sbrk_aligned+0x22>
 8007e10:	e7ef      	b.n	8007df2 <sbrk_aligned+0x1e>
 8007e12:	bf00      	nop
 8007e14:	20000e1c 	.word	0x20000e1c

08007e18 <_malloc_r>:
 8007e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e1c:	1ccd      	adds	r5, r1, #3
 8007e1e:	f025 0503 	bic.w	r5, r5, #3
 8007e22:	3508      	adds	r5, #8
 8007e24:	2d0c      	cmp	r5, #12
 8007e26:	bf38      	it	cc
 8007e28:	250c      	movcc	r5, #12
 8007e2a:	2d00      	cmp	r5, #0
 8007e2c:	4606      	mov	r6, r0
 8007e2e:	db01      	blt.n	8007e34 <_malloc_r+0x1c>
 8007e30:	42a9      	cmp	r1, r5
 8007e32:	d904      	bls.n	8007e3e <_malloc_r+0x26>
 8007e34:	230c      	movs	r3, #12
 8007e36:	6033      	str	r3, [r6, #0]
 8007e38:	2000      	movs	r0, #0
 8007e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007f14 <_malloc_r+0xfc>
 8007e42:	f000 f869 	bl	8007f18 <__malloc_lock>
 8007e46:	f8d8 3000 	ldr.w	r3, [r8]
 8007e4a:	461c      	mov	r4, r3
 8007e4c:	bb44      	cbnz	r4, 8007ea0 <_malloc_r+0x88>
 8007e4e:	4629      	mov	r1, r5
 8007e50:	4630      	mov	r0, r6
 8007e52:	f7ff ffbf 	bl	8007dd4 <sbrk_aligned>
 8007e56:	1c43      	adds	r3, r0, #1
 8007e58:	4604      	mov	r4, r0
 8007e5a:	d158      	bne.n	8007f0e <_malloc_r+0xf6>
 8007e5c:	f8d8 4000 	ldr.w	r4, [r8]
 8007e60:	4627      	mov	r7, r4
 8007e62:	2f00      	cmp	r7, #0
 8007e64:	d143      	bne.n	8007eee <_malloc_r+0xd6>
 8007e66:	2c00      	cmp	r4, #0
 8007e68:	d04b      	beq.n	8007f02 <_malloc_r+0xea>
 8007e6a:	6823      	ldr	r3, [r4, #0]
 8007e6c:	4639      	mov	r1, r7
 8007e6e:	4630      	mov	r0, r6
 8007e70:	eb04 0903 	add.w	r9, r4, r3
 8007e74:	f001 ff92 	bl	8009d9c <_sbrk_r>
 8007e78:	4581      	cmp	r9, r0
 8007e7a:	d142      	bne.n	8007f02 <_malloc_r+0xea>
 8007e7c:	6821      	ldr	r1, [r4, #0]
 8007e7e:	1a6d      	subs	r5, r5, r1
 8007e80:	4629      	mov	r1, r5
 8007e82:	4630      	mov	r0, r6
 8007e84:	f7ff ffa6 	bl	8007dd4 <sbrk_aligned>
 8007e88:	3001      	adds	r0, #1
 8007e8a:	d03a      	beq.n	8007f02 <_malloc_r+0xea>
 8007e8c:	6823      	ldr	r3, [r4, #0]
 8007e8e:	442b      	add	r3, r5
 8007e90:	6023      	str	r3, [r4, #0]
 8007e92:	f8d8 3000 	ldr.w	r3, [r8]
 8007e96:	685a      	ldr	r2, [r3, #4]
 8007e98:	bb62      	cbnz	r2, 8007ef4 <_malloc_r+0xdc>
 8007e9a:	f8c8 7000 	str.w	r7, [r8]
 8007e9e:	e00f      	b.n	8007ec0 <_malloc_r+0xa8>
 8007ea0:	6822      	ldr	r2, [r4, #0]
 8007ea2:	1b52      	subs	r2, r2, r5
 8007ea4:	d420      	bmi.n	8007ee8 <_malloc_r+0xd0>
 8007ea6:	2a0b      	cmp	r2, #11
 8007ea8:	d917      	bls.n	8007eda <_malloc_r+0xc2>
 8007eaa:	1961      	adds	r1, r4, r5
 8007eac:	42a3      	cmp	r3, r4
 8007eae:	6025      	str	r5, [r4, #0]
 8007eb0:	bf18      	it	ne
 8007eb2:	6059      	strne	r1, [r3, #4]
 8007eb4:	6863      	ldr	r3, [r4, #4]
 8007eb6:	bf08      	it	eq
 8007eb8:	f8c8 1000 	streq.w	r1, [r8]
 8007ebc:	5162      	str	r2, [r4, r5]
 8007ebe:	604b      	str	r3, [r1, #4]
 8007ec0:	4630      	mov	r0, r6
 8007ec2:	f000 f82f 	bl	8007f24 <__malloc_unlock>
 8007ec6:	f104 000b 	add.w	r0, r4, #11
 8007eca:	1d23      	adds	r3, r4, #4
 8007ecc:	f020 0007 	bic.w	r0, r0, #7
 8007ed0:	1ac2      	subs	r2, r0, r3
 8007ed2:	bf1c      	itt	ne
 8007ed4:	1a1b      	subne	r3, r3, r0
 8007ed6:	50a3      	strne	r3, [r4, r2]
 8007ed8:	e7af      	b.n	8007e3a <_malloc_r+0x22>
 8007eda:	6862      	ldr	r2, [r4, #4]
 8007edc:	42a3      	cmp	r3, r4
 8007ede:	bf0c      	ite	eq
 8007ee0:	f8c8 2000 	streq.w	r2, [r8]
 8007ee4:	605a      	strne	r2, [r3, #4]
 8007ee6:	e7eb      	b.n	8007ec0 <_malloc_r+0xa8>
 8007ee8:	4623      	mov	r3, r4
 8007eea:	6864      	ldr	r4, [r4, #4]
 8007eec:	e7ae      	b.n	8007e4c <_malloc_r+0x34>
 8007eee:	463c      	mov	r4, r7
 8007ef0:	687f      	ldr	r7, [r7, #4]
 8007ef2:	e7b6      	b.n	8007e62 <_malloc_r+0x4a>
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	42a3      	cmp	r3, r4
 8007efa:	d1fb      	bne.n	8007ef4 <_malloc_r+0xdc>
 8007efc:	2300      	movs	r3, #0
 8007efe:	6053      	str	r3, [r2, #4]
 8007f00:	e7de      	b.n	8007ec0 <_malloc_r+0xa8>
 8007f02:	230c      	movs	r3, #12
 8007f04:	6033      	str	r3, [r6, #0]
 8007f06:	4630      	mov	r0, r6
 8007f08:	f000 f80c 	bl	8007f24 <__malloc_unlock>
 8007f0c:	e794      	b.n	8007e38 <_malloc_r+0x20>
 8007f0e:	6005      	str	r5, [r0, #0]
 8007f10:	e7d6      	b.n	8007ec0 <_malloc_r+0xa8>
 8007f12:	bf00      	nop
 8007f14:	20000e20 	.word	0x20000e20

08007f18 <__malloc_lock>:
 8007f18:	4801      	ldr	r0, [pc, #4]	@ (8007f20 <__malloc_lock+0x8>)
 8007f1a:	f7ff b88a 	b.w	8007032 <__retarget_lock_acquire_recursive>
 8007f1e:	bf00      	nop
 8007f20:	20000e18 	.word	0x20000e18

08007f24 <__malloc_unlock>:
 8007f24:	4801      	ldr	r0, [pc, #4]	@ (8007f2c <__malloc_unlock+0x8>)
 8007f26:	f7ff b885 	b.w	8007034 <__retarget_lock_release_recursive>
 8007f2a:	bf00      	nop
 8007f2c:	20000e18 	.word	0x20000e18

08007f30 <_Balloc>:
 8007f30:	b570      	push	{r4, r5, r6, lr}
 8007f32:	69c6      	ldr	r6, [r0, #28]
 8007f34:	4604      	mov	r4, r0
 8007f36:	460d      	mov	r5, r1
 8007f38:	b976      	cbnz	r6, 8007f58 <_Balloc+0x28>
 8007f3a:	2010      	movs	r0, #16
 8007f3c:	f7ff ff42 	bl	8007dc4 <malloc>
 8007f40:	4602      	mov	r2, r0
 8007f42:	61e0      	str	r0, [r4, #28]
 8007f44:	b920      	cbnz	r0, 8007f50 <_Balloc+0x20>
 8007f46:	4b18      	ldr	r3, [pc, #96]	@ (8007fa8 <_Balloc+0x78>)
 8007f48:	4818      	ldr	r0, [pc, #96]	@ (8007fac <_Balloc+0x7c>)
 8007f4a:	216b      	movs	r1, #107	@ 0x6b
 8007f4c:	f7ff f87a 	bl	8007044 <__assert_func>
 8007f50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007f54:	6006      	str	r6, [r0, #0]
 8007f56:	60c6      	str	r6, [r0, #12]
 8007f58:	69e6      	ldr	r6, [r4, #28]
 8007f5a:	68f3      	ldr	r3, [r6, #12]
 8007f5c:	b183      	cbz	r3, 8007f80 <_Balloc+0x50>
 8007f5e:	69e3      	ldr	r3, [r4, #28]
 8007f60:	68db      	ldr	r3, [r3, #12]
 8007f62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007f66:	b9b8      	cbnz	r0, 8007f98 <_Balloc+0x68>
 8007f68:	2101      	movs	r1, #1
 8007f6a:	fa01 f605 	lsl.w	r6, r1, r5
 8007f6e:	1d72      	adds	r2, r6, #5
 8007f70:	0092      	lsls	r2, r2, #2
 8007f72:	4620      	mov	r0, r4
 8007f74:	f001 ff3f 	bl	8009df6 <_calloc_r>
 8007f78:	b160      	cbz	r0, 8007f94 <_Balloc+0x64>
 8007f7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007f7e:	e00e      	b.n	8007f9e <_Balloc+0x6e>
 8007f80:	2221      	movs	r2, #33	@ 0x21
 8007f82:	2104      	movs	r1, #4
 8007f84:	4620      	mov	r0, r4
 8007f86:	f001 ff36 	bl	8009df6 <_calloc_r>
 8007f8a:	69e3      	ldr	r3, [r4, #28]
 8007f8c:	60f0      	str	r0, [r6, #12]
 8007f8e:	68db      	ldr	r3, [r3, #12]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d1e4      	bne.n	8007f5e <_Balloc+0x2e>
 8007f94:	2000      	movs	r0, #0
 8007f96:	bd70      	pop	{r4, r5, r6, pc}
 8007f98:	6802      	ldr	r2, [r0, #0]
 8007f9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007fa4:	e7f7      	b.n	8007f96 <_Balloc+0x66>
 8007fa6:	bf00      	nop
 8007fa8:	0800a8ec 	.word	0x0800a8ec
 8007fac:	0800aa46 	.word	0x0800aa46

08007fb0 <_Bfree>:
 8007fb0:	b570      	push	{r4, r5, r6, lr}
 8007fb2:	69c6      	ldr	r6, [r0, #28]
 8007fb4:	4605      	mov	r5, r0
 8007fb6:	460c      	mov	r4, r1
 8007fb8:	b976      	cbnz	r6, 8007fd8 <_Bfree+0x28>
 8007fba:	2010      	movs	r0, #16
 8007fbc:	f7ff ff02 	bl	8007dc4 <malloc>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	61e8      	str	r0, [r5, #28]
 8007fc4:	b920      	cbnz	r0, 8007fd0 <_Bfree+0x20>
 8007fc6:	4b09      	ldr	r3, [pc, #36]	@ (8007fec <_Bfree+0x3c>)
 8007fc8:	4809      	ldr	r0, [pc, #36]	@ (8007ff0 <_Bfree+0x40>)
 8007fca:	218f      	movs	r1, #143	@ 0x8f
 8007fcc:	f7ff f83a 	bl	8007044 <__assert_func>
 8007fd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007fd4:	6006      	str	r6, [r0, #0]
 8007fd6:	60c6      	str	r6, [r0, #12]
 8007fd8:	b13c      	cbz	r4, 8007fea <_Bfree+0x3a>
 8007fda:	69eb      	ldr	r3, [r5, #28]
 8007fdc:	6862      	ldr	r2, [r4, #4]
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007fe4:	6021      	str	r1, [r4, #0]
 8007fe6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007fea:	bd70      	pop	{r4, r5, r6, pc}
 8007fec:	0800a8ec 	.word	0x0800a8ec
 8007ff0:	0800aa46 	.word	0x0800aa46

08007ff4 <__multadd>:
 8007ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ff8:	690d      	ldr	r5, [r1, #16]
 8007ffa:	4607      	mov	r7, r0
 8007ffc:	460c      	mov	r4, r1
 8007ffe:	461e      	mov	r6, r3
 8008000:	f101 0c14 	add.w	ip, r1, #20
 8008004:	2000      	movs	r0, #0
 8008006:	f8dc 3000 	ldr.w	r3, [ip]
 800800a:	b299      	uxth	r1, r3
 800800c:	fb02 6101 	mla	r1, r2, r1, r6
 8008010:	0c1e      	lsrs	r6, r3, #16
 8008012:	0c0b      	lsrs	r3, r1, #16
 8008014:	fb02 3306 	mla	r3, r2, r6, r3
 8008018:	b289      	uxth	r1, r1
 800801a:	3001      	adds	r0, #1
 800801c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008020:	4285      	cmp	r5, r0
 8008022:	f84c 1b04 	str.w	r1, [ip], #4
 8008026:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800802a:	dcec      	bgt.n	8008006 <__multadd+0x12>
 800802c:	b30e      	cbz	r6, 8008072 <__multadd+0x7e>
 800802e:	68a3      	ldr	r3, [r4, #8]
 8008030:	42ab      	cmp	r3, r5
 8008032:	dc19      	bgt.n	8008068 <__multadd+0x74>
 8008034:	6861      	ldr	r1, [r4, #4]
 8008036:	4638      	mov	r0, r7
 8008038:	3101      	adds	r1, #1
 800803a:	f7ff ff79 	bl	8007f30 <_Balloc>
 800803e:	4680      	mov	r8, r0
 8008040:	b928      	cbnz	r0, 800804e <__multadd+0x5a>
 8008042:	4602      	mov	r2, r0
 8008044:	4b0c      	ldr	r3, [pc, #48]	@ (8008078 <__multadd+0x84>)
 8008046:	480d      	ldr	r0, [pc, #52]	@ (800807c <__multadd+0x88>)
 8008048:	21ba      	movs	r1, #186	@ 0xba
 800804a:	f7fe fffb 	bl	8007044 <__assert_func>
 800804e:	6922      	ldr	r2, [r4, #16]
 8008050:	3202      	adds	r2, #2
 8008052:	f104 010c 	add.w	r1, r4, #12
 8008056:	0092      	lsls	r2, r2, #2
 8008058:	300c      	adds	r0, #12
 800805a:	f001 feaf 	bl	8009dbc <memcpy>
 800805e:	4621      	mov	r1, r4
 8008060:	4638      	mov	r0, r7
 8008062:	f7ff ffa5 	bl	8007fb0 <_Bfree>
 8008066:	4644      	mov	r4, r8
 8008068:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800806c:	3501      	adds	r5, #1
 800806e:	615e      	str	r6, [r3, #20]
 8008070:	6125      	str	r5, [r4, #16]
 8008072:	4620      	mov	r0, r4
 8008074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008078:	0800aa35 	.word	0x0800aa35
 800807c:	0800aa46 	.word	0x0800aa46

08008080 <__s2b>:
 8008080:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008084:	460c      	mov	r4, r1
 8008086:	4615      	mov	r5, r2
 8008088:	461f      	mov	r7, r3
 800808a:	2209      	movs	r2, #9
 800808c:	3308      	adds	r3, #8
 800808e:	4606      	mov	r6, r0
 8008090:	fb93 f3f2 	sdiv	r3, r3, r2
 8008094:	2100      	movs	r1, #0
 8008096:	2201      	movs	r2, #1
 8008098:	429a      	cmp	r2, r3
 800809a:	db09      	blt.n	80080b0 <__s2b+0x30>
 800809c:	4630      	mov	r0, r6
 800809e:	f7ff ff47 	bl	8007f30 <_Balloc>
 80080a2:	b940      	cbnz	r0, 80080b6 <__s2b+0x36>
 80080a4:	4602      	mov	r2, r0
 80080a6:	4b19      	ldr	r3, [pc, #100]	@ (800810c <__s2b+0x8c>)
 80080a8:	4819      	ldr	r0, [pc, #100]	@ (8008110 <__s2b+0x90>)
 80080aa:	21d3      	movs	r1, #211	@ 0xd3
 80080ac:	f7fe ffca 	bl	8007044 <__assert_func>
 80080b0:	0052      	lsls	r2, r2, #1
 80080b2:	3101      	adds	r1, #1
 80080b4:	e7f0      	b.n	8008098 <__s2b+0x18>
 80080b6:	9b08      	ldr	r3, [sp, #32]
 80080b8:	6143      	str	r3, [r0, #20]
 80080ba:	2d09      	cmp	r5, #9
 80080bc:	f04f 0301 	mov.w	r3, #1
 80080c0:	6103      	str	r3, [r0, #16]
 80080c2:	dd16      	ble.n	80080f2 <__s2b+0x72>
 80080c4:	f104 0909 	add.w	r9, r4, #9
 80080c8:	46c8      	mov	r8, r9
 80080ca:	442c      	add	r4, r5
 80080cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80080d0:	4601      	mov	r1, r0
 80080d2:	3b30      	subs	r3, #48	@ 0x30
 80080d4:	220a      	movs	r2, #10
 80080d6:	4630      	mov	r0, r6
 80080d8:	f7ff ff8c 	bl	8007ff4 <__multadd>
 80080dc:	45a0      	cmp	r8, r4
 80080de:	d1f5      	bne.n	80080cc <__s2b+0x4c>
 80080e0:	f1a5 0408 	sub.w	r4, r5, #8
 80080e4:	444c      	add	r4, r9
 80080e6:	1b2d      	subs	r5, r5, r4
 80080e8:	1963      	adds	r3, r4, r5
 80080ea:	42bb      	cmp	r3, r7
 80080ec:	db04      	blt.n	80080f8 <__s2b+0x78>
 80080ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080f2:	340a      	adds	r4, #10
 80080f4:	2509      	movs	r5, #9
 80080f6:	e7f6      	b.n	80080e6 <__s2b+0x66>
 80080f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80080fc:	4601      	mov	r1, r0
 80080fe:	3b30      	subs	r3, #48	@ 0x30
 8008100:	220a      	movs	r2, #10
 8008102:	4630      	mov	r0, r6
 8008104:	f7ff ff76 	bl	8007ff4 <__multadd>
 8008108:	e7ee      	b.n	80080e8 <__s2b+0x68>
 800810a:	bf00      	nop
 800810c:	0800aa35 	.word	0x0800aa35
 8008110:	0800aa46 	.word	0x0800aa46

08008114 <__hi0bits>:
 8008114:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008118:	4603      	mov	r3, r0
 800811a:	bf36      	itet	cc
 800811c:	0403      	lslcc	r3, r0, #16
 800811e:	2000      	movcs	r0, #0
 8008120:	2010      	movcc	r0, #16
 8008122:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008126:	bf3c      	itt	cc
 8008128:	021b      	lslcc	r3, r3, #8
 800812a:	3008      	addcc	r0, #8
 800812c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008130:	bf3c      	itt	cc
 8008132:	011b      	lslcc	r3, r3, #4
 8008134:	3004      	addcc	r0, #4
 8008136:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800813a:	bf3c      	itt	cc
 800813c:	009b      	lslcc	r3, r3, #2
 800813e:	3002      	addcc	r0, #2
 8008140:	2b00      	cmp	r3, #0
 8008142:	db05      	blt.n	8008150 <__hi0bits+0x3c>
 8008144:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008148:	f100 0001 	add.w	r0, r0, #1
 800814c:	bf08      	it	eq
 800814e:	2020      	moveq	r0, #32
 8008150:	4770      	bx	lr

08008152 <__lo0bits>:
 8008152:	6803      	ldr	r3, [r0, #0]
 8008154:	4602      	mov	r2, r0
 8008156:	f013 0007 	ands.w	r0, r3, #7
 800815a:	d00b      	beq.n	8008174 <__lo0bits+0x22>
 800815c:	07d9      	lsls	r1, r3, #31
 800815e:	d421      	bmi.n	80081a4 <__lo0bits+0x52>
 8008160:	0798      	lsls	r0, r3, #30
 8008162:	bf49      	itett	mi
 8008164:	085b      	lsrmi	r3, r3, #1
 8008166:	089b      	lsrpl	r3, r3, #2
 8008168:	2001      	movmi	r0, #1
 800816a:	6013      	strmi	r3, [r2, #0]
 800816c:	bf5c      	itt	pl
 800816e:	6013      	strpl	r3, [r2, #0]
 8008170:	2002      	movpl	r0, #2
 8008172:	4770      	bx	lr
 8008174:	b299      	uxth	r1, r3
 8008176:	b909      	cbnz	r1, 800817c <__lo0bits+0x2a>
 8008178:	0c1b      	lsrs	r3, r3, #16
 800817a:	2010      	movs	r0, #16
 800817c:	b2d9      	uxtb	r1, r3
 800817e:	b909      	cbnz	r1, 8008184 <__lo0bits+0x32>
 8008180:	3008      	adds	r0, #8
 8008182:	0a1b      	lsrs	r3, r3, #8
 8008184:	0719      	lsls	r1, r3, #28
 8008186:	bf04      	itt	eq
 8008188:	091b      	lsreq	r3, r3, #4
 800818a:	3004      	addeq	r0, #4
 800818c:	0799      	lsls	r1, r3, #30
 800818e:	bf04      	itt	eq
 8008190:	089b      	lsreq	r3, r3, #2
 8008192:	3002      	addeq	r0, #2
 8008194:	07d9      	lsls	r1, r3, #31
 8008196:	d403      	bmi.n	80081a0 <__lo0bits+0x4e>
 8008198:	085b      	lsrs	r3, r3, #1
 800819a:	f100 0001 	add.w	r0, r0, #1
 800819e:	d003      	beq.n	80081a8 <__lo0bits+0x56>
 80081a0:	6013      	str	r3, [r2, #0]
 80081a2:	4770      	bx	lr
 80081a4:	2000      	movs	r0, #0
 80081a6:	4770      	bx	lr
 80081a8:	2020      	movs	r0, #32
 80081aa:	4770      	bx	lr

080081ac <__i2b>:
 80081ac:	b510      	push	{r4, lr}
 80081ae:	460c      	mov	r4, r1
 80081b0:	2101      	movs	r1, #1
 80081b2:	f7ff febd 	bl	8007f30 <_Balloc>
 80081b6:	4602      	mov	r2, r0
 80081b8:	b928      	cbnz	r0, 80081c6 <__i2b+0x1a>
 80081ba:	4b05      	ldr	r3, [pc, #20]	@ (80081d0 <__i2b+0x24>)
 80081bc:	4805      	ldr	r0, [pc, #20]	@ (80081d4 <__i2b+0x28>)
 80081be:	f240 1145 	movw	r1, #325	@ 0x145
 80081c2:	f7fe ff3f 	bl	8007044 <__assert_func>
 80081c6:	2301      	movs	r3, #1
 80081c8:	6144      	str	r4, [r0, #20]
 80081ca:	6103      	str	r3, [r0, #16]
 80081cc:	bd10      	pop	{r4, pc}
 80081ce:	bf00      	nop
 80081d0:	0800aa35 	.word	0x0800aa35
 80081d4:	0800aa46 	.word	0x0800aa46

080081d8 <__multiply>:
 80081d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081dc:	4617      	mov	r7, r2
 80081de:	690a      	ldr	r2, [r1, #16]
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	429a      	cmp	r2, r3
 80081e4:	bfa8      	it	ge
 80081e6:	463b      	movge	r3, r7
 80081e8:	4689      	mov	r9, r1
 80081ea:	bfa4      	itt	ge
 80081ec:	460f      	movge	r7, r1
 80081ee:	4699      	movge	r9, r3
 80081f0:	693d      	ldr	r5, [r7, #16]
 80081f2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	6879      	ldr	r1, [r7, #4]
 80081fa:	eb05 060a 	add.w	r6, r5, sl
 80081fe:	42b3      	cmp	r3, r6
 8008200:	b085      	sub	sp, #20
 8008202:	bfb8      	it	lt
 8008204:	3101      	addlt	r1, #1
 8008206:	f7ff fe93 	bl	8007f30 <_Balloc>
 800820a:	b930      	cbnz	r0, 800821a <__multiply+0x42>
 800820c:	4602      	mov	r2, r0
 800820e:	4b41      	ldr	r3, [pc, #260]	@ (8008314 <__multiply+0x13c>)
 8008210:	4841      	ldr	r0, [pc, #260]	@ (8008318 <__multiply+0x140>)
 8008212:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008216:	f7fe ff15 	bl	8007044 <__assert_func>
 800821a:	f100 0414 	add.w	r4, r0, #20
 800821e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008222:	4623      	mov	r3, r4
 8008224:	2200      	movs	r2, #0
 8008226:	4573      	cmp	r3, lr
 8008228:	d320      	bcc.n	800826c <__multiply+0x94>
 800822a:	f107 0814 	add.w	r8, r7, #20
 800822e:	f109 0114 	add.w	r1, r9, #20
 8008232:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008236:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800823a:	9302      	str	r3, [sp, #8]
 800823c:	1beb      	subs	r3, r5, r7
 800823e:	3b15      	subs	r3, #21
 8008240:	f023 0303 	bic.w	r3, r3, #3
 8008244:	3304      	adds	r3, #4
 8008246:	3715      	adds	r7, #21
 8008248:	42bd      	cmp	r5, r7
 800824a:	bf38      	it	cc
 800824c:	2304      	movcc	r3, #4
 800824e:	9301      	str	r3, [sp, #4]
 8008250:	9b02      	ldr	r3, [sp, #8]
 8008252:	9103      	str	r1, [sp, #12]
 8008254:	428b      	cmp	r3, r1
 8008256:	d80c      	bhi.n	8008272 <__multiply+0x9a>
 8008258:	2e00      	cmp	r6, #0
 800825a:	dd03      	ble.n	8008264 <__multiply+0x8c>
 800825c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008260:	2b00      	cmp	r3, #0
 8008262:	d055      	beq.n	8008310 <__multiply+0x138>
 8008264:	6106      	str	r6, [r0, #16]
 8008266:	b005      	add	sp, #20
 8008268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800826c:	f843 2b04 	str.w	r2, [r3], #4
 8008270:	e7d9      	b.n	8008226 <__multiply+0x4e>
 8008272:	f8b1 a000 	ldrh.w	sl, [r1]
 8008276:	f1ba 0f00 	cmp.w	sl, #0
 800827a:	d01f      	beq.n	80082bc <__multiply+0xe4>
 800827c:	46c4      	mov	ip, r8
 800827e:	46a1      	mov	r9, r4
 8008280:	2700      	movs	r7, #0
 8008282:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008286:	f8d9 3000 	ldr.w	r3, [r9]
 800828a:	fa1f fb82 	uxth.w	fp, r2
 800828e:	b29b      	uxth	r3, r3
 8008290:	fb0a 330b 	mla	r3, sl, fp, r3
 8008294:	443b      	add	r3, r7
 8008296:	f8d9 7000 	ldr.w	r7, [r9]
 800829a:	0c12      	lsrs	r2, r2, #16
 800829c:	0c3f      	lsrs	r7, r7, #16
 800829e:	fb0a 7202 	mla	r2, sl, r2, r7
 80082a2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80082a6:	b29b      	uxth	r3, r3
 80082a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082ac:	4565      	cmp	r5, ip
 80082ae:	f849 3b04 	str.w	r3, [r9], #4
 80082b2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80082b6:	d8e4      	bhi.n	8008282 <__multiply+0xaa>
 80082b8:	9b01      	ldr	r3, [sp, #4]
 80082ba:	50e7      	str	r7, [r4, r3]
 80082bc:	9b03      	ldr	r3, [sp, #12]
 80082be:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80082c2:	3104      	adds	r1, #4
 80082c4:	f1b9 0f00 	cmp.w	r9, #0
 80082c8:	d020      	beq.n	800830c <__multiply+0x134>
 80082ca:	6823      	ldr	r3, [r4, #0]
 80082cc:	4647      	mov	r7, r8
 80082ce:	46a4      	mov	ip, r4
 80082d0:	f04f 0a00 	mov.w	sl, #0
 80082d4:	f8b7 b000 	ldrh.w	fp, [r7]
 80082d8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80082dc:	fb09 220b 	mla	r2, r9, fp, r2
 80082e0:	4452      	add	r2, sl
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082e8:	f84c 3b04 	str.w	r3, [ip], #4
 80082ec:	f857 3b04 	ldr.w	r3, [r7], #4
 80082f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80082f4:	f8bc 3000 	ldrh.w	r3, [ip]
 80082f8:	fb09 330a 	mla	r3, r9, sl, r3
 80082fc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008300:	42bd      	cmp	r5, r7
 8008302:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008306:	d8e5      	bhi.n	80082d4 <__multiply+0xfc>
 8008308:	9a01      	ldr	r2, [sp, #4]
 800830a:	50a3      	str	r3, [r4, r2]
 800830c:	3404      	adds	r4, #4
 800830e:	e79f      	b.n	8008250 <__multiply+0x78>
 8008310:	3e01      	subs	r6, #1
 8008312:	e7a1      	b.n	8008258 <__multiply+0x80>
 8008314:	0800aa35 	.word	0x0800aa35
 8008318:	0800aa46 	.word	0x0800aa46

0800831c <__pow5mult>:
 800831c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008320:	4615      	mov	r5, r2
 8008322:	f012 0203 	ands.w	r2, r2, #3
 8008326:	4607      	mov	r7, r0
 8008328:	460e      	mov	r6, r1
 800832a:	d007      	beq.n	800833c <__pow5mult+0x20>
 800832c:	4c25      	ldr	r4, [pc, #148]	@ (80083c4 <__pow5mult+0xa8>)
 800832e:	3a01      	subs	r2, #1
 8008330:	2300      	movs	r3, #0
 8008332:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008336:	f7ff fe5d 	bl	8007ff4 <__multadd>
 800833a:	4606      	mov	r6, r0
 800833c:	10ad      	asrs	r5, r5, #2
 800833e:	d03d      	beq.n	80083bc <__pow5mult+0xa0>
 8008340:	69fc      	ldr	r4, [r7, #28]
 8008342:	b97c      	cbnz	r4, 8008364 <__pow5mult+0x48>
 8008344:	2010      	movs	r0, #16
 8008346:	f7ff fd3d 	bl	8007dc4 <malloc>
 800834a:	4602      	mov	r2, r0
 800834c:	61f8      	str	r0, [r7, #28]
 800834e:	b928      	cbnz	r0, 800835c <__pow5mult+0x40>
 8008350:	4b1d      	ldr	r3, [pc, #116]	@ (80083c8 <__pow5mult+0xac>)
 8008352:	481e      	ldr	r0, [pc, #120]	@ (80083cc <__pow5mult+0xb0>)
 8008354:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008358:	f7fe fe74 	bl	8007044 <__assert_func>
 800835c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008360:	6004      	str	r4, [r0, #0]
 8008362:	60c4      	str	r4, [r0, #12]
 8008364:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008368:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800836c:	b94c      	cbnz	r4, 8008382 <__pow5mult+0x66>
 800836e:	f240 2171 	movw	r1, #625	@ 0x271
 8008372:	4638      	mov	r0, r7
 8008374:	f7ff ff1a 	bl	80081ac <__i2b>
 8008378:	2300      	movs	r3, #0
 800837a:	f8c8 0008 	str.w	r0, [r8, #8]
 800837e:	4604      	mov	r4, r0
 8008380:	6003      	str	r3, [r0, #0]
 8008382:	f04f 0900 	mov.w	r9, #0
 8008386:	07eb      	lsls	r3, r5, #31
 8008388:	d50a      	bpl.n	80083a0 <__pow5mult+0x84>
 800838a:	4631      	mov	r1, r6
 800838c:	4622      	mov	r2, r4
 800838e:	4638      	mov	r0, r7
 8008390:	f7ff ff22 	bl	80081d8 <__multiply>
 8008394:	4631      	mov	r1, r6
 8008396:	4680      	mov	r8, r0
 8008398:	4638      	mov	r0, r7
 800839a:	f7ff fe09 	bl	8007fb0 <_Bfree>
 800839e:	4646      	mov	r6, r8
 80083a0:	106d      	asrs	r5, r5, #1
 80083a2:	d00b      	beq.n	80083bc <__pow5mult+0xa0>
 80083a4:	6820      	ldr	r0, [r4, #0]
 80083a6:	b938      	cbnz	r0, 80083b8 <__pow5mult+0x9c>
 80083a8:	4622      	mov	r2, r4
 80083aa:	4621      	mov	r1, r4
 80083ac:	4638      	mov	r0, r7
 80083ae:	f7ff ff13 	bl	80081d8 <__multiply>
 80083b2:	6020      	str	r0, [r4, #0]
 80083b4:	f8c0 9000 	str.w	r9, [r0]
 80083b8:	4604      	mov	r4, r0
 80083ba:	e7e4      	b.n	8008386 <__pow5mult+0x6a>
 80083bc:	4630      	mov	r0, r6
 80083be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80083c2:	bf00      	nop
 80083c4:	0800ab1c 	.word	0x0800ab1c
 80083c8:	0800a8ec 	.word	0x0800a8ec
 80083cc:	0800aa46 	.word	0x0800aa46

080083d0 <__lshift>:
 80083d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083d4:	460c      	mov	r4, r1
 80083d6:	6849      	ldr	r1, [r1, #4]
 80083d8:	6923      	ldr	r3, [r4, #16]
 80083da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80083de:	68a3      	ldr	r3, [r4, #8]
 80083e0:	4607      	mov	r7, r0
 80083e2:	4691      	mov	r9, r2
 80083e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80083e8:	f108 0601 	add.w	r6, r8, #1
 80083ec:	42b3      	cmp	r3, r6
 80083ee:	db0b      	blt.n	8008408 <__lshift+0x38>
 80083f0:	4638      	mov	r0, r7
 80083f2:	f7ff fd9d 	bl	8007f30 <_Balloc>
 80083f6:	4605      	mov	r5, r0
 80083f8:	b948      	cbnz	r0, 800840e <__lshift+0x3e>
 80083fa:	4602      	mov	r2, r0
 80083fc:	4b28      	ldr	r3, [pc, #160]	@ (80084a0 <__lshift+0xd0>)
 80083fe:	4829      	ldr	r0, [pc, #164]	@ (80084a4 <__lshift+0xd4>)
 8008400:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008404:	f7fe fe1e 	bl	8007044 <__assert_func>
 8008408:	3101      	adds	r1, #1
 800840a:	005b      	lsls	r3, r3, #1
 800840c:	e7ee      	b.n	80083ec <__lshift+0x1c>
 800840e:	2300      	movs	r3, #0
 8008410:	f100 0114 	add.w	r1, r0, #20
 8008414:	f100 0210 	add.w	r2, r0, #16
 8008418:	4618      	mov	r0, r3
 800841a:	4553      	cmp	r3, sl
 800841c:	db33      	blt.n	8008486 <__lshift+0xb6>
 800841e:	6920      	ldr	r0, [r4, #16]
 8008420:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008424:	f104 0314 	add.w	r3, r4, #20
 8008428:	f019 091f 	ands.w	r9, r9, #31
 800842c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008430:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008434:	d02b      	beq.n	800848e <__lshift+0xbe>
 8008436:	f1c9 0e20 	rsb	lr, r9, #32
 800843a:	468a      	mov	sl, r1
 800843c:	2200      	movs	r2, #0
 800843e:	6818      	ldr	r0, [r3, #0]
 8008440:	fa00 f009 	lsl.w	r0, r0, r9
 8008444:	4310      	orrs	r0, r2
 8008446:	f84a 0b04 	str.w	r0, [sl], #4
 800844a:	f853 2b04 	ldr.w	r2, [r3], #4
 800844e:	459c      	cmp	ip, r3
 8008450:	fa22 f20e 	lsr.w	r2, r2, lr
 8008454:	d8f3      	bhi.n	800843e <__lshift+0x6e>
 8008456:	ebac 0304 	sub.w	r3, ip, r4
 800845a:	3b15      	subs	r3, #21
 800845c:	f023 0303 	bic.w	r3, r3, #3
 8008460:	3304      	adds	r3, #4
 8008462:	f104 0015 	add.w	r0, r4, #21
 8008466:	4560      	cmp	r0, ip
 8008468:	bf88      	it	hi
 800846a:	2304      	movhi	r3, #4
 800846c:	50ca      	str	r2, [r1, r3]
 800846e:	b10a      	cbz	r2, 8008474 <__lshift+0xa4>
 8008470:	f108 0602 	add.w	r6, r8, #2
 8008474:	3e01      	subs	r6, #1
 8008476:	4638      	mov	r0, r7
 8008478:	612e      	str	r6, [r5, #16]
 800847a:	4621      	mov	r1, r4
 800847c:	f7ff fd98 	bl	8007fb0 <_Bfree>
 8008480:	4628      	mov	r0, r5
 8008482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008486:	f842 0f04 	str.w	r0, [r2, #4]!
 800848a:	3301      	adds	r3, #1
 800848c:	e7c5      	b.n	800841a <__lshift+0x4a>
 800848e:	3904      	subs	r1, #4
 8008490:	f853 2b04 	ldr.w	r2, [r3], #4
 8008494:	f841 2f04 	str.w	r2, [r1, #4]!
 8008498:	459c      	cmp	ip, r3
 800849a:	d8f9      	bhi.n	8008490 <__lshift+0xc0>
 800849c:	e7ea      	b.n	8008474 <__lshift+0xa4>
 800849e:	bf00      	nop
 80084a0:	0800aa35 	.word	0x0800aa35
 80084a4:	0800aa46 	.word	0x0800aa46

080084a8 <__mcmp>:
 80084a8:	690a      	ldr	r2, [r1, #16]
 80084aa:	4603      	mov	r3, r0
 80084ac:	6900      	ldr	r0, [r0, #16]
 80084ae:	1a80      	subs	r0, r0, r2
 80084b0:	b530      	push	{r4, r5, lr}
 80084b2:	d10e      	bne.n	80084d2 <__mcmp+0x2a>
 80084b4:	3314      	adds	r3, #20
 80084b6:	3114      	adds	r1, #20
 80084b8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80084bc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80084c0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80084c4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80084c8:	4295      	cmp	r5, r2
 80084ca:	d003      	beq.n	80084d4 <__mcmp+0x2c>
 80084cc:	d205      	bcs.n	80084da <__mcmp+0x32>
 80084ce:	f04f 30ff 	mov.w	r0, #4294967295
 80084d2:	bd30      	pop	{r4, r5, pc}
 80084d4:	42a3      	cmp	r3, r4
 80084d6:	d3f3      	bcc.n	80084c0 <__mcmp+0x18>
 80084d8:	e7fb      	b.n	80084d2 <__mcmp+0x2a>
 80084da:	2001      	movs	r0, #1
 80084dc:	e7f9      	b.n	80084d2 <__mcmp+0x2a>
	...

080084e0 <__mdiff>:
 80084e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e4:	4689      	mov	r9, r1
 80084e6:	4606      	mov	r6, r0
 80084e8:	4611      	mov	r1, r2
 80084ea:	4648      	mov	r0, r9
 80084ec:	4614      	mov	r4, r2
 80084ee:	f7ff ffdb 	bl	80084a8 <__mcmp>
 80084f2:	1e05      	subs	r5, r0, #0
 80084f4:	d112      	bne.n	800851c <__mdiff+0x3c>
 80084f6:	4629      	mov	r1, r5
 80084f8:	4630      	mov	r0, r6
 80084fa:	f7ff fd19 	bl	8007f30 <_Balloc>
 80084fe:	4602      	mov	r2, r0
 8008500:	b928      	cbnz	r0, 800850e <__mdiff+0x2e>
 8008502:	4b3f      	ldr	r3, [pc, #252]	@ (8008600 <__mdiff+0x120>)
 8008504:	f240 2137 	movw	r1, #567	@ 0x237
 8008508:	483e      	ldr	r0, [pc, #248]	@ (8008604 <__mdiff+0x124>)
 800850a:	f7fe fd9b 	bl	8007044 <__assert_func>
 800850e:	2301      	movs	r3, #1
 8008510:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008514:	4610      	mov	r0, r2
 8008516:	b003      	add	sp, #12
 8008518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800851c:	bfbc      	itt	lt
 800851e:	464b      	movlt	r3, r9
 8008520:	46a1      	movlt	r9, r4
 8008522:	4630      	mov	r0, r6
 8008524:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008528:	bfba      	itte	lt
 800852a:	461c      	movlt	r4, r3
 800852c:	2501      	movlt	r5, #1
 800852e:	2500      	movge	r5, #0
 8008530:	f7ff fcfe 	bl	8007f30 <_Balloc>
 8008534:	4602      	mov	r2, r0
 8008536:	b918      	cbnz	r0, 8008540 <__mdiff+0x60>
 8008538:	4b31      	ldr	r3, [pc, #196]	@ (8008600 <__mdiff+0x120>)
 800853a:	f240 2145 	movw	r1, #581	@ 0x245
 800853e:	e7e3      	b.n	8008508 <__mdiff+0x28>
 8008540:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008544:	6926      	ldr	r6, [r4, #16]
 8008546:	60c5      	str	r5, [r0, #12]
 8008548:	f109 0310 	add.w	r3, r9, #16
 800854c:	f109 0514 	add.w	r5, r9, #20
 8008550:	f104 0e14 	add.w	lr, r4, #20
 8008554:	f100 0b14 	add.w	fp, r0, #20
 8008558:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800855c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008560:	9301      	str	r3, [sp, #4]
 8008562:	46d9      	mov	r9, fp
 8008564:	f04f 0c00 	mov.w	ip, #0
 8008568:	9b01      	ldr	r3, [sp, #4]
 800856a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800856e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008572:	9301      	str	r3, [sp, #4]
 8008574:	fa1f f38a 	uxth.w	r3, sl
 8008578:	4619      	mov	r1, r3
 800857a:	b283      	uxth	r3, r0
 800857c:	1acb      	subs	r3, r1, r3
 800857e:	0c00      	lsrs	r0, r0, #16
 8008580:	4463      	add	r3, ip
 8008582:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008586:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800858a:	b29b      	uxth	r3, r3
 800858c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008590:	4576      	cmp	r6, lr
 8008592:	f849 3b04 	str.w	r3, [r9], #4
 8008596:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800859a:	d8e5      	bhi.n	8008568 <__mdiff+0x88>
 800859c:	1b33      	subs	r3, r6, r4
 800859e:	3b15      	subs	r3, #21
 80085a0:	f023 0303 	bic.w	r3, r3, #3
 80085a4:	3415      	adds	r4, #21
 80085a6:	3304      	adds	r3, #4
 80085a8:	42a6      	cmp	r6, r4
 80085aa:	bf38      	it	cc
 80085ac:	2304      	movcc	r3, #4
 80085ae:	441d      	add	r5, r3
 80085b0:	445b      	add	r3, fp
 80085b2:	461e      	mov	r6, r3
 80085b4:	462c      	mov	r4, r5
 80085b6:	4544      	cmp	r4, r8
 80085b8:	d30e      	bcc.n	80085d8 <__mdiff+0xf8>
 80085ba:	f108 0103 	add.w	r1, r8, #3
 80085be:	1b49      	subs	r1, r1, r5
 80085c0:	f021 0103 	bic.w	r1, r1, #3
 80085c4:	3d03      	subs	r5, #3
 80085c6:	45a8      	cmp	r8, r5
 80085c8:	bf38      	it	cc
 80085ca:	2100      	movcc	r1, #0
 80085cc:	440b      	add	r3, r1
 80085ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80085d2:	b191      	cbz	r1, 80085fa <__mdiff+0x11a>
 80085d4:	6117      	str	r7, [r2, #16]
 80085d6:	e79d      	b.n	8008514 <__mdiff+0x34>
 80085d8:	f854 1b04 	ldr.w	r1, [r4], #4
 80085dc:	46e6      	mov	lr, ip
 80085de:	0c08      	lsrs	r0, r1, #16
 80085e0:	fa1c fc81 	uxtah	ip, ip, r1
 80085e4:	4471      	add	r1, lr
 80085e6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80085ea:	b289      	uxth	r1, r1
 80085ec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80085f0:	f846 1b04 	str.w	r1, [r6], #4
 80085f4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80085f8:	e7dd      	b.n	80085b6 <__mdiff+0xd6>
 80085fa:	3f01      	subs	r7, #1
 80085fc:	e7e7      	b.n	80085ce <__mdiff+0xee>
 80085fe:	bf00      	nop
 8008600:	0800aa35 	.word	0x0800aa35
 8008604:	0800aa46 	.word	0x0800aa46

08008608 <__ulp>:
 8008608:	b082      	sub	sp, #8
 800860a:	ed8d 0b00 	vstr	d0, [sp]
 800860e:	9a01      	ldr	r2, [sp, #4]
 8008610:	4b0f      	ldr	r3, [pc, #60]	@ (8008650 <__ulp+0x48>)
 8008612:	4013      	ands	r3, r2
 8008614:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008618:	2b00      	cmp	r3, #0
 800861a:	dc08      	bgt.n	800862e <__ulp+0x26>
 800861c:	425b      	negs	r3, r3
 800861e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008622:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008626:	da04      	bge.n	8008632 <__ulp+0x2a>
 8008628:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800862c:	4113      	asrs	r3, r2
 800862e:	2200      	movs	r2, #0
 8008630:	e008      	b.n	8008644 <__ulp+0x3c>
 8008632:	f1a2 0314 	sub.w	r3, r2, #20
 8008636:	2b1e      	cmp	r3, #30
 8008638:	bfda      	itte	le
 800863a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800863e:	40da      	lsrle	r2, r3
 8008640:	2201      	movgt	r2, #1
 8008642:	2300      	movs	r3, #0
 8008644:	4619      	mov	r1, r3
 8008646:	4610      	mov	r0, r2
 8008648:	ec41 0b10 	vmov	d0, r0, r1
 800864c:	b002      	add	sp, #8
 800864e:	4770      	bx	lr
 8008650:	7ff00000 	.word	0x7ff00000

08008654 <__b2d>:
 8008654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008658:	6906      	ldr	r6, [r0, #16]
 800865a:	f100 0814 	add.w	r8, r0, #20
 800865e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008662:	1f37      	subs	r7, r6, #4
 8008664:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008668:	4610      	mov	r0, r2
 800866a:	f7ff fd53 	bl	8008114 <__hi0bits>
 800866e:	f1c0 0320 	rsb	r3, r0, #32
 8008672:	280a      	cmp	r0, #10
 8008674:	600b      	str	r3, [r1, #0]
 8008676:	491b      	ldr	r1, [pc, #108]	@ (80086e4 <__b2d+0x90>)
 8008678:	dc15      	bgt.n	80086a6 <__b2d+0x52>
 800867a:	f1c0 0c0b 	rsb	ip, r0, #11
 800867e:	fa22 f30c 	lsr.w	r3, r2, ip
 8008682:	45b8      	cmp	r8, r7
 8008684:	ea43 0501 	orr.w	r5, r3, r1
 8008688:	bf34      	ite	cc
 800868a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800868e:	2300      	movcs	r3, #0
 8008690:	3015      	adds	r0, #21
 8008692:	fa02 f000 	lsl.w	r0, r2, r0
 8008696:	fa23 f30c 	lsr.w	r3, r3, ip
 800869a:	4303      	orrs	r3, r0
 800869c:	461c      	mov	r4, r3
 800869e:	ec45 4b10 	vmov	d0, r4, r5
 80086a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086a6:	45b8      	cmp	r8, r7
 80086a8:	bf3a      	itte	cc
 80086aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80086ae:	f1a6 0708 	subcc.w	r7, r6, #8
 80086b2:	2300      	movcs	r3, #0
 80086b4:	380b      	subs	r0, #11
 80086b6:	d012      	beq.n	80086de <__b2d+0x8a>
 80086b8:	f1c0 0120 	rsb	r1, r0, #32
 80086bc:	fa23 f401 	lsr.w	r4, r3, r1
 80086c0:	4082      	lsls	r2, r0
 80086c2:	4322      	orrs	r2, r4
 80086c4:	4547      	cmp	r7, r8
 80086c6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80086ca:	bf8c      	ite	hi
 80086cc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80086d0:	2200      	movls	r2, #0
 80086d2:	4083      	lsls	r3, r0
 80086d4:	40ca      	lsrs	r2, r1
 80086d6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80086da:	4313      	orrs	r3, r2
 80086dc:	e7de      	b.n	800869c <__b2d+0x48>
 80086de:	ea42 0501 	orr.w	r5, r2, r1
 80086e2:	e7db      	b.n	800869c <__b2d+0x48>
 80086e4:	3ff00000 	.word	0x3ff00000

080086e8 <__d2b>:
 80086e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80086ec:	460f      	mov	r7, r1
 80086ee:	2101      	movs	r1, #1
 80086f0:	ec59 8b10 	vmov	r8, r9, d0
 80086f4:	4616      	mov	r6, r2
 80086f6:	f7ff fc1b 	bl	8007f30 <_Balloc>
 80086fa:	4604      	mov	r4, r0
 80086fc:	b930      	cbnz	r0, 800870c <__d2b+0x24>
 80086fe:	4602      	mov	r2, r0
 8008700:	4b23      	ldr	r3, [pc, #140]	@ (8008790 <__d2b+0xa8>)
 8008702:	4824      	ldr	r0, [pc, #144]	@ (8008794 <__d2b+0xac>)
 8008704:	f240 310f 	movw	r1, #783	@ 0x30f
 8008708:	f7fe fc9c 	bl	8007044 <__assert_func>
 800870c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008710:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008714:	b10d      	cbz	r5, 800871a <__d2b+0x32>
 8008716:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800871a:	9301      	str	r3, [sp, #4]
 800871c:	f1b8 0300 	subs.w	r3, r8, #0
 8008720:	d023      	beq.n	800876a <__d2b+0x82>
 8008722:	4668      	mov	r0, sp
 8008724:	9300      	str	r3, [sp, #0]
 8008726:	f7ff fd14 	bl	8008152 <__lo0bits>
 800872a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800872e:	b1d0      	cbz	r0, 8008766 <__d2b+0x7e>
 8008730:	f1c0 0320 	rsb	r3, r0, #32
 8008734:	fa02 f303 	lsl.w	r3, r2, r3
 8008738:	430b      	orrs	r3, r1
 800873a:	40c2      	lsrs	r2, r0
 800873c:	6163      	str	r3, [r4, #20]
 800873e:	9201      	str	r2, [sp, #4]
 8008740:	9b01      	ldr	r3, [sp, #4]
 8008742:	61a3      	str	r3, [r4, #24]
 8008744:	2b00      	cmp	r3, #0
 8008746:	bf0c      	ite	eq
 8008748:	2201      	moveq	r2, #1
 800874a:	2202      	movne	r2, #2
 800874c:	6122      	str	r2, [r4, #16]
 800874e:	b1a5      	cbz	r5, 800877a <__d2b+0x92>
 8008750:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008754:	4405      	add	r5, r0
 8008756:	603d      	str	r5, [r7, #0]
 8008758:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800875c:	6030      	str	r0, [r6, #0]
 800875e:	4620      	mov	r0, r4
 8008760:	b003      	add	sp, #12
 8008762:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008766:	6161      	str	r1, [r4, #20]
 8008768:	e7ea      	b.n	8008740 <__d2b+0x58>
 800876a:	a801      	add	r0, sp, #4
 800876c:	f7ff fcf1 	bl	8008152 <__lo0bits>
 8008770:	9b01      	ldr	r3, [sp, #4]
 8008772:	6163      	str	r3, [r4, #20]
 8008774:	3020      	adds	r0, #32
 8008776:	2201      	movs	r2, #1
 8008778:	e7e8      	b.n	800874c <__d2b+0x64>
 800877a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800877e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008782:	6038      	str	r0, [r7, #0]
 8008784:	6918      	ldr	r0, [r3, #16]
 8008786:	f7ff fcc5 	bl	8008114 <__hi0bits>
 800878a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800878e:	e7e5      	b.n	800875c <__d2b+0x74>
 8008790:	0800aa35 	.word	0x0800aa35
 8008794:	0800aa46 	.word	0x0800aa46

08008798 <__ratio>:
 8008798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800879c:	b085      	sub	sp, #20
 800879e:	e9cd 1000 	strd	r1, r0, [sp]
 80087a2:	a902      	add	r1, sp, #8
 80087a4:	f7ff ff56 	bl	8008654 <__b2d>
 80087a8:	9800      	ldr	r0, [sp, #0]
 80087aa:	a903      	add	r1, sp, #12
 80087ac:	ec55 4b10 	vmov	r4, r5, d0
 80087b0:	f7ff ff50 	bl	8008654 <__b2d>
 80087b4:	9b01      	ldr	r3, [sp, #4]
 80087b6:	6919      	ldr	r1, [r3, #16]
 80087b8:	9b00      	ldr	r3, [sp, #0]
 80087ba:	691b      	ldr	r3, [r3, #16]
 80087bc:	1ac9      	subs	r1, r1, r3
 80087be:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80087c2:	1a9b      	subs	r3, r3, r2
 80087c4:	ec5b ab10 	vmov	sl, fp, d0
 80087c8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	bfce      	itee	gt
 80087d0:	462a      	movgt	r2, r5
 80087d2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80087d6:	465a      	movle	r2, fp
 80087d8:	462f      	mov	r7, r5
 80087da:	46d9      	mov	r9, fp
 80087dc:	bfcc      	ite	gt
 80087de:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80087e2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80087e6:	464b      	mov	r3, r9
 80087e8:	4652      	mov	r2, sl
 80087ea:	4620      	mov	r0, r4
 80087ec:	4639      	mov	r1, r7
 80087ee:	f7f8 f855 	bl	800089c <__aeabi_ddiv>
 80087f2:	ec41 0b10 	vmov	d0, r0, r1
 80087f6:	b005      	add	sp, #20
 80087f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080087fc <__copybits>:
 80087fc:	3901      	subs	r1, #1
 80087fe:	b570      	push	{r4, r5, r6, lr}
 8008800:	1149      	asrs	r1, r1, #5
 8008802:	6914      	ldr	r4, [r2, #16]
 8008804:	3101      	adds	r1, #1
 8008806:	f102 0314 	add.w	r3, r2, #20
 800880a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800880e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008812:	1f05      	subs	r5, r0, #4
 8008814:	42a3      	cmp	r3, r4
 8008816:	d30c      	bcc.n	8008832 <__copybits+0x36>
 8008818:	1aa3      	subs	r3, r4, r2
 800881a:	3b11      	subs	r3, #17
 800881c:	f023 0303 	bic.w	r3, r3, #3
 8008820:	3211      	adds	r2, #17
 8008822:	42a2      	cmp	r2, r4
 8008824:	bf88      	it	hi
 8008826:	2300      	movhi	r3, #0
 8008828:	4418      	add	r0, r3
 800882a:	2300      	movs	r3, #0
 800882c:	4288      	cmp	r0, r1
 800882e:	d305      	bcc.n	800883c <__copybits+0x40>
 8008830:	bd70      	pop	{r4, r5, r6, pc}
 8008832:	f853 6b04 	ldr.w	r6, [r3], #4
 8008836:	f845 6f04 	str.w	r6, [r5, #4]!
 800883a:	e7eb      	b.n	8008814 <__copybits+0x18>
 800883c:	f840 3b04 	str.w	r3, [r0], #4
 8008840:	e7f4      	b.n	800882c <__copybits+0x30>

08008842 <__any_on>:
 8008842:	f100 0214 	add.w	r2, r0, #20
 8008846:	6900      	ldr	r0, [r0, #16]
 8008848:	114b      	asrs	r3, r1, #5
 800884a:	4298      	cmp	r0, r3
 800884c:	b510      	push	{r4, lr}
 800884e:	db11      	blt.n	8008874 <__any_on+0x32>
 8008850:	dd0a      	ble.n	8008868 <__any_on+0x26>
 8008852:	f011 011f 	ands.w	r1, r1, #31
 8008856:	d007      	beq.n	8008868 <__any_on+0x26>
 8008858:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800885c:	fa24 f001 	lsr.w	r0, r4, r1
 8008860:	fa00 f101 	lsl.w	r1, r0, r1
 8008864:	428c      	cmp	r4, r1
 8008866:	d10b      	bne.n	8008880 <__any_on+0x3e>
 8008868:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800886c:	4293      	cmp	r3, r2
 800886e:	d803      	bhi.n	8008878 <__any_on+0x36>
 8008870:	2000      	movs	r0, #0
 8008872:	bd10      	pop	{r4, pc}
 8008874:	4603      	mov	r3, r0
 8008876:	e7f7      	b.n	8008868 <__any_on+0x26>
 8008878:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800887c:	2900      	cmp	r1, #0
 800887e:	d0f5      	beq.n	800886c <__any_on+0x2a>
 8008880:	2001      	movs	r0, #1
 8008882:	e7f6      	b.n	8008872 <__any_on+0x30>

08008884 <sulp>:
 8008884:	b570      	push	{r4, r5, r6, lr}
 8008886:	4604      	mov	r4, r0
 8008888:	460d      	mov	r5, r1
 800888a:	ec45 4b10 	vmov	d0, r4, r5
 800888e:	4616      	mov	r6, r2
 8008890:	f7ff feba 	bl	8008608 <__ulp>
 8008894:	ec51 0b10 	vmov	r0, r1, d0
 8008898:	b17e      	cbz	r6, 80088ba <sulp+0x36>
 800889a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800889e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	dd09      	ble.n	80088ba <sulp+0x36>
 80088a6:	051b      	lsls	r3, r3, #20
 80088a8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80088ac:	2400      	movs	r4, #0
 80088ae:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80088b2:	4622      	mov	r2, r4
 80088b4:	462b      	mov	r3, r5
 80088b6:	f7f7 fec7 	bl	8000648 <__aeabi_dmul>
 80088ba:	ec41 0b10 	vmov	d0, r0, r1
 80088be:	bd70      	pop	{r4, r5, r6, pc}

080088c0 <_strtod_l>:
 80088c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c4:	b09f      	sub	sp, #124	@ 0x7c
 80088c6:	460c      	mov	r4, r1
 80088c8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80088ca:	2200      	movs	r2, #0
 80088cc:	921a      	str	r2, [sp, #104]	@ 0x68
 80088ce:	9005      	str	r0, [sp, #20]
 80088d0:	f04f 0a00 	mov.w	sl, #0
 80088d4:	f04f 0b00 	mov.w	fp, #0
 80088d8:	460a      	mov	r2, r1
 80088da:	9219      	str	r2, [sp, #100]	@ 0x64
 80088dc:	7811      	ldrb	r1, [r2, #0]
 80088de:	292b      	cmp	r1, #43	@ 0x2b
 80088e0:	d04a      	beq.n	8008978 <_strtod_l+0xb8>
 80088e2:	d838      	bhi.n	8008956 <_strtod_l+0x96>
 80088e4:	290d      	cmp	r1, #13
 80088e6:	d832      	bhi.n	800894e <_strtod_l+0x8e>
 80088e8:	2908      	cmp	r1, #8
 80088ea:	d832      	bhi.n	8008952 <_strtod_l+0x92>
 80088ec:	2900      	cmp	r1, #0
 80088ee:	d03b      	beq.n	8008968 <_strtod_l+0xa8>
 80088f0:	2200      	movs	r2, #0
 80088f2:	920e      	str	r2, [sp, #56]	@ 0x38
 80088f4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80088f6:	782a      	ldrb	r2, [r5, #0]
 80088f8:	2a30      	cmp	r2, #48	@ 0x30
 80088fa:	f040 80b2 	bne.w	8008a62 <_strtod_l+0x1a2>
 80088fe:	786a      	ldrb	r2, [r5, #1]
 8008900:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008904:	2a58      	cmp	r2, #88	@ 0x58
 8008906:	d16e      	bne.n	80089e6 <_strtod_l+0x126>
 8008908:	9302      	str	r3, [sp, #8]
 800890a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800890c:	9301      	str	r3, [sp, #4]
 800890e:	ab1a      	add	r3, sp, #104	@ 0x68
 8008910:	9300      	str	r3, [sp, #0]
 8008912:	4a8f      	ldr	r2, [pc, #572]	@ (8008b50 <_strtod_l+0x290>)
 8008914:	9805      	ldr	r0, [sp, #20]
 8008916:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008918:	a919      	add	r1, sp, #100	@ 0x64
 800891a:	f001 fae7 	bl	8009eec <__gethex>
 800891e:	f010 060f 	ands.w	r6, r0, #15
 8008922:	4604      	mov	r4, r0
 8008924:	d005      	beq.n	8008932 <_strtod_l+0x72>
 8008926:	2e06      	cmp	r6, #6
 8008928:	d128      	bne.n	800897c <_strtod_l+0xbc>
 800892a:	3501      	adds	r5, #1
 800892c:	2300      	movs	r3, #0
 800892e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008930:	930e      	str	r3, [sp, #56]	@ 0x38
 8008932:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008934:	2b00      	cmp	r3, #0
 8008936:	f040 858e 	bne.w	8009456 <_strtod_l+0xb96>
 800893a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800893c:	b1cb      	cbz	r3, 8008972 <_strtod_l+0xb2>
 800893e:	4652      	mov	r2, sl
 8008940:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008944:	ec43 2b10 	vmov	d0, r2, r3
 8008948:	b01f      	add	sp, #124	@ 0x7c
 800894a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800894e:	2920      	cmp	r1, #32
 8008950:	d1ce      	bne.n	80088f0 <_strtod_l+0x30>
 8008952:	3201      	adds	r2, #1
 8008954:	e7c1      	b.n	80088da <_strtod_l+0x1a>
 8008956:	292d      	cmp	r1, #45	@ 0x2d
 8008958:	d1ca      	bne.n	80088f0 <_strtod_l+0x30>
 800895a:	2101      	movs	r1, #1
 800895c:	910e      	str	r1, [sp, #56]	@ 0x38
 800895e:	1c51      	adds	r1, r2, #1
 8008960:	9119      	str	r1, [sp, #100]	@ 0x64
 8008962:	7852      	ldrb	r2, [r2, #1]
 8008964:	2a00      	cmp	r2, #0
 8008966:	d1c5      	bne.n	80088f4 <_strtod_l+0x34>
 8008968:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800896a:	9419      	str	r4, [sp, #100]	@ 0x64
 800896c:	2b00      	cmp	r3, #0
 800896e:	f040 8570 	bne.w	8009452 <_strtod_l+0xb92>
 8008972:	4652      	mov	r2, sl
 8008974:	465b      	mov	r3, fp
 8008976:	e7e5      	b.n	8008944 <_strtod_l+0x84>
 8008978:	2100      	movs	r1, #0
 800897a:	e7ef      	b.n	800895c <_strtod_l+0x9c>
 800897c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800897e:	b13a      	cbz	r2, 8008990 <_strtod_l+0xd0>
 8008980:	2135      	movs	r1, #53	@ 0x35
 8008982:	a81c      	add	r0, sp, #112	@ 0x70
 8008984:	f7ff ff3a 	bl	80087fc <__copybits>
 8008988:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800898a:	9805      	ldr	r0, [sp, #20]
 800898c:	f7ff fb10 	bl	8007fb0 <_Bfree>
 8008990:	3e01      	subs	r6, #1
 8008992:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008994:	2e04      	cmp	r6, #4
 8008996:	d806      	bhi.n	80089a6 <_strtod_l+0xe6>
 8008998:	e8df f006 	tbb	[pc, r6]
 800899c:	201d0314 	.word	0x201d0314
 80089a0:	14          	.byte	0x14
 80089a1:	00          	.byte	0x00
 80089a2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80089a6:	05e1      	lsls	r1, r4, #23
 80089a8:	bf48      	it	mi
 80089aa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80089ae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80089b2:	0d1b      	lsrs	r3, r3, #20
 80089b4:	051b      	lsls	r3, r3, #20
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d1bb      	bne.n	8008932 <_strtod_l+0x72>
 80089ba:	f7fe fb0f 	bl	8006fdc <__errno>
 80089be:	2322      	movs	r3, #34	@ 0x22
 80089c0:	6003      	str	r3, [r0, #0]
 80089c2:	e7b6      	b.n	8008932 <_strtod_l+0x72>
 80089c4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80089c8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80089cc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80089d0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80089d4:	e7e7      	b.n	80089a6 <_strtod_l+0xe6>
 80089d6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8008b58 <_strtod_l+0x298>
 80089da:	e7e4      	b.n	80089a6 <_strtod_l+0xe6>
 80089dc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80089e0:	f04f 3aff 	mov.w	sl, #4294967295
 80089e4:	e7df      	b.n	80089a6 <_strtod_l+0xe6>
 80089e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80089e8:	1c5a      	adds	r2, r3, #1
 80089ea:	9219      	str	r2, [sp, #100]	@ 0x64
 80089ec:	785b      	ldrb	r3, [r3, #1]
 80089ee:	2b30      	cmp	r3, #48	@ 0x30
 80089f0:	d0f9      	beq.n	80089e6 <_strtod_l+0x126>
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d09d      	beq.n	8008932 <_strtod_l+0x72>
 80089f6:	2301      	movs	r3, #1
 80089f8:	2700      	movs	r7, #0
 80089fa:	9308      	str	r3, [sp, #32]
 80089fc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80089fe:	930c      	str	r3, [sp, #48]	@ 0x30
 8008a00:	970b      	str	r7, [sp, #44]	@ 0x2c
 8008a02:	46b9      	mov	r9, r7
 8008a04:	220a      	movs	r2, #10
 8008a06:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008a08:	7805      	ldrb	r5, [r0, #0]
 8008a0a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008a0e:	b2d9      	uxtb	r1, r3
 8008a10:	2909      	cmp	r1, #9
 8008a12:	d928      	bls.n	8008a66 <_strtod_l+0x1a6>
 8008a14:	494f      	ldr	r1, [pc, #316]	@ (8008b54 <_strtod_l+0x294>)
 8008a16:	2201      	movs	r2, #1
 8008a18:	f001 f98c 	bl	8009d34 <strncmp>
 8008a1c:	2800      	cmp	r0, #0
 8008a1e:	d032      	beq.n	8008a86 <_strtod_l+0x1c6>
 8008a20:	2000      	movs	r0, #0
 8008a22:	462a      	mov	r2, r5
 8008a24:	900a      	str	r0, [sp, #40]	@ 0x28
 8008a26:	464d      	mov	r5, r9
 8008a28:	4603      	mov	r3, r0
 8008a2a:	2a65      	cmp	r2, #101	@ 0x65
 8008a2c:	d001      	beq.n	8008a32 <_strtod_l+0x172>
 8008a2e:	2a45      	cmp	r2, #69	@ 0x45
 8008a30:	d114      	bne.n	8008a5c <_strtod_l+0x19c>
 8008a32:	b91d      	cbnz	r5, 8008a3c <_strtod_l+0x17c>
 8008a34:	9a08      	ldr	r2, [sp, #32]
 8008a36:	4302      	orrs	r2, r0
 8008a38:	d096      	beq.n	8008968 <_strtod_l+0xa8>
 8008a3a:	2500      	movs	r5, #0
 8008a3c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008a3e:	1c62      	adds	r2, r4, #1
 8008a40:	9219      	str	r2, [sp, #100]	@ 0x64
 8008a42:	7862      	ldrb	r2, [r4, #1]
 8008a44:	2a2b      	cmp	r2, #43	@ 0x2b
 8008a46:	d07a      	beq.n	8008b3e <_strtod_l+0x27e>
 8008a48:	2a2d      	cmp	r2, #45	@ 0x2d
 8008a4a:	d07e      	beq.n	8008b4a <_strtod_l+0x28a>
 8008a4c:	f04f 0c00 	mov.w	ip, #0
 8008a50:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008a54:	2909      	cmp	r1, #9
 8008a56:	f240 8085 	bls.w	8008b64 <_strtod_l+0x2a4>
 8008a5a:	9419      	str	r4, [sp, #100]	@ 0x64
 8008a5c:	f04f 0800 	mov.w	r8, #0
 8008a60:	e0a5      	b.n	8008bae <_strtod_l+0x2ee>
 8008a62:	2300      	movs	r3, #0
 8008a64:	e7c8      	b.n	80089f8 <_strtod_l+0x138>
 8008a66:	f1b9 0f08 	cmp.w	r9, #8
 8008a6a:	bfd8      	it	le
 8008a6c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8008a6e:	f100 0001 	add.w	r0, r0, #1
 8008a72:	bfda      	itte	le
 8008a74:	fb02 3301 	mlale	r3, r2, r1, r3
 8008a78:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8008a7a:	fb02 3707 	mlagt	r7, r2, r7, r3
 8008a7e:	f109 0901 	add.w	r9, r9, #1
 8008a82:	9019      	str	r0, [sp, #100]	@ 0x64
 8008a84:	e7bf      	b.n	8008a06 <_strtod_l+0x146>
 8008a86:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008a88:	1c5a      	adds	r2, r3, #1
 8008a8a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008a8c:	785a      	ldrb	r2, [r3, #1]
 8008a8e:	f1b9 0f00 	cmp.w	r9, #0
 8008a92:	d03b      	beq.n	8008b0c <_strtod_l+0x24c>
 8008a94:	900a      	str	r0, [sp, #40]	@ 0x28
 8008a96:	464d      	mov	r5, r9
 8008a98:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008a9c:	2b09      	cmp	r3, #9
 8008a9e:	d912      	bls.n	8008ac6 <_strtod_l+0x206>
 8008aa0:	2301      	movs	r3, #1
 8008aa2:	e7c2      	b.n	8008a2a <_strtod_l+0x16a>
 8008aa4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008aa6:	1c5a      	adds	r2, r3, #1
 8008aa8:	9219      	str	r2, [sp, #100]	@ 0x64
 8008aaa:	785a      	ldrb	r2, [r3, #1]
 8008aac:	3001      	adds	r0, #1
 8008aae:	2a30      	cmp	r2, #48	@ 0x30
 8008ab0:	d0f8      	beq.n	8008aa4 <_strtod_l+0x1e4>
 8008ab2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008ab6:	2b08      	cmp	r3, #8
 8008ab8:	f200 84d2 	bhi.w	8009460 <_strtod_l+0xba0>
 8008abc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008abe:	900a      	str	r0, [sp, #40]	@ 0x28
 8008ac0:	2000      	movs	r0, #0
 8008ac2:	930c      	str	r3, [sp, #48]	@ 0x30
 8008ac4:	4605      	mov	r5, r0
 8008ac6:	3a30      	subs	r2, #48	@ 0x30
 8008ac8:	f100 0301 	add.w	r3, r0, #1
 8008acc:	d018      	beq.n	8008b00 <_strtod_l+0x240>
 8008ace:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008ad0:	4419      	add	r1, r3
 8008ad2:	910a      	str	r1, [sp, #40]	@ 0x28
 8008ad4:	462e      	mov	r6, r5
 8008ad6:	f04f 0e0a 	mov.w	lr, #10
 8008ada:	1c71      	adds	r1, r6, #1
 8008adc:	eba1 0c05 	sub.w	ip, r1, r5
 8008ae0:	4563      	cmp	r3, ip
 8008ae2:	dc15      	bgt.n	8008b10 <_strtod_l+0x250>
 8008ae4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8008ae8:	182b      	adds	r3, r5, r0
 8008aea:	2b08      	cmp	r3, #8
 8008aec:	f105 0501 	add.w	r5, r5, #1
 8008af0:	4405      	add	r5, r0
 8008af2:	dc1a      	bgt.n	8008b2a <_strtod_l+0x26a>
 8008af4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008af6:	230a      	movs	r3, #10
 8008af8:	fb03 2301 	mla	r3, r3, r1, r2
 8008afc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008afe:	2300      	movs	r3, #0
 8008b00:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008b02:	1c51      	adds	r1, r2, #1
 8008b04:	9119      	str	r1, [sp, #100]	@ 0x64
 8008b06:	7852      	ldrb	r2, [r2, #1]
 8008b08:	4618      	mov	r0, r3
 8008b0a:	e7c5      	b.n	8008a98 <_strtod_l+0x1d8>
 8008b0c:	4648      	mov	r0, r9
 8008b0e:	e7ce      	b.n	8008aae <_strtod_l+0x1ee>
 8008b10:	2e08      	cmp	r6, #8
 8008b12:	dc05      	bgt.n	8008b20 <_strtod_l+0x260>
 8008b14:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008b16:	fb0e f606 	mul.w	r6, lr, r6
 8008b1a:	960b      	str	r6, [sp, #44]	@ 0x2c
 8008b1c:	460e      	mov	r6, r1
 8008b1e:	e7dc      	b.n	8008ada <_strtod_l+0x21a>
 8008b20:	2910      	cmp	r1, #16
 8008b22:	bfd8      	it	le
 8008b24:	fb0e f707 	mulle.w	r7, lr, r7
 8008b28:	e7f8      	b.n	8008b1c <_strtod_l+0x25c>
 8008b2a:	2b0f      	cmp	r3, #15
 8008b2c:	bfdc      	itt	le
 8008b2e:	230a      	movle	r3, #10
 8008b30:	fb03 2707 	mlale	r7, r3, r7, r2
 8008b34:	e7e3      	b.n	8008afe <_strtod_l+0x23e>
 8008b36:	2300      	movs	r3, #0
 8008b38:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e77a      	b.n	8008a34 <_strtod_l+0x174>
 8008b3e:	f04f 0c00 	mov.w	ip, #0
 8008b42:	1ca2      	adds	r2, r4, #2
 8008b44:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b46:	78a2      	ldrb	r2, [r4, #2]
 8008b48:	e782      	b.n	8008a50 <_strtod_l+0x190>
 8008b4a:	f04f 0c01 	mov.w	ip, #1
 8008b4e:	e7f8      	b.n	8008b42 <_strtod_l+0x282>
 8008b50:	0800ac2c 	.word	0x0800ac2c
 8008b54:	0800aa9f 	.word	0x0800aa9f
 8008b58:	7ff00000 	.word	0x7ff00000
 8008b5c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008b5e:	1c51      	adds	r1, r2, #1
 8008b60:	9119      	str	r1, [sp, #100]	@ 0x64
 8008b62:	7852      	ldrb	r2, [r2, #1]
 8008b64:	2a30      	cmp	r2, #48	@ 0x30
 8008b66:	d0f9      	beq.n	8008b5c <_strtod_l+0x29c>
 8008b68:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008b6c:	2908      	cmp	r1, #8
 8008b6e:	f63f af75 	bhi.w	8008a5c <_strtod_l+0x19c>
 8008b72:	3a30      	subs	r2, #48	@ 0x30
 8008b74:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b76:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008b78:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008b7a:	f04f 080a 	mov.w	r8, #10
 8008b7e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008b80:	1c56      	adds	r6, r2, #1
 8008b82:	9619      	str	r6, [sp, #100]	@ 0x64
 8008b84:	7852      	ldrb	r2, [r2, #1]
 8008b86:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008b8a:	f1be 0f09 	cmp.w	lr, #9
 8008b8e:	d939      	bls.n	8008c04 <_strtod_l+0x344>
 8008b90:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008b92:	1a76      	subs	r6, r6, r1
 8008b94:	2e08      	cmp	r6, #8
 8008b96:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008b9a:	dc03      	bgt.n	8008ba4 <_strtod_l+0x2e4>
 8008b9c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008b9e:	4588      	cmp	r8, r1
 8008ba0:	bfa8      	it	ge
 8008ba2:	4688      	movge	r8, r1
 8008ba4:	f1bc 0f00 	cmp.w	ip, #0
 8008ba8:	d001      	beq.n	8008bae <_strtod_l+0x2ee>
 8008baa:	f1c8 0800 	rsb	r8, r8, #0
 8008bae:	2d00      	cmp	r5, #0
 8008bb0:	d14e      	bne.n	8008c50 <_strtod_l+0x390>
 8008bb2:	9908      	ldr	r1, [sp, #32]
 8008bb4:	4308      	orrs	r0, r1
 8008bb6:	f47f aebc 	bne.w	8008932 <_strtod_l+0x72>
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	f47f aed4 	bne.w	8008968 <_strtod_l+0xa8>
 8008bc0:	2a69      	cmp	r2, #105	@ 0x69
 8008bc2:	d028      	beq.n	8008c16 <_strtod_l+0x356>
 8008bc4:	dc25      	bgt.n	8008c12 <_strtod_l+0x352>
 8008bc6:	2a49      	cmp	r2, #73	@ 0x49
 8008bc8:	d025      	beq.n	8008c16 <_strtod_l+0x356>
 8008bca:	2a4e      	cmp	r2, #78	@ 0x4e
 8008bcc:	f47f aecc 	bne.w	8008968 <_strtod_l+0xa8>
 8008bd0:	499a      	ldr	r1, [pc, #616]	@ (8008e3c <_strtod_l+0x57c>)
 8008bd2:	a819      	add	r0, sp, #100	@ 0x64
 8008bd4:	f001 fbac 	bl	800a330 <__match>
 8008bd8:	2800      	cmp	r0, #0
 8008bda:	f43f aec5 	beq.w	8008968 <_strtod_l+0xa8>
 8008bde:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008be0:	781b      	ldrb	r3, [r3, #0]
 8008be2:	2b28      	cmp	r3, #40	@ 0x28
 8008be4:	d12e      	bne.n	8008c44 <_strtod_l+0x384>
 8008be6:	4996      	ldr	r1, [pc, #600]	@ (8008e40 <_strtod_l+0x580>)
 8008be8:	aa1c      	add	r2, sp, #112	@ 0x70
 8008bea:	a819      	add	r0, sp, #100	@ 0x64
 8008bec:	f001 fbb4 	bl	800a358 <__hexnan>
 8008bf0:	2805      	cmp	r0, #5
 8008bf2:	d127      	bne.n	8008c44 <_strtod_l+0x384>
 8008bf4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008bf6:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008bfa:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008bfe:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008c02:	e696      	b.n	8008932 <_strtod_l+0x72>
 8008c04:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008c06:	fb08 2101 	mla	r1, r8, r1, r2
 8008c0a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008c0e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c10:	e7b5      	b.n	8008b7e <_strtod_l+0x2be>
 8008c12:	2a6e      	cmp	r2, #110	@ 0x6e
 8008c14:	e7da      	b.n	8008bcc <_strtod_l+0x30c>
 8008c16:	498b      	ldr	r1, [pc, #556]	@ (8008e44 <_strtod_l+0x584>)
 8008c18:	a819      	add	r0, sp, #100	@ 0x64
 8008c1a:	f001 fb89 	bl	800a330 <__match>
 8008c1e:	2800      	cmp	r0, #0
 8008c20:	f43f aea2 	beq.w	8008968 <_strtod_l+0xa8>
 8008c24:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c26:	4988      	ldr	r1, [pc, #544]	@ (8008e48 <_strtod_l+0x588>)
 8008c28:	3b01      	subs	r3, #1
 8008c2a:	a819      	add	r0, sp, #100	@ 0x64
 8008c2c:	9319      	str	r3, [sp, #100]	@ 0x64
 8008c2e:	f001 fb7f 	bl	800a330 <__match>
 8008c32:	b910      	cbnz	r0, 8008c3a <_strtod_l+0x37a>
 8008c34:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c36:	3301      	adds	r3, #1
 8008c38:	9319      	str	r3, [sp, #100]	@ 0x64
 8008c3a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8008e58 <_strtod_l+0x598>
 8008c3e:	f04f 0a00 	mov.w	sl, #0
 8008c42:	e676      	b.n	8008932 <_strtod_l+0x72>
 8008c44:	4881      	ldr	r0, [pc, #516]	@ (8008e4c <_strtod_l+0x58c>)
 8008c46:	f001 f8c7 	bl	8009dd8 <nan>
 8008c4a:	ec5b ab10 	vmov	sl, fp, d0
 8008c4e:	e670      	b.n	8008932 <_strtod_l+0x72>
 8008c50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c52:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8008c54:	eba8 0303 	sub.w	r3, r8, r3
 8008c58:	f1b9 0f00 	cmp.w	r9, #0
 8008c5c:	bf08      	it	eq
 8008c5e:	46a9      	moveq	r9, r5
 8008c60:	2d10      	cmp	r5, #16
 8008c62:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c64:	462c      	mov	r4, r5
 8008c66:	bfa8      	it	ge
 8008c68:	2410      	movge	r4, #16
 8008c6a:	f7f7 fc73 	bl	8000554 <__aeabi_ui2d>
 8008c6e:	2d09      	cmp	r5, #9
 8008c70:	4682      	mov	sl, r0
 8008c72:	468b      	mov	fp, r1
 8008c74:	dc13      	bgt.n	8008c9e <_strtod_l+0x3de>
 8008c76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	f43f ae5a 	beq.w	8008932 <_strtod_l+0x72>
 8008c7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c80:	dd78      	ble.n	8008d74 <_strtod_l+0x4b4>
 8008c82:	2b16      	cmp	r3, #22
 8008c84:	dc5f      	bgt.n	8008d46 <_strtod_l+0x486>
 8008c86:	4972      	ldr	r1, [pc, #456]	@ (8008e50 <_strtod_l+0x590>)
 8008c88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008c8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c90:	4652      	mov	r2, sl
 8008c92:	465b      	mov	r3, fp
 8008c94:	f7f7 fcd8 	bl	8000648 <__aeabi_dmul>
 8008c98:	4682      	mov	sl, r0
 8008c9a:	468b      	mov	fp, r1
 8008c9c:	e649      	b.n	8008932 <_strtod_l+0x72>
 8008c9e:	4b6c      	ldr	r3, [pc, #432]	@ (8008e50 <_strtod_l+0x590>)
 8008ca0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008ca4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008ca8:	f7f7 fcce 	bl	8000648 <__aeabi_dmul>
 8008cac:	4682      	mov	sl, r0
 8008cae:	4638      	mov	r0, r7
 8008cb0:	468b      	mov	fp, r1
 8008cb2:	f7f7 fc4f 	bl	8000554 <__aeabi_ui2d>
 8008cb6:	4602      	mov	r2, r0
 8008cb8:	460b      	mov	r3, r1
 8008cba:	4650      	mov	r0, sl
 8008cbc:	4659      	mov	r1, fp
 8008cbe:	f7f7 fb0d 	bl	80002dc <__adddf3>
 8008cc2:	2d0f      	cmp	r5, #15
 8008cc4:	4682      	mov	sl, r0
 8008cc6:	468b      	mov	fp, r1
 8008cc8:	ddd5      	ble.n	8008c76 <_strtod_l+0x3b6>
 8008cca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ccc:	1b2c      	subs	r4, r5, r4
 8008cce:	441c      	add	r4, r3
 8008cd0:	2c00      	cmp	r4, #0
 8008cd2:	f340 8093 	ble.w	8008dfc <_strtod_l+0x53c>
 8008cd6:	f014 030f 	ands.w	r3, r4, #15
 8008cda:	d00a      	beq.n	8008cf2 <_strtod_l+0x432>
 8008cdc:	495c      	ldr	r1, [pc, #368]	@ (8008e50 <_strtod_l+0x590>)
 8008cde:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008ce2:	4652      	mov	r2, sl
 8008ce4:	465b      	mov	r3, fp
 8008ce6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008cea:	f7f7 fcad 	bl	8000648 <__aeabi_dmul>
 8008cee:	4682      	mov	sl, r0
 8008cf0:	468b      	mov	fp, r1
 8008cf2:	f034 040f 	bics.w	r4, r4, #15
 8008cf6:	d073      	beq.n	8008de0 <_strtod_l+0x520>
 8008cf8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008cfc:	dd49      	ble.n	8008d92 <_strtod_l+0x4d2>
 8008cfe:	2400      	movs	r4, #0
 8008d00:	46a0      	mov	r8, r4
 8008d02:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008d04:	46a1      	mov	r9, r4
 8008d06:	9a05      	ldr	r2, [sp, #20]
 8008d08:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8008e58 <_strtod_l+0x598>
 8008d0c:	2322      	movs	r3, #34	@ 0x22
 8008d0e:	6013      	str	r3, [r2, #0]
 8008d10:	f04f 0a00 	mov.w	sl, #0
 8008d14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	f43f ae0b 	beq.w	8008932 <_strtod_l+0x72>
 8008d1c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008d1e:	9805      	ldr	r0, [sp, #20]
 8008d20:	f7ff f946 	bl	8007fb0 <_Bfree>
 8008d24:	9805      	ldr	r0, [sp, #20]
 8008d26:	4649      	mov	r1, r9
 8008d28:	f7ff f942 	bl	8007fb0 <_Bfree>
 8008d2c:	9805      	ldr	r0, [sp, #20]
 8008d2e:	4641      	mov	r1, r8
 8008d30:	f7ff f93e 	bl	8007fb0 <_Bfree>
 8008d34:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008d36:	9805      	ldr	r0, [sp, #20]
 8008d38:	f7ff f93a 	bl	8007fb0 <_Bfree>
 8008d3c:	9805      	ldr	r0, [sp, #20]
 8008d3e:	4621      	mov	r1, r4
 8008d40:	f7ff f936 	bl	8007fb0 <_Bfree>
 8008d44:	e5f5      	b.n	8008932 <_strtod_l+0x72>
 8008d46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d48:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	dbbc      	blt.n	8008cca <_strtod_l+0x40a>
 8008d50:	4c3f      	ldr	r4, [pc, #252]	@ (8008e50 <_strtod_l+0x590>)
 8008d52:	f1c5 050f 	rsb	r5, r5, #15
 8008d56:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008d5a:	4652      	mov	r2, sl
 8008d5c:	465b      	mov	r3, fp
 8008d5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008d62:	f7f7 fc71 	bl	8000648 <__aeabi_dmul>
 8008d66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d68:	1b5d      	subs	r5, r3, r5
 8008d6a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008d6e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008d72:	e78f      	b.n	8008c94 <_strtod_l+0x3d4>
 8008d74:	3316      	adds	r3, #22
 8008d76:	dba8      	blt.n	8008cca <_strtod_l+0x40a>
 8008d78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d7a:	eba3 0808 	sub.w	r8, r3, r8
 8008d7e:	4b34      	ldr	r3, [pc, #208]	@ (8008e50 <_strtod_l+0x590>)
 8008d80:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008d84:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008d88:	4650      	mov	r0, sl
 8008d8a:	4659      	mov	r1, fp
 8008d8c:	f7f7 fd86 	bl	800089c <__aeabi_ddiv>
 8008d90:	e782      	b.n	8008c98 <_strtod_l+0x3d8>
 8008d92:	2300      	movs	r3, #0
 8008d94:	4f2f      	ldr	r7, [pc, #188]	@ (8008e54 <_strtod_l+0x594>)
 8008d96:	1124      	asrs	r4, r4, #4
 8008d98:	4650      	mov	r0, sl
 8008d9a:	4659      	mov	r1, fp
 8008d9c:	461e      	mov	r6, r3
 8008d9e:	2c01      	cmp	r4, #1
 8008da0:	dc21      	bgt.n	8008de6 <_strtod_l+0x526>
 8008da2:	b10b      	cbz	r3, 8008da8 <_strtod_l+0x4e8>
 8008da4:	4682      	mov	sl, r0
 8008da6:	468b      	mov	fp, r1
 8008da8:	492a      	ldr	r1, [pc, #168]	@ (8008e54 <_strtod_l+0x594>)
 8008daa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008dae:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008db2:	4652      	mov	r2, sl
 8008db4:	465b      	mov	r3, fp
 8008db6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dba:	f7f7 fc45 	bl	8000648 <__aeabi_dmul>
 8008dbe:	4b26      	ldr	r3, [pc, #152]	@ (8008e58 <_strtod_l+0x598>)
 8008dc0:	460a      	mov	r2, r1
 8008dc2:	400b      	ands	r3, r1
 8008dc4:	4925      	ldr	r1, [pc, #148]	@ (8008e5c <_strtod_l+0x59c>)
 8008dc6:	428b      	cmp	r3, r1
 8008dc8:	4682      	mov	sl, r0
 8008dca:	d898      	bhi.n	8008cfe <_strtod_l+0x43e>
 8008dcc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008dd0:	428b      	cmp	r3, r1
 8008dd2:	bf86      	itte	hi
 8008dd4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8008e60 <_strtod_l+0x5a0>
 8008dd8:	f04f 3aff 	movhi.w	sl, #4294967295
 8008ddc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008de0:	2300      	movs	r3, #0
 8008de2:	9308      	str	r3, [sp, #32]
 8008de4:	e076      	b.n	8008ed4 <_strtod_l+0x614>
 8008de6:	07e2      	lsls	r2, r4, #31
 8008de8:	d504      	bpl.n	8008df4 <_strtod_l+0x534>
 8008dea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dee:	f7f7 fc2b 	bl	8000648 <__aeabi_dmul>
 8008df2:	2301      	movs	r3, #1
 8008df4:	3601      	adds	r6, #1
 8008df6:	1064      	asrs	r4, r4, #1
 8008df8:	3708      	adds	r7, #8
 8008dfa:	e7d0      	b.n	8008d9e <_strtod_l+0x4de>
 8008dfc:	d0f0      	beq.n	8008de0 <_strtod_l+0x520>
 8008dfe:	4264      	negs	r4, r4
 8008e00:	f014 020f 	ands.w	r2, r4, #15
 8008e04:	d00a      	beq.n	8008e1c <_strtod_l+0x55c>
 8008e06:	4b12      	ldr	r3, [pc, #72]	@ (8008e50 <_strtod_l+0x590>)
 8008e08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e0c:	4650      	mov	r0, sl
 8008e0e:	4659      	mov	r1, fp
 8008e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e14:	f7f7 fd42 	bl	800089c <__aeabi_ddiv>
 8008e18:	4682      	mov	sl, r0
 8008e1a:	468b      	mov	fp, r1
 8008e1c:	1124      	asrs	r4, r4, #4
 8008e1e:	d0df      	beq.n	8008de0 <_strtod_l+0x520>
 8008e20:	2c1f      	cmp	r4, #31
 8008e22:	dd1f      	ble.n	8008e64 <_strtod_l+0x5a4>
 8008e24:	2400      	movs	r4, #0
 8008e26:	46a0      	mov	r8, r4
 8008e28:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008e2a:	46a1      	mov	r9, r4
 8008e2c:	9a05      	ldr	r2, [sp, #20]
 8008e2e:	2322      	movs	r3, #34	@ 0x22
 8008e30:	f04f 0a00 	mov.w	sl, #0
 8008e34:	f04f 0b00 	mov.w	fp, #0
 8008e38:	6013      	str	r3, [r2, #0]
 8008e3a:	e76b      	b.n	8008d14 <_strtod_l+0x454>
 8008e3c:	0800a968 	.word	0x0800a968
 8008e40:	0800ac18 	.word	0x0800ac18
 8008e44:	0800a960 	.word	0x0800a960
 8008e48:	0800a9d3 	.word	0x0800a9d3
 8008e4c:	0800a9cf 	.word	0x0800a9cf
 8008e50:	0800ab50 	.word	0x0800ab50
 8008e54:	0800ab28 	.word	0x0800ab28
 8008e58:	7ff00000 	.word	0x7ff00000
 8008e5c:	7ca00000 	.word	0x7ca00000
 8008e60:	7fefffff 	.word	0x7fefffff
 8008e64:	f014 0310 	ands.w	r3, r4, #16
 8008e68:	bf18      	it	ne
 8008e6a:	236a      	movne	r3, #106	@ 0x6a
 8008e6c:	4ea9      	ldr	r6, [pc, #676]	@ (8009114 <_strtod_l+0x854>)
 8008e6e:	9308      	str	r3, [sp, #32]
 8008e70:	4650      	mov	r0, sl
 8008e72:	4659      	mov	r1, fp
 8008e74:	2300      	movs	r3, #0
 8008e76:	07e7      	lsls	r7, r4, #31
 8008e78:	d504      	bpl.n	8008e84 <_strtod_l+0x5c4>
 8008e7a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008e7e:	f7f7 fbe3 	bl	8000648 <__aeabi_dmul>
 8008e82:	2301      	movs	r3, #1
 8008e84:	1064      	asrs	r4, r4, #1
 8008e86:	f106 0608 	add.w	r6, r6, #8
 8008e8a:	d1f4      	bne.n	8008e76 <_strtod_l+0x5b6>
 8008e8c:	b10b      	cbz	r3, 8008e92 <_strtod_l+0x5d2>
 8008e8e:	4682      	mov	sl, r0
 8008e90:	468b      	mov	fp, r1
 8008e92:	9b08      	ldr	r3, [sp, #32]
 8008e94:	b1b3      	cbz	r3, 8008ec4 <_strtod_l+0x604>
 8008e96:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008e9a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	4659      	mov	r1, fp
 8008ea2:	dd0f      	ble.n	8008ec4 <_strtod_l+0x604>
 8008ea4:	2b1f      	cmp	r3, #31
 8008ea6:	dd56      	ble.n	8008f56 <_strtod_l+0x696>
 8008ea8:	2b34      	cmp	r3, #52	@ 0x34
 8008eaa:	bfde      	ittt	le
 8008eac:	f04f 33ff 	movle.w	r3, #4294967295
 8008eb0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008eb4:	4093      	lslle	r3, r2
 8008eb6:	f04f 0a00 	mov.w	sl, #0
 8008eba:	bfcc      	ite	gt
 8008ebc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008ec0:	ea03 0b01 	andle.w	fp, r3, r1
 8008ec4:	2200      	movs	r2, #0
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	4650      	mov	r0, sl
 8008eca:	4659      	mov	r1, fp
 8008ecc:	f7f7 fe24 	bl	8000b18 <__aeabi_dcmpeq>
 8008ed0:	2800      	cmp	r0, #0
 8008ed2:	d1a7      	bne.n	8008e24 <_strtod_l+0x564>
 8008ed4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ed6:	9300      	str	r3, [sp, #0]
 8008ed8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008eda:	9805      	ldr	r0, [sp, #20]
 8008edc:	462b      	mov	r3, r5
 8008ede:	464a      	mov	r2, r9
 8008ee0:	f7ff f8ce 	bl	8008080 <__s2b>
 8008ee4:	900b      	str	r0, [sp, #44]	@ 0x2c
 8008ee6:	2800      	cmp	r0, #0
 8008ee8:	f43f af09 	beq.w	8008cfe <_strtod_l+0x43e>
 8008eec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008eee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ef0:	2a00      	cmp	r2, #0
 8008ef2:	eba3 0308 	sub.w	r3, r3, r8
 8008ef6:	bfa8      	it	ge
 8008ef8:	2300      	movge	r3, #0
 8008efa:	9312      	str	r3, [sp, #72]	@ 0x48
 8008efc:	2400      	movs	r4, #0
 8008efe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008f02:	9316      	str	r3, [sp, #88]	@ 0x58
 8008f04:	46a0      	mov	r8, r4
 8008f06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f08:	9805      	ldr	r0, [sp, #20]
 8008f0a:	6859      	ldr	r1, [r3, #4]
 8008f0c:	f7ff f810 	bl	8007f30 <_Balloc>
 8008f10:	4681      	mov	r9, r0
 8008f12:	2800      	cmp	r0, #0
 8008f14:	f43f aef7 	beq.w	8008d06 <_strtod_l+0x446>
 8008f18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f1a:	691a      	ldr	r2, [r3, #16]
 8008f1c:	3202      	adds	r2, #2
 8008f1e:	f103 010c 	add.w	r1, r3, #12
 8008f22:	0092      	lsls	r2, r2, #2
 8008f24:	300c      	adds	r0, #12
 8008f26:	f000 ff49 	bl	8009dbc <memcpy>
 8008f2a:	ec4b ab10 	vmov	d0, sl, fp
 8008f2e:	9805      	ldr	r0, [sp, #20]
 8008f30:	aa1c      	add	r2, sp, #112	@ 0x70
 8008f32:	a91b      	add	r1, sp, #108	@ 0x6c
 8008f34:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8008f38:	f7ff fbd6 	bl	80086e8 <__d2b>
 8008f3c:	901a      	str	r0, [sp, #104]	@ 0x68
 8008f3e:	2800      	cmp	r0, #0
 8008f40:	f43f aee1 	beq.w	8008d06 <_strtod_l+0x446>
 8008f44:	9805      	ldr	r0, [sp, #20]
 8008f46:	2101      	movs	r1, #1
 8008f48:	f7ff f930 	bl	80081ac <__i2b>
 8008f4c:	4680      	mov	r8, r0
 8008f4e:	b948      	cbnz	r0, 8008f64 <_strtod_l+0x6a4>
 8008f50:	f04f 0800 	mov.w	r8, #0
 8008f54:	e6d7      	b.n	8008d06 <_strtod_l+0x446>
 8008f56:	f04f 32ff 	mov.w	r2, #4294967295
 8008f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f5e:	ea03 0a0a 	and.w	sl, r3, sl
 8008f62:	e7af      	b.n	8008ec4 <_strtod_l+0x604>
 8008f64:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8008f66:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8008f68:	2d00      	cmp	r5, #0
 8008f6a:	bfab      	itete	ge
 8008f6c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008f6e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008f70:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008f72:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008f74:	bfac      	ite	ge
 8008f76:	18ef      	addge	r7, r5, r3
 8008f78:	1b5e      	sublt	r6, r3, r5
 8008f7a:	9b08      	ldr	r3, [sp, #32]
 8008f7c:	1aed      	subs	r5, r5, r3
 8008f7e:	4415      	add	r5, r2
 8008f80:	4b65      	ldr	r3, [pc, #404]	@ (8009118 <_strtod_l+0x858>)
 8008f82:	3d01      	subs	r5, #1
 8008f84:	429d      	cmp	r5, r3
 8008f86:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008f8a:	da50      	bge.n	800902e <_strtod_l+0x76e>
 8008f8c:	1b5b      	subs	r3, r3, r5
 8008f8e:	2b1f      	cmp	r3, #31
 8008f90:	eba2 0203 	sub.w	r2, r2, r3
 8008f94:	f04f 0101 	mov.w	r1, #1
 8008f98:	dc3d      	bgt.n	8009016 <_strtod_l+0x756>
 8008f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8008f9e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	9310      	str	r3, [sp, #64]	@ 0x40
 8008fa4:	18bd      	adds	r5, r7, r2
 8008fa6:	9b08      	ldr	r3, [sp, #32]
 8008fa8:	42af      	cmp	r7, r5
 8008faa:	4416      	add	r6, r2
 8008fac:	441e      	add	r6, r3
 8008fae:	463b      	mov	r3, r7
 8008fb0:	bfa8      	it	ge
 8008fb2:	462b      	movge	r3, r5
 8008fb4:	42b3      	cmp	r3, r6
 8008fb6:	bfa8      	it	ge
 8008fb8:	4633      	movge	r3, r6
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	bfc2      	ittt	gt
 8008fbe:	1aed      	subgt	r5, r5, r3
 8008fc0:	1af6      	subgt	r6, r6, r3
 8008fc2:	1aff      	subgt	r7, r7, r3
 8008fc4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	dd16      	ble.n	8008ff8 <_strtod_l+0x738>
 8008fca:	4641      	mov	r1, r8
 8008fcc:	9805      	ldr	r0, [sp, #20]
 8008fce:	461a      	mov	r2, r3
 8008fd0:	f7ff f9a4 	bl	800831c <__pow5mult>
 8008fd4:	4680      	mov	r8, r0
 8008fd6:	2800      	cmp	r0, #0
 8008fd8:	d0ba      	beq.n	8008f50 <_strtod_l+0x690>
 8008fda:	4601      	mov	r1, r0
 8008fdc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008fde:	9805      	ldr	r0, [sp, #20]
 8008fe0:	f7ff f8fa 	bl	80081d8 <__multiply>
 8008fe4:	900a      	str	r0, [sp, #40]	@ 0x28
 8008fe6:	2800      	cmp	r0, #0
 8008fe8:	f43f ae8d 	beq.w	8008d06 <_strtod_l+0x446>
 8008fec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008fee:	9805      	ldr	r0, [sp, #20]
 8008ff0:	f7fe ffde 	bl	8007fb0 <_Bfree>
 8008ff4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ff6:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ff8:	2d00      	cmp	r5, #0
 8008ffa:	dc1d      	bgt.n	8009038 <_strtod_l+0x778>
 8008ffc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	dd23      	ble.n	800904a <_strtod_l+0x78a>
 8009002:	4649      	mov	r1, r9
 8009004:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009006:	9805      	ldr	r0, [sp, #20]
 8009008:	f7ff f988 	bl	800831c <__pow5mult>
 800900c:	4681      	mov	r9, r0
 800900e:	b9e0      	cbnz	r0, 800904a <_strtod_l+0x78a>
 8009010:	f04f 0900 	mov.w	r9, #0
 8009014:	e677      	b.n	8008d06 <_strtod_l+0x446>
 8009016:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800901a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800901e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009022:	35e2      	adds	r5, #226	@ 0xe2
 8009024:	fa01 f305 	lsl.w	r3, r1, r5
 8009028:	9310      	str	r3, [sp, #64]	@ 0x40
 800902a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800902c:	e7ba      	b.n	8008fa4 <_strtod_l+0x6e4>
 800902e:	2300      	movs	r3, #0
 8009030:	9310      	str	r3, [sp, #64]	@ 0x40
 8009032:	2301      	movs	r3, #1
 8009034:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009036:	e7b5      	b.n	8008fa4 <_strtod_l+0x6e4>
 8009038:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800903a:	9805      	ldr	r0, [sp, #20]
 800903c:	462a      	mov	r2, r5
 800903e:	f7ff f9c7 	bl	80083d0 <__lshift>
 8009042:	901a      	str	r0, [sp, #104]	@ 0x68
 8009044:	2800      	cmp	r0, #0
 8009046:	d1d9      	bne.n	8008ffc <_strtod_l+0x73c>
 8009048:	e65d      	b.n	8008d06 <_strtod_l+0x446>
 800904a:	2e00      	cmp	r6, #0
 800904c:	dd07      	ble.n	800905e <_strtod_l+0x79e>
 800904e:	4649      	mov	r1, r9
 8009050:	9805      	ldr	r0, [sp, #20]
 8009052:	4632      	mov	r2, r6
 8009054:	f7ff f9bc 	bl	80083d0 <__lshift>
 8009058:	4681      	mov	r9, r0
 800905a:	2800      	cmp	r0, #0
 800905c:	d0d8      	beq.n	8009010 <_strtod_l+0x750>
 800905e:	2f00      	cmp	r7, #0
 8009060:	dd08      	ble.n	8009074 <_strtod_l+0x7b4>
 8009062:	4641      	mov	r1, r8
 8009064:	9805      	ldr	r0, [sp, #20]
 8009066:	463a      	mov	r2, r7
 8009068:	f7ff f9b2 	bl	80083d0 <__lshift>
 800906c:	4680      	mov	r8, r0
 800906e:	2800      	cmp	r0, #0
 8009070:	f43f ae49 	beq.w	8008d06 <_strtod_l+0x446>
 8009074:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009076:	9805      	ldr	r0, [sp, #20]
 8009078:	464a      	mov	r2, r9
 800907a:	f7ff fa31 	bl	80084e0 <__mdiff>
 800907e:	4604      	mov	r4, r0
 8009080:	2800      	cmp	r0, #0
 8009082:	f43f ae40 	beq.w	8008d06 <_strtod_l+0x446>
 8009086:	68c3      	ldr	r3, [r0, #12]
 8009088:	930f      	str	r3, [sp, #60]	@ 0x3c
 800908a:	2300      	movs	r3, #0
 800908c:	60c3      	str	r3, [r0, #12]
 800908e:	4641      	mov	r1, r8
 8009090:	f7ff fa0a 	bl	80084a8 <__mcmp>
 8009094:	2800      	cmp	r0, #0
 8009096:	da45      	bge.n	8009124 <_strtod_l+0x864>
 8009098:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800909a:	ea53 030a 	orrs.w	r3, r3, sl
 800909e:	d16b      	bne.n	8009178 <_strtod_l+0x8b8>
 80090a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d167      	bne.n	8009178 <_strtod_l+0x8b8>
 80090a8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80090ac:	0d1b      	lsrs	r3, r3, #20
 80090ae:	051b      	lsls	r3, r3, #20
 80090b0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80090b4:	d960      	bls.n	8009178 <_strtod_l+0x8b8>
 80090b6:	6963      	ldr	r3, [r4, #20]
 80090b8:	b913      	cbnz	r3, 80090c0 <_strtod_l+0x800>
 80090ba:	6923      	ldr	r3, [r4, #16]
 80090bc:	2b01      	cmp	r3, #1
 80090be:	dd5b      	ble.n	8009178 <_strtod_l+0x8b8>
 80090c0:	4621      	mov	r1, r4
 80090c2:	2201      	movs	r2, #1
 80090c4:	9805      	ldr	r0, [sp, #20]
 80090c6:	f7ff f983 	bl	80083d0 <__lshift>
 80090ca:	4641      	mov	r1, r8
 80090cc:	4604      	mov	r4, r0
 80090ce:	f7ff f9eb 	bl	80084a8 <__mcmp>
 80090d2:	2800      	cmp	r0, #0
 80090d4:	dd50      	ble.n	8009178 <_strtod_l+0x8b8>
 80090d6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80090da:	9a08      	ldr	r2, [sp, #32]
 80090dc:	0d1b      	lsrs	r3, r3, #20
 80090de:	051b      	lsls	r3, r3, #20
 80090e0:	2a00      	cmp	r2, #0
 80090e2:	d06a      	beq.n	80091ba <_strtod_l+0x8fa>
 80090e4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80090e8:	d867      	bhi.n	80091ba <_strtod_l+0x8fa>
 80090ea:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80090ee:	f67f ae9d 	bls.w	8008e2c <_strtod_l+0x56c>
 80090f2:	4b0a      	ldr	r3, [pc, #40]	@ (800911c <_strtod_l+0x85c>)
 80090f4:	4650      	mov	r0, sl
 80090f6:	4659      	mov	r1, fp
 80090f8:	2200      	movs	r2, #0
 80090fa:	f7f7 faa5 	bl	8000648 <__aeabi_dmul>
 80090fe:	4b08      	ldr	r3, [pc, #32]	@ (8009120 <_strtod_l+0x860>)
 8009100:	400b      	ands	r3, r1
 8009102:	4682      	mov	sl, r0
 8009104:	468b      	mov	fp, r1
 8009106:	2b00      	cmp	r3, #0
 8009108:	f47f ae08 	bne.w	8008d1c <_strtod_l+0x45c>
 800910c:	9a05      	ldr	r2, [sp, #20]
 800910e:	2322      	movs	r3, #34	@ 0x22
 8009110:	6013      	str	r3, [r2, #0]
 8009112:	e603      	b.n	8008d1c <_strtod_l+0x45c>
 8009114:	0800ac40 	.word	0x0800ac40
 8009118:	fffffc02 	.word	0xfffffc02
 800911c:	39500000 	.word	0x39500000
 8009120:	7ff00000 	.word	0x7ff00000
 8009124:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009128:	d165      	bne.n	80091f6 <_strtod_l+0x936>
 800912a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800912c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009130:	b35a      	cbz	r2, 800918a <_strtod_l+0x8ca>
 8009132:	4a9f      	ldr	r2, [pc, #636]	@ (80093b0 <_strtod_l+0xaf0>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d12b      	bne.n	8009190 <_strtod_l+0x8d0>
 8009138:	9b08      	ldr	r3, [sp, #32]
 800913a:	4651      	mov	r1, sl
 800913c:	b303      	cbz	r3, 8009180 <_strtod_l+0x8c0>
 800913e:	4b9d      	ldr	r3, [pc, #628]	@ (80093b4 <_strtod_l+0xaf4>)
 8009140:	465a      	mov	r2, fp
 8009142:	4013      	ands	r3, r2
 8009144:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009148:	f04f 32ff 	mov.w	r2, #4294967295
 800914c:	d81b      	bhi.n	8009186 <_strtod_l+0x8c6>
 800914e:	0d1b      	lsrs	r3, r3, #20
 8009150:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009154:	fa02 f303 	lsl.w	r3, r2, r3
 8009158:	4299      	cmp	r1, r3
 800915a:	d119      	bne.n	8009190 <_strtod_l+0x8d0>
 800915c:	4b96      	ldr	r3, [pc, #600]	@ (80093b8 <_strtod_l+0xaf8>)
 800915e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009160:	429a      	cmp	r2, r3
 8009162:	d102      	bne.n	800916a <_strtod_l+0x8aa>
 8009164:	3101      	adds	r1, #1
 8009166:	f43f adce 	beq.w	8008d06 <_strtod_l+0x446>
 800916a:	4b92      	ldr	r3, [pc, #584]	@ (80093b4 <_strtod_l+0xaf4>)
 800916c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800916e:	401a      	ands	r2, r3
 8009170:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009174:	f04f 0a00 	mov.w	sl, #0
 8009178:	9b08      	ldr	r3, [sp, #32]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d1b9      	bne.n	80090f2 <_strtod_l+0x832>
 800917e:	e5cd      	b.n	8008d1c <_strtod_l+0x45c>
 8009180:	f04f 33ff 	mov.w	r3, #4294967295
 8009184:	e7e8      	b.n	8009158 <_strtod_l+0x898>
 8009186:	4613      	mov	r3, r2
 8009188:	e7e6      	b.n	8009158 <_strtod_l+0x898>
 800918a:	ea53 030a 	orrs.w	r3, r3, sl
 800918e:	d0a2      	beq.n	80090d6 <_strtod_l+0x816>
 8009190:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009192:	b1db      	cbz	r3, 80091cc <_strtod_l+0x90c>
 8009194:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009196:	4213      	tst	r3, r2
 8009198:	d0ee      	beq.n	8009178 <_strtod_l+0x8b8>
 800919a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800919c:	9a08      	ldr	r2, [sp, #32]
 800919e:	4650      	mov	r0, sl
 80091a0:	4659      	mov	r1, fp
 80091a2:	b1bb      	cbz	r3, 80091d4 <_strtod_l+0x914>
 80091a4:	f7ff fb6e 	bl	8008884 <sulp>
 80091a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80091ac:	ec53 2b10 	vmov	r2, r3, d0
 80091b0:	f7f7 f894 	bl	80002dc <__adddf3>
 80091b4:	4682      	mov	sl, r0
 80091b6:	468b      	mov	fp, r1
 80091b8:	e7de      	b.n	8009178 <_strtod_l+0x8b8>
 80091ba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80091be:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80091c2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80091c6:	f04f 3aff 	mov.w	sl, #4294967295
 80091ca:	e7d5      	b.n	8009178 <_strtod_l+0x8b8>
 80091cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80091ce:	ea13 0f0a 	tst.w	r3, sl
 80091d2:	e7e1      	b.n	8009198 <_strtod_l+0x8d8>
 80091d4:	f7ff fb56 	bl	8008884 <sulp>
 80091d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80091dc:	ec53 2b10 	vmov	r2, r3, d0
 80091e0:	f7f7 f87a 	bl	80002d8 <__aeabi_dsub>
 80091e4:	2200      	movs	r2, #0
 80091e6:	2300      	movs	r3, #0
 80091e8:	4682      	mov	sl, r0
 80091ea:	468b      	mov	fp, r1
 80091ec:	f7f7 fc94 	bl	8000b18 <__aeabi_dcmpeq>
 80091f0:	2800      	cmp	r0, #0
 80091f2:	d0c1      	beq.n	8009178 <_strtod_l+0x8b8>
 80091f4:	e61a      	b.n	8008e2c <_strtod_l+0x56c>
 80091f6:	4641      	mov	r1, r8
 80091f8:	4620      	mov	r0, r4
 80091fa:	f7ff facd 	bl	8008798 <__ratio>
 80091fe:	ec57 6b10 	vmov	r6, r7, d0
 8009202:	2200      	movs	r2, #0
 8009204:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009208:	4630      	mov	r0, r6
 800920a:	4639      	mov	r1, r7
 800920c:	f7f7 fc98 	bl	8000b40 <__aeabi_dcmple>
 8009210:	2800      	cmp	r0, #0
 8009212:	d06f      	beq.n	80092f4 <_strtod_l+0xa34>
 8009214:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009216:	2b00      	cmp	r3, #0
 8009218:	d17a      	bne.n	8009310 <_strtod_l+0xa50>
 800921a:	f1ba 0f00 	cmp.w	sl, #0
 800921e:	d158      	bne.n	80092d2 <_strtod_l+0xa12>
 8009220:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009222:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009226:	2b00      	cmp	r3, #0
 8009228:	d15a      	bne.n	80092e0 <_strtod_l+0xa20>
 800922a:	4b64      	ldr	r3, [pc, #400]	@ (80093bc <_strtod_l+0xafc>)
 800922c:	2200      	movs	r2, #0
 800922e:	4630      	mov	r0, r6
 8009230:	4639      	mov	r1, r7
 8009232:	f7f7 fc7b 	bl	8000b2c <__aeabi_dcmplt>
 8009236:	2800      	cmp	r0, #0
 8009238:	d159      	bne.n	80092ee <_strtod_l+0xa2e>
 800923a:	4630      	mov	r0, r6
 800923c:	4639      	mov	r1, r7
 800923e:	4b60      	ldr	r3, [pc, #384]	@ (80093c0 <_strtod_l+0xb00>)
 8009240:	2200      	movs	r2, #0
 8009242:	f7f7 fa01 	bl	8000648 <__aeabi_dmul>
 8009246:	4606      	mov	r6, r0
 8009248:	460f      	mov	r7, r1
 800924a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800924e:	9606      	str	r6, [sp, #24]
 8009250:	9307      	str	r3, [sp, #28]
 8009252:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009256:	4d57      	ldr	r5, [pc, #348]	@ (80093b4 <_strtod_l+0xaf4>)
 8009258:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800925c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800925e:	401d      	ands	r5, r3
 8009260:	4b58      	ldr	r3, [pc, #352]	@ (80093c4 <_strtod_l+0xb04>)
 8009262:	429d      	cmp	r5, r3
 8009264:	f040 80b2 	bne.w	80093cc <_strtod_l+0xb0c>
 8009268:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800926a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800926e:	ec4b ab10 	vmov	d0, sl, fp
 8009272:	f7ff f9c9 	bl	8008608 <__ulp>
 8009276:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800927a:	ec51 0b10 	vmov	r0, r1, d0
 800927e:	f7f7 f9e3 	bl	8000648 <__aeabi_dmul>
 8009282:	4652      	mov	r2, sl
 8009284:	465b      	mov	r3, fp
 8009286:	f7f7 f829 	bl	80002dc <__adddf3>
 800928a:	460b      	mov	r3, r1
 800928c:	4949      	ldr	r1, [pc, #292]	@ (80093b4 <_strtod_l+0xaf4>)
 800928e:	4a4e      	ldr	r2, [pc, #312]	@ (80093c8 <_strtod_l+0xb08>)
 8009290:	4019      	ands	r1, r3
 8009292:	4291      	cmp	r1, r2
 8009294:	4682      	mov	sl, r0
 8009296:	d942      	bls.n	800931e <_strtod_l+0xa5e>
 8009298:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800929a:	4b47      	ldr	r3, [pc, #284]	@ (80093b8 <_strtod_l+0xaf8>)
 800929c:	429a      	cmp	r2, r3
 800929e:	d103      	bne.n	80092a8 <_strtod_l+0x9e8>
 80092a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80092a2:	3301      	adds	r3, #1
 80092a4:	f43f ad2f 	beq.w	8008d06 <_strtod_l+0x446>
 80092a8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80093b8 <_strtod_l+0xaf8>
 80092ac:	f04f 3aff 	mov.w	sl, #4294967295
 80092b0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80092b2:	9805      	ldr	r0, [sp, #20]
 80092b4:	f7fe fe7c 	bl	8007fb0 <_Bfree>
 80092b8:	9805      	ldr	r0, [sp, #20]
 80092ba:	4649      	mov	r1, r9
 80092bc:	f7fe fe78 	bl	8007fb0 <_Bfree>
 80092c0:	9805      	ldr	r0, [sp, #20]
 80092c2:	4641      	mov	r1, r8
 80092c4:	f7fe fe74 	bl	8007fb0 <_Bfree>
 80092c8:	9805      	ldr	r0, [sp, #20]
 80092ca:	4621      	mov	r1, r4
 80092cc:	f7fe fe70 	bl	8007fb0 <_Bfree>
 80092d0:	e619      	b.n	8008f06 <_strtod_l+0x646>
 80092d2:	f1ba 0f01 	cmp.w	sl, #1
 80092d6:	d103      	bne.n	80092e0 <_strtod_l+0xa20>
 80092d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092da:	2b00      	cmp	r3, #0
 80092dc:	f43f ada6 	beq.w	8008e2c <_strtod_l+0x56c>
 80092e0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009390 <_strtod_l+0xad0>
 80092e4:	4f35      	ldr	r7, [pc, #212]	@ (80093bc <_strtod_l+0xafc>)
 80092e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80092ea:	2600      	movs	r6, #0
 80092ec:	e7b1      	b.n	8009252 <_strtod_l+0x992>
 80092ee:	4f34      	ldr	r7, [pc, #208]	@ (80093c0 <_strtod_l+0xb00>)
 80092f0:	2600      	movs	r6, #0
 80092f2:	e7aa      	b.n	800924a <_strtod_l+0x98a>
 80092f4:	4b32      	ldr	r3, [pc, #200]	@ (80093c0 <_strtod_l+0xb00>)
 80092f6:	4630      	mov	r0, r6
 80092f8:	4639      	mov	r1, r7
 80092fa:	2200      	movs	r2, #0
 80092fc:	f7f7 f9a4 	bl	8000648 <__aeabi_dmul>
 8009300:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009302:	4606      	mov	r6, r0
 8009304:	460f      	mov	r7, r1
 8009306:	2b00      	cmp	r3, #0
 8009308:	d09f      	beq.n	800924a <_strtod_l+0x98a>
 800930a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800930e:	e7a0      	b.n	8009252 <_strtod_l+0x992>
 8009310:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009398 <_strtod_l+0xad8>
 8009314:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009318:	ec57 6b17 	vmov	r6, r7, d7
 800931c:	e799      	b.n	8009252 <_strtod_l+0x992>
 800931e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009322:	9b08      	ldr	r3, [sp, #32]
 8009324:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009328:	2b00      	cmp	r3, #0
 800932a:	d1c1      	bne.n	80092b0 <_strtod_l+0x9f0>
 800932c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009330:	0d1b      	lsrs	r3, r3, #20
 8009332:	051b      	lsls	r3, r3, #20
 8009334:	429d      	cmp	r5, r3
 8009336:	d1bb      	bne.n	80092b0 <_strtod_l+0x9f0>
 8009338:	4630      	mov	r0, r6
 800933a:	4639      	mov	r1, r7
 800933c:	f7f7 fdf2 	bl	8000f24 <__aeabi_d2lz>
 8009340:	f7f7 f954 	bl	80005ec <__aeabi_l2d>
 8009344:	4602      	mov	r2, r0
 8009346:	460b      	mov	r3, r1
 8009348:	4630      	mov	r0, r6
 800934a:	4639      	mov	r1, r7
 800934c:	f7f6 ffc4 	bl	80002d8 <__aeabi_dsub>
 8009350:	460b      	mov	r3, r1
 8009352:	4602      	mov	r2, r0
 8009354:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009358:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800935c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800935e:	ea46 060a 	orr.w	r6, r6, sl
 8009362:	431e      	orrs	r6, r3
 8009364:	d06f      	beq.n	8009446 <_strtod_l+0xb86>
 8009366:	a30e      	add	r3, pc, #56	@ (adr r3, 80093a0 <_strtod_l+0xae0>)
 8009368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800936c:	f7f7 fbde 	bl	8000b2c <__aeabi_dcmplt>
 8009370:	2800      	cmp	r0, #0
 8009372:	f47f acd3 	bne.w	8008d1c <_strtod_l+0x45c>
 8009376:	a30c      	add	r3, pc, #48	@ (adr r3, 80093a8 <_strtod_l+0xae8>)
 8009378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800937c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009380:	f7f7 fbf2 	bl	8000b68 <__aeabi_dcmpgt>
 8009384:	2800      	cmp	r0, #0
 8009386:	d093      	beq.n	80092b0 <_strtod_l+0x9f0>
 8009388:	e4c8      	b.n	8008d1c <_strtod_l+0x45c>
 800938a:	bf00      	nop
 800938c:	f3af 8000 	nop.w
 8009390:	00000000 	.word	0x00000000
 8009394:	bff00000 	.word	0xbff00000
 8009398:	00000000 	.word	0x00000000
 800939c:	3ff00000 	.word	0x3ff00000
 80093a0:	94a03595 	.word	0x94a03595
 80093a4:	3fdfffff 	.word	0x3fdfffff
 80093a8:	35afe535 	.word	0x35afe535
 80093ac:	3fe00000 	.word	0x3fe00000
 80093b0:	000fffff 	.word	0x000fffff
 80093b4:	7ff00000 	.word	0x7ff00000
 80093b8:	7fefffff 	.word	0x7fefffff
 80093bc:	3ff00000 	.word	0x3ff00000
 80093c0:	3fe00000 	.word	0x3fe00000
 80093c4:	7fe00000 	.word	0x7fe00000
 80093c8:	7c9fffff 	.word	0x7c9fffff
 80093cc:	9b08      	ldr	r3, [sp, #32]
 80093ce:	b323      	cbz	r3, 800941a <_strtod_l+0xb5a>
 80093d0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80093d4:	d821      	bhi.n	800941a <_strtod_l+0xb5a>
 80093d6:	a328      	add	r3, pc, #160	@ (adr r3, 8009478 <_strtod_l+0xbb8>)
 80093d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093dc:	4630      	mov	r0, r6
 80093de:	4639      	mov	r1, r7
 80093e0:	f7f7 fbae 	bl	8000b40 <__aeabi_dcmple>
 80093e4:	b1a0      	cbz	r0, 8009410 <_strtod_l+0xb50>
 80093e6:	4639      	mov	r1, r7
 80093e8:	4630      	mov	r0, r6
 80093ea:	f7f7 fc05 	bl	8000bf8 <__aeabi_d2uiz>
 80093ee:	2801      	cmp	r0, #1
 80093f0:	bf38      	it	cc
 80093f2:	2001      	movcc	r0, #1
 80093f4:	f7f7 f8ae 	bl	8000554 <__aeabi_ui2d>
 80093f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093fa:	4606      	mov	r6, r0
 80093fc:	460f      	mov	r7, r1
 80093fe:	b9fb      	cbnz	r3, 8009440 <_strtod_l+0xb80>
 8009400:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009404:	9014      	str	r0, [sp, #80]	@ 0x50
 8009406:	9315      	str	r3, [sp, #84]	@ 0x54
 8009408:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800940c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009410:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009412:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009416:	1b5b      	subs	r3, r3, r5
 8009418:	9311      	str	r3, [sp, #68]	@ 0x44
 800941a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800941e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009422:	f7ff f8f1 	bl	8008608 <__ulp>
 8009426:	4650      	mov	r0, sl
 8009428:	ec53 2b10 	vmov	r2, r3, d0
 800942c:	4659      	mov	r1, fp
 800942e:	f7f7 f90b 	bl	8000648 <__aeabi_dmul>
 8009432:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009436:	f7f6 ff51 	bl	80002dc <__adddf3>
 800943a:	4682      	mov	sl, r0
 800943c:	468b      	mov	fp, r1
 800943e:	e770      	b.n	8009322 <_strtod_l+0xa62>
 8009440:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009444:	e7e0      	b.n	8009408 <_strtod_l+0xb48>
 8009446:	a30e      	add	r3, pc, #56	@ (adr r3, 8009480 <_strtod_l+0xbc0>)
 8009448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800944c:	f7f7 fb6e 	bl	8000b2c <__aeabi_dcmplt>
 8009450:	e798      	b.n	8009384 <_strtod_l+0xac4>
 8009452:	2300      	movs	r3, #0
 8009454:	930e      	str	r3, [sp, #56]	@ 0x38
 8009456:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009458:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800945a:	6013      	str	r3, [r2, #0]
 800945c:	f7ff ba6d 	b.w	800893a <_strtod_l+0x7a>
 8009460:	2a65      	cmp	r2, #101	@ 0x65
 8009462:	f43f ab68 	beq.w	8008b36 <_strtod_l+0x276>
 8009466:	2a45      	cmp	r2, #69	@ 0x45
 8009468:	f43f ab65 	beq.w	8008b36 <_strtod_l+0x276>
 800946c:	2301      	movs	r3, #1
 800946e:	f7ff bba0 	b.w	8008bb2 <_strtod_l+0x2f2>
 8009472:	bf00      	nop
 8009474:	f3af 8000 	nop.w
 8009478:	ffc00000 	.word	0xffc00000
 800947c:	41dfffff 	.word	0x41dfffff
 8009480:	94a03595 	.word	0x94a03595
 8009484:	3fcfffff 	.word	0x3fcfffff

08009488 <_strtod_r>:
 8009488:	4b01      	ldr	r3, [pc, #4]	@ (8009490 <_strtod_r+0x8>)
 800948a:	f7ff ba19 	b.w	80088c0 <_strtod_l>
 800948e:	bf00      	nop
 8009490:	20000098 	.word	0x20000098

08009494 <_strtol_l.isra.0>:
 8009494:	2b24      	cmp	r3, #36	@ 0x24
 8009496:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800949a:	4686      	mov	lr, r0
 800949c:	4690      	mov	r8, r2
 800949e:	d801      	bhi.n	80094a4 <_strtol_l.isra.0+0x10>
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d106      	bne.n	80094b2 <_strtol_l.isra.0+0x1e>
 80094a4:	f7fd fd9a 	bl	8006fdc <__errno>
 80094a8:	2316      	movs	r3, #22
 80094aa:	6003      	str	r3, [r0, #0]
 80094ac:	2000      	movs	r0, #0
 80094ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094b2:	4834      	ldr	r0, [pc, #208]	@ (8009584 <_strtol_l.isra.0+0xf0>)
 80094b4:	460d      	mov	r5, r1
 80094b6:	462a      	mov	r2, r5
 80094b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80094bc:	5d06      	ldrb	r6, [r0, r4]
 80094be:	f016 0608 	ands.w	r6, r6, #8
 80094c2:	d1f8      	bne.n	80094b6 <_strtol_l.isra.0+0x22>
 80094c4:	2c2d      	cmp	r4, #45	@ 0x2d
 80094c6:	d110      	bne.n	80094ea <_strtol_l.isra.0+0x56>
 80094c8:	782c      	ldrb	r4, [r5, #0]
 80094ca:	2601      	movs	r6, #1
 80094cc:	1c95      	adds	r5, r2, #2
 80094ce:	f033 0210 	bics.w	r2, r3, #16
 80094d2:	d115      	bne.n	8009500 <_strtol_l.isra.0+0x6c>
 80094d4:	2c30      	cmp	r4, #48	@ 0x30
 80094d6:	d10d      	bne.n	80094f4 <_strtol_l.isra.0+0x60>
 80094d8:	782a      	ldrb	r2, [r5, #0]
 80094da:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80094de:	2a58      	cmp	r2, #88	@ 0x58
 80094e0:	d108      	bne.n	80094f4 <_strtol_l.isra.0+0x60>
 80094e2:	786c      	ldrb	r4, [r5, #1]
 80094e4:	3502      	adds	r5, #2
 80094e6:	2310      	movs	r3, #16
 80094e8:	e00a      	b.n	8009500 <_strtol_l.isra.0+0x6c>
 80094ea:	2c2b      	cmp	r4, #43	@ 0x2b
 80094ec:	bf04      	itt	eq
 80094ee:	782c      	ldrbeq	r4, [r5, #0]
 80094f0:	1c95      	addeq	r5, r2, #2
 80094f2:	e7ec      	b.n	80094ce <_strtol_l.isra.0+0x3a>
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d1f6      	bne.n	80094e6 <_strtol_l.isra.0+0x52>
 80094f8:	2c30      	cmp	r4, #48	@ 0x30
 80094fa:	bf14      	ite	ne
 80094fc:	230a      	movne	r3, #10
 80094fe:	2308      	moveq	r3, #8
 8009500:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009504:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009508:	2200      	movs	r2, #0
 800950a:	fbbc f9f3 	udiv	r9, ip, r3
 800950e:	4610      	mov	r0, r2
 8009510:	fb03 ca19 	mls	sl, r3, r9, ip
 8009514:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009518:	2f09      	cmp	r7, #9
 800951a:	d80f      	bhi.n	800953c <_strtol_l.isra.0+0xa8>
 800951c:	463c      	mov	r4, r7
 800951e:	42a3      	cmp	r3, r4
 8009520:	dd1b      	ble.n	800955a <_strtol_l.isra.0+0xc6>
 8009522:	1c57      	adds	r7, r2, #1
 8009524:	d007      	beq.n	8009536 <_strtol_l.isra.0+0xa2>
 8009526:	4581      	cmp	r9, r0
 8009528:	d314      	bcc.n	8009554 <_strtol_l.isra.0+0xc0>
 800952a:	d101      	bne.n	8009530 <_strtol_l.isra.0+0x9c>
 800952c:	45a2      	cmp	sl, r4
 800952e:	db11      	blt.n	8009554 <_strtol_l.isra.0+0xc0>
 8009530:	fb00 4003 	mla	r0, r0, r3, r4
 8009534:	2201      	movs	r2, #1
 8009536:	f815 4b01 	ldrb.w	r4, [r5], #1
 800953a:	e7eb      	b.n	8009514 <_strtol_l.isra.0+0x80>
 800953c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009540:	2f19      	cmp	r7, #25
 8009542:	d801      	bhi.n	8009548 <_strtol_l.isra.0+0xb4>
 8009544:	3c37      	subs	r4, #55	@ 0x37
 8009546:	e7ea      	b.n	800951e <_strtol_l.isra.0+0x8a>
 8009548:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800954c:	2f19      	cmp	r7, #25
 800954e:	d804      	bhi.n	800955a <_strtol_l.isra.0+0xc6>
 8009550:	3c57      	subs	r4, #87	@ 0x57
 8009552:	e7e4      	b.n	800951e <_strtol_l.isra.0+0x8a>
 8009554:	f04f 32ff 	mov.w	r2, #4294967295
 8009558:	e7ed      	b.n	8009536 <_strtol_l.isra.0+0xa2>
 800955a:	1c53      	adds	r3, r2, #1
 800955c:	d108      	bne.n	8009570 <_strtol_l.isra.0+0xdc>
 800955e:	2322      	movs	r3, #34	@ 0x22
 8009560:	f8ce 3000 	str.w	r3, [lr]
 8009564:	4660      	mov	r0, ip
 8009566:	f1b8 0f00 	cmp.w	r8, #0
 800956a:	d0a0      	beq.n	80094ae <_strtol_l.isra.0+0x1a>
 800956c:	1e69      	subs	r1, r5, #1
 800956e:	e006      	b.n	800957e <_strtol_l.isra.0+0xea>
 8009570:	b106      	cbz	r6, 8009574 <_strtol_l.isra.0+0xe0>
 8009572:	4240      	negs	r0, r0
 8009574:	f1b8 0f00 	cmp.w	r8, #0
 8009578:	d099      	beq.n	80094ae <_strtol_l.isra.0+0x1a>
 800957a:	2a00      	cmp	r2, #0
 800957c:	d1f6      	bne.n	800956c <_strtol_l.isra.0+0xd8>
 800957e:	f8c8 1000 	str.w	r1, [r8]
 8009582:	e794      	b.n	80094ae <_strtol_l.isra.0+0x1a>
 8009584:	0800ac69 	.word	0x0800ac69

08009588 <_strtol_r>:
 8009588:	f7ff bf84 	b.w	8009494 <_strtol_l.isra.0>

0800958c <__ssputs_r>:
 800958c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009590:	688e      	ldr	r6, [r1, #8]
 8009592:	461f      	mov	r7, r3
 8009594:	42be      	cmp	r6, r7
 8009596:	680b      	ldr	r3, [r1, #0]
 8009598:	4682      	mov	sl, r0
 800959a:	460c      	mov	r4, r1
 800959c:	4690      	mov	r8, r2
 800959e:	d82d      	bhi.n	80095fc <__ssputs_r+0x70>
 80095a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80095a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80095a8:	d026      	beq.n	80095f8 <__ssputs_r+0x6c>
 80095aa:	6965      	ldr	r5, [r4, #20]
 80095ac:	6909      	ldr	r1, [r1, #16]
 80095ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80095b2:	eba3 0901 	sub.w	r9, r3, r1
 80095b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80095ba:	1c7b      	adds	r3, r7, #1
 80095bc:	444b      	add	r3, r9
 80095be:	106d      	asrs	r5, r5, #1
 80095c0:	429d      	cmp	r5, r3
 80095c2:	bf38      	it	cc
 80095c4:	461d      	movcc	r5, r3
 80095c6:	0553      	lsls	r3, r2, #21
 80095c8:	d527      	bpl.n	800961a <__ssputs_r+0x8e>
 80095ca:	4629      	mov	r1, r5
 80095cc:	f7fe fc24 	bl	8007e18 <_malloc_r>
 80095d0:	4606      	mov	r6, r0
 80095d2:	b360      	cbz	r0, 800962e <__ssputs_r+0xa2>
 80095d4:	6921      	ldr	r1, [r4, #16]
 80095d6:	464a      	mov	r2, r9
 80095d8:	f000 fbf0 	bl	8009dbc <memcpy>
 80095dc:	89a3      	ldrh	r3, [r4, #12]
 80095de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80095e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80095e6:	81a3      	strh	r3, [r4, #12]
 80095e8:	6126      	str	r6, [r4, #16]
 80095ea:	6165      	str	r5, [r4, #20]
 80095ec:	444e      	add	r6, r9
 80095ee:	eba5 0509 	sub.w	r5, r5, r9
 80095f2:	6026      	str	r6, [r4, #0]
 80095f4:	60a5      	str	r5, [r4, #8]
 80095f6:	463e      	mov	r6, r7
 80095f8:	42be      	cmp	r6, r7
 80095fa:	d900      	bls.n	80095fe <__ssputs_r+0x72>
 80095fc:	463e      	mov	r6, r7
 80095fe:	6820      	ldr	r0, [r4, #0]
 8009600:	4632      	mov	r2, r6
 8009602:	4641      	mov	r1, r8
 8009604:	f000 fb7c 	bl	8009d00 <memmove>
 8009608:	68a3      	ldr	r3, [r4, #8]
 800960a:	1b9b      	subs	r3, r3, r6
 800960c:	60a3      	str	r3, [r4, #8]
 800960e:	6823      	ldr	r3, [r4, #0]
 8009610:	4433      	add	r3, r6
 8009612:	6023      	str	r3, [r4, #0]
 8009614:	2000      	movs	r0, #0
 8009616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800961a:	462a      	mov	r2, r5
 800961c:	f000 ff49 	bl	800a4b2 <_realloc_r>
 8009620:	4606      	mov	r6, r0
 8009622:	2800      	cmp	r0, #0
 8009624:	d1e0      	bne.n	80095e8 <__ssputs_r+0x5c>
 8009626:	6921      	ldr	r1, [r4, #16]
 8009628:	4650      	mov	r0, sl
 800962a:	f7fe fb81 	bl	8007d30 <_free_r>
 800962e:	230c      	movs	r3, #12
 8009630:	f8ca 3000 	str.w	r3, [sl]
 8009634:	89a3      	ldrh	r3, [r4, #12]
 8009636:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800963a:	81a3      	strh	r3, [r4, #12]
 800963c:	f04f 30ff 	mov.w	r0, #4294967295
 8009640:	e7e9      	b.n	8009616 <__ssputs_r+0x8a>
	...

08009644 <_svfiprintf_r>:
 8009644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009648:	4698      	mov	r8, r3
 800964a:	898b      	ldrh	r3, [r1, #12]
 800964c:	061b      	lsls	r3, r3, #24
 800964e:	b09d      	sub	sp, #116	@ 0x74
 8009650:	4607      	mov	r7, r0
 8009652:	460d      	mov	r5, r1
 8009654:	4614      	mov	r4, r2
 8009656:	d510      	bpl.n	800967a <_svfiprintf_r+0x36>
 8009658:	690b      	ldr	r3, [r1, #16]
 800965a:	b973      	cbnz	r3, 800967a <_svfiprintf_r+0x36>
 800965c:	2140      	movs	r1, #64	@ 0x40
 800965e:	f7fe fbdb 	bl	8007e18 <_malloc_r>
 8009662:	6028      	str	r0, [r5, #0]
 8009664:	6128      	str	r0, [r5, #16]
 8009666:	b930      	cbnz	r0, 8009676 <_svfiprintf_r+0x32>
 8009668:	230c      	movs	r3, #12
 800966a:	603b      	str	r3, [r7, #0]
 800966c:	f04f 30ff 	mov.w	r0, #4294967295
 8009670:	b01d      	add	sp, #116	@ 0x74
 8009672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009676:	2340      	movs	r3, #64	@ 0x40
 8009678:	616b      	str	r3, [r5, #20]
 800967a:	2300      	movs	r3, #0
 800967c:	9309      	str	r3, [sp, #36]	@ 0x24
 800967e:	2320      	movs	r3, #32
 8009680:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009684:	f8cd 800c 	str.w	r8, [sp, #12]
 8009688:	2330      	movs	r3, #48	@ 0x30
 800968a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009828 <_svfiprintf_r+0x1e4>
 800968e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009692:	f04f 0901 	mov.w	r9, #1
 8009696:	4623      	mov	r3, r4
 8009698:	469a      	mov	sl, r3
 800969a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800969e:	b10a      	cbz	r2, 80096a4 <_svfiprintf_r+0x60>
 80096a0:	2a25      	cmp	r2, #37	@ 0x25
 80096a2:	d1f9      	bne.n	8009698 <_svfiprintf_r+0x54>
 80096a4:	ebba 0b04 	subs.w	fp, sl, r4
 80096a8:	d00b      	beq.n	80096c2 <_svfiprintf_r+0x7e>
 80096aa:	465b      	mov	r3, fp
 80096ac:	4622      	mov	r2, r4
 80096ae:	4629      	mov	r1, r5
 80096b0:	4638      	mov	r0, r7
 80096b2:	f7ff ff6b 	bl	800958c <__ssputs_r>
 80096b6:	3001      	adds	r0, #1
 80096b8:	f000 80a7 	beq.w	800980a <_svfiprintf_r+0x1c6>
 80096bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096be:	445a      	add	r2, fp
 80096c0:	9209      	str	r2, [sp, #36]	@ 0x24
 80096c2:	f89a 3000 	ldrb.w	r3, [sl]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	f000 809f 	beq.w	800980a <_svfiprintf_r+0x1c6>
 80096cc:	2300      	movs	r3, #0
 80096ce:	f04f 32ff 	mov.w	r2, #4294967295
 80096d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096d6:	f10a 0a01 	add.w	sl, sl, #1
 80096da:	9304      	str	r3, [sp, #16]
 80096dc:	9307      	str	r3, [sp, #28]
 80096de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80096e2:	931a      	str	r3, [sp, #104]	@ 0x68
 80096e4:	4654      	mov	r4, sl
 80096e6:	2205      	movs	r2, #5
 80096e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096ec:	484e      	ldr	r0, [pc, #312]	@ (8009828 <_svfiprintf_r+0x1e4>)
 80096ee:	f7f6 fd97 	bl	8000220 <memchr>
 80096f2:	9a04      	ldr	r2, [sp, #16]
 80096f4:	b9d8      	cbnz	r0, 800972e <_svfiprintf_r+0xea>
 80096f6:	06d0      	lsls	r0, r2, #27
 80096f8:	bf44      	itt	mi
 80096fa:	2320      	movmi	r3, #32
 80096fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009700:	0711      	lsls	r1, r2, #28
 8009702:	bf44      	itt	mi
 8009704:	232b      	movmi	r3, #43	@ 0x2b
 8009706:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800970a:	f89a 3000 	ldrb.w	r3, [sl]
 800970e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009710:	d015      	beq.n	800973e <_svfiprintf_r+0xfa>
 8009712:	9a07      	ldr	r2, [sp, #28]
 8009714:	4654      	mov	r4, sl
 8009716:	2000      	movs	r0, #0
 8009718:	f04f 0c0a 	mov.w	ip, #10
 800971c:	4621      	mov	r1, r4
 800971e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009722:	3b30      	subs	r3, #48	@ 0x30
 8009724:	2b09      	cmp	r3, #9
 8009726:	d94b      	bls.n	80097c0 <_svfiprintf_r+0x17c>
 8009728:	b1b0      	cbz	r0, 8009758 <_svfiprintf_r+0x114>
 800972a:	9207      	str	r2, [sp, #28]
 800972c:	e014      	b.n	8009758 <_svfiprintf_r+0x114>
 800972e:	eba0 0308 	sub.w	r3, r0, r8
 8009732:	fa09 f303 	lsl.w	r3, r9, r3
 8009736:	4313      	orrs	r3, r2
 8009738:	9304      	str	r3, [sp, #16]
 800973a:	46a2      	mov	sl, r4
 800973c:	e7d2      	b.n	80096e4 <_svfiprintf_r+0xa0>
 800973e:	9b03      	ldr	r3, [sp, #12]
 8009740:	1d19      	adds	r1, r3, #4
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	9103      	str	r1, [sp, #12]
 8009746:	2b00      	cmp	r3, #0
 8009748:	bfbb      	ittet	lt
 800974a:	425b      	neglt	r3, r3
 800974c:	f042 0202 	orrlt.w	r2, r2, #2
 8009750:	9307      	strge	r3, [sp, #28]
 8009752:	9307      	strlt	r3, [sp, #28]
 8009754:	bfb8      	it	lt
 8009756:	9204      	strlt	r2, [sp, #16]
 8009758:	7823      	ldrb	r3, [r4, #0]
 800975a:	2b2e      	cmp	r3, #46	@ 0x2e
 800975c:	d10a      	bne.n	8009774 <_svfiprintf_r+0x130>
 800975e:	7863      	ldrb	r3, [r4, #1]
 8009760:	2b2a      	cmp	r3, #42	@ 0x2a
 8009762:	d132      	bne.n	80097ca <_svfiprintf_r+0x186>
 8009764:	9b03      	ldr	r3, [sp, #12]
 8009766:	1d1a      	adds	r2, r3, #4
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	9203      	str	r2, [sp, #12]
 800976c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009770:	3402      	adds	r4, #2
 8009772:	9305      	str	r3, [sp, #20]
 8009774:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009838 <_svfiprintf_r+0x1f4>
 8009778:	7821      	ldrb	r1, [r4, #0]
 800977a:	2203      	movs	r2, #3
 800977c:	4650      	mov	r0, sl
 800977e:	f7f6 fd4f 	bl	8000220 <memchr>
 8009782:	b138      	cbz	r0, 8009794 <_svfiprintf_r+0x150>
 8009784:	9b04      	ldr	r3, [sp, #16]
 8009786:	eba0 000a 	sub.w	r0, r0, sl
 800978a:	2240      	movs	r2, #64	@ 0x40
 800978c:	4082      	lsls	r2, r0
 800978e:	4313      	orrs	r3, r2
 8009790:	3401      	adds	r4, #1
 8009792:	9304      	str	r3, [sp, #16]
 8009794:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009798:	4824      	ldr	r0, [pc, #144]	@ (800982c <_svfiprintf_r+0x1e8>)
 800979a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800979e:	2206      	movs	r2, #6
 80097a0:	f7f6 fd3e 	bl	8000220 <memchr>
 80097a4:	2800      	cmp	r0, #0
 80097a6:	d036      	beq.n	8009816 <_svfiprintf_r+0x1d2>
 80097a8:	4b21      	ldr	r3, [pc, #132]	@ (8009830 <_svfiprintf_r+0x1ec>)
 80097aa:	bb1b      	cbnz	r3, 80097f4 <_svfiprintf_r+0x1b0>
 80097ac:	9b03      	ldr	r3, [sp, #12]
 80097ae:	3307      	adds	r3, #7
 80097b0:	f023 0307 	bic.w	r3, r3, #7
 80097b4:	3308      	adds	r3, #8
 80097b6:	9303      	str	r3, [sp, #12]
 80097b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097ba:	4433      	add	r3, r6
 80097bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80097be:	e76a      	b.n	8009696 <_svfiprintf_r+0x52>
 80097c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80097c4:	460c      	mov	r4, r1
 80097c6:	2001      	movs	r0, #1
 80097c8:	e7a8      	b.n	800971c <_svfiprintf_r+0xd8>
 80097ca:	2300      	movs	r3, #0
 80097cc:	3401      	adds	r4, #1
 80097ce:	9305      	str	r3, [sp, #20]
 80097d0:	4619      	mov	r1, r3
 80097d2:	f04f 0c0a 	mov.w	ip, #10
 80097d6:	4620      	mov	r0, r4
 80097d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097dc:	3a30      	subs	r2, #48	@ 0x30
 80097de:	2a09      	cmp	r2, #9
 80097e0:	d903      	bls.n	80097ea <_svfiprintf_r+0x1a6>
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d0c6      	beq.n	8009774 <_svfiprintf_r+0x130>
 80097e6:	9105      	str	r1, [sp, #20]
 80097e8:	e7c4      	b.n	8009774 <_svfiprintf_r+0x130>
 80097ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80097ee:	4604      	mov	r4, r0
 80097f0:	2301      	movs	r3, #1
 80097f2:	e7f0      	b.n	80097d6 <_svfiprintf_r+0x192>
 80097f4:	ab03      	add	r3, sp, #12
 80097f6:	9300      	str	r3, [sp, #0]
 80097f8:	462a      	mov	r2, r5
 80097fa:	4b0e      	ldr	r3, [pc, #56]	@ (8009834 <_svfiprintf_r+0x1f0>)
 80097fc:	a904      	add	r1, sp, #16
 80097fe:	4638      	mov	r0, r7
 8009800:	f7fc fbaa 	bl	8005f58 <_printf_float>
 8009804:	1c42      	adds	r2, r0, #1
 8009806:	4606      	mov	r6, r0
 8009808:	d1d6      	bne.n	80097b8 <_svfiprintf_r+0x174>
 800980a:	89ab      	ldrh	r3, [r5, #12]
 800980c:	065b      	lsls	r3, r3, #25
 800980e:	f53f af2d 	bmi.w	800966c <_svfiprintf_r+0x28>
 8009812:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009814:	e72c      	b.n	8009670 <_svfiprintf_r+0x2c>
 8009816:	ab03      	add	r3, sp, #12
 8009818:	9300      	str	r3, [sp, #0]
 800981a:	462a      	mov	r2, r5
 800981c:	4b05      	ldr	r3, [pc, #20]	@ (8009834 <_svfiprintf_r+0x1f0>)
 800981e:	a904      	add	r1, sp, #16
 8009820:	4638      	mov	r0, r7
 8009822:	f7fc fe31 	bl	8006488 <_printf_i>
 8009826:	e7ed      	b.n	8009804 <_svfiprintf_r+0x1c0>
 8009828:	0800aaa1 	.word	0x0800aaa1
 800982c:	0800aaab 	.word	0x0800aaab
 8009830:	08005f59 	.word	0x08005f59
 8009834:	0800958d 	.word	0x0800958d
 8009838:	0800aaa7 	.word	0x0800aaa7

0800983c <__sfputc_r>:
 800983c:	6893      	ldr	r3, [r2, #8]
 800983e:	3b01      	subs	r3, #1
 8009840:	2b00      	cmp	r3, #0
 8009842:	b410      	push	{r4}
 8009844:	6093      	str	r3, [r2, #8]
 8009846:	da08      	bge.n	800985a <__sfputc_r+0x1e>
 8009848:	6994      	ldr	r4, [r2, #24]
 800984a:	42a3      	cmp	r3, r4
 800984c:	db01      	blt.n	8009852 <__sfputc_r+0x16>
 800984e:	290a      	cmp	r1, #10
 8009850:	d103      	bne.n	800985a <__sfputc_r+0x1e>
 8009852:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009856:	f7fd bada 	b.w	8006e0e <__swbuf_r>
 800985a:	6813      	ldr	r3, [r2, #0]
 800985c:	1c58      	adds	r0, r3, #1
 800985e:	6010      	str	r0, [r2, #0]
 8009860:	7019      	strb	r1, [r3, #0]
 8009862:	4608      	mov	r0, r1
 8009864:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009868:	4770      	bx	lr

0800986a <__sfputs_r>:
 800986a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800986c:	4606      	mov	r6, r0
 800986e:	460f      	mov	r7, r1
 8009870:	4614      	mov	r4, r2
 8009872:	18d5      	adds	r5, r2, r3
 8009874:	42ac      	cmp	r4, r5
 8009876:	d101      	bne.n	800987c <__sfputs_r+0x12>
 8009878:	2000      	movs	r0, #0
 800987a:	e007      	b.n	800988c <__sfputs_r+0x22>
 800987c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009880:	463a      	mov	r2, r7
 8009882:	4630      	mov	r0, r6
 8009884:	f7ff ffda 	bl	800983c <__sfputc_r>
 8009888:	1c43      	adds	r3, r0, #1
 800988a:	d1f3      	bne.n	8009874 <__sfputs_r+0xa>
 800988c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009890 <_vfiprintf_r>:
 8009890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009894:	460d      	mov	r5, r1
 8009896:	b09d      	sub	sp, #116	@ 0x74
 8009898:	4614      	mov	r4, r2
 800989a:	4698      	mov	r8, r3
 800989c:	4606      	mov	r6, r0
 800989e:	b118      	cbz	r0, 80098a8 <_vfiprintf_r+0x18>
 80098a0:	6a03      	ldr	r3, [r0, #32]
 80098a2:	b90b      	cbnz	r3, 80098a8 <_vfiprintf_r+0x18>
 80098a4:	f7fd f9a8 	bl	8006bf8 <__sinit>
 80098a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80098aa:	07d9      	lsls	r1, r3, #31
 80098ac:	d405      	bmi.n	80098ba <_vfiprintf_r+0x2a>
 80098ae:	89ab      	ldrh	r3, [r5, #12]
 80098b0:	059a      	lsls	r2, r3, #22
 80098b2:	d402      	bmi.n	80098ba <_vfiprintf_r+0x2a>
 80098b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80098b6:	f7fd fbbc 	bl	8007032 <__retarget_lock_acquire_recursive>
 80098ba:	89ab      	ldrh	r3, [r5, #12]
 80098bc:	071b      	lsls	r3, r3, #28
 80098be:	d501      	bpl.n	80098c4 <_vfiprintf_r+0x34>
 80098c0:	692b      	ldr	r3, [r5, #16]
 80098c2:	b99b      	cbnz	r3, 80098ec <_vfiprintf_r+0x5c>
 80098c4:	4629      	mov	r1, r5
 80098c6:	4630      	mov	r0, r6
 80098c8:	f7fd fae0 	bl	8006e8c <__swsetup_r>
 80098cc:	b170      	cbz	r0, 80098ec <_vfiprintf_r+0x5c>
 80098ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80098d0:	07dc      	lsls	r4, r3, #31
 80098d2:	d504      	bpl.n	80098de <_vfiprintf_r+0x4e>
 80098d4:	f04f 30ff 	mov.w	r0, #4294967295
 80098d8:	b01d      	add	sp, #116	@ 0x74
 80098da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098de:	89ab      	ldrh	r3, [r5, #12]
 80098e0:	0598      	lsls	r0, r3, #22
 80098e2:	d4f7      	bmi.n	80098d4 <_vfiprintf_r+0x44>
 80098e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80098e6:	f7fd fba5 	bl	8007034 <__retarget_lock_release_recursive>
 80098ea:	e7f3      	b.n	80098d4 <_vfiprintf_r+0x44>
 80098ec:	2300      	movs	r3, #0
 80098ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80098f0:	2320      	movs	r3, #32
 80098f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80098f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80098fa:	2330      	movs	r3, #48	@ 0x30
 80098fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009aac <_vfiprintf_r+0x21c>
 8009900:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009904:	f04f 0901 	mov.w	r9, #1
 8009908:	4623      	mov	r3, r4
 800990a:	469a      	mov	sl, r3
 800990c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009910:	b10a      	cbz	r2, 8009916 <_vfiprintf_r+0x86>
 8009912:	2a25      	cmp	r2, #37	@ 0x25
 8009914:	d1f9      	bne.n	800990a <_vfiprintf_r+0x7a>
 8009916:	ebba 0b04 	subs.w	fp, sl, r4
 800991a:	d00b      	beq.n	8009934 <_vfiprintf_r+0xa4>
 800991c:	465b      	mov	r3, fp
 800991e:	4622      	mov	r2, r4
 8009920:	4629      	mov	r1, r5
 8009922:	4630      	mov	r0, r6
 8009924:	f7ff ffa1 	bl	800986a <__sfputs_r>
 8009928:	3001      	adds	r0, #1
 800992a:	f000 80a7 	beq.w	8009a7c <_vfiprintf_r+0x1ec>
 800992e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009930:	445a      	add	r2, fp
 8009932:	9209      	str	r2, [sp, #36]	@ 0x24
 8009934:	f89a 3000 	ldrb.w	r3, [sl]
 8009938:	2b00      	cmp	r3, #0
 800993a:	f000 809f 	beq.w	8009a7c <_vfiprintf_r+0x1ec>
 800993e:	2300      	movs	r3, #0
 8009940:	f04f 32ff 	mov.w	r2, #4294967295
 8009944:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009948:	f10a 0a01 	add.w	sl, sl, #1
 800994c:	9304      	str	r3, [sp, #16]
 800994e:	9307      	str	r3, [sp, #28]
 8009950:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009954:	931a      	str	r3, [sp, #104]	@ 0x68
 8009956:	4654      	mov	r4, sl
 8009958:	2205      	movs	r2, #5
 800995a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800995e:	4853      	ldr	r0, [pc, #332]	@ (8009aac <_vfiprintf_r+0x21c>)
 8009960:	f7f6 fc5e 	bl	8000220 <memchr>
 8009964:	9a04      	ldr	r2, [sp, #16]
 8009966:	b9d8      	cbnz	r0, 80099a0 <_vfiprintf_r+0x110>
 8009968:	06d1      	lsls	r1, r2, #27
 800996a:	bf44      	itt	mi
 800996c:	2320      	movmi	r3, #32
 800996e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009972:	0713      	lsls	r3, r2, #28
 8009974:	bf44      	itt	mi
 8009976:	232b      	movmi	r3, #43	@ 0x2b
 8009978:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800997c:	f89a 3000 	ldrb.w	r3, [sl]
 8009980:	2b2a      	cmp	r3, #42	@ 0x2a
 8009982:	d015      	beq.n	80099b0 <_vfiprintf_r+0x120>
 8009984:	9a07      	ldr	r2, [sp, #28]
 8009986:	4654      	mov	r4, sl
 8009988:	2000      	movs	r0, #0
 800998a:	f04f 0c0a 	mov.w	ip, #10
 800998e:	4621      	mov	r1, r4
 8009990:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009994:	3b30      	subs	r3, #48	@ 0x30
 8009996:	2b09      	cmp	r3, #9
 8009998:	d94b      	bls.n	8009a32 <_vfiprintf_r+0x1a2>
 800999a:	b1b0      	cbz	r0, 80099ca <_vfiprintf_r+0x13a>
 800999c:	9207      	str	r2, [sp, #28]
 800999e:	e014      	b.n	80099ca <_vfiprintf_r+0x13a>
 80099a0:	eba0 0308 	sub.w	r3, r0, r8
 80099a4:	fa09 f303 	lsl.w	r3, r9, r3
 80099a8:	4313      	orrs	r3, r2
 80099aa:	9304      	str	r3, [sp, #16]
 80099ac:	46a2      	mov	sl, r4
 80099ae:	e7d2      	b.n	8009956 <_vfiprintf_r+0xc6>
 80099b0:	9b03      	ldr	r3, [sp, #12]
 80099b2:	1d19      	adds	r1, r3, #4
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	9103      	str	r1, [sp, #12]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	bfbb      	ittet	lt
 80099bc:	425b      	neglt	r3, r3
 80099be:	f042 0202 	orrlt.w	r2, r2, #2
 80099c2:	9307      	strge	r3, [sp, #28]
 80099c4:	9307      	strlt	r3, [sp, #28]
 80099c6:	bfb8      	it	lt
 80099c8:	9204      	strlt	r2, [sp, #16]
 80099ca:	7823      	ldrb	r3, [r4, #0]
 80099cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80099ce:	d10a      	bne.n	80099e6 <_vfiprintf_r+0x156>
 80099d0:	7863      	ldrb	r3, [r4, #1]
 80099d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80099d4:	d132      	bne.n	8009a3c <_vfiprintf_r+0x1ac>
 80099d6:	9b03      	ldr	r3, [sp, #12]
 80099d8:	1d1a      	adds	r2, r3, #4
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	9203      	str	r2, [sp, #12]
 80099de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80099e2:	3402      	adds	r4, #2
 80099e4:	9305      	str	r3, [sp, #20]
 80099e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009abc <_vfiprintf_r+0x22c>
 80099ea:	7821      	ldrb	r1, [r4, #0]
 80099ec:	2203      	movs	r2, #3
 80099ee:	4650      	mov	r0, sl
 80099f0:	f7f6 fc16 	bl	8000220 <memchr>
 80099f4:	b138      	cbz	r0, 8009a06 <_vfiprintf_r+0x176>
 80099f6:	9b04      	ldr	r3, [sp, #16]
 80099f8:	eba0 000a 	sub.w	r0, r0, sl
 80099fc:	2240      	movs	r2, #64	@ 0x40
 80099fe:	4082      	lsls	r2, r0
 8009a00:	4313      	orrs	r3, r2
 8009a02:	3401      	adds	r4, #1
 8009a04:	9304      	str	r3, [sp, #16]
 8009a06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a0a:	4829      	ldr	r0, [pc, #164]	@ (8009ab0 <_vfiprintf_r+0x220>)
 8009a0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009a10:	2206      	movs	r2, #6
 8009a12:	f7f6 fc05 	bl	8000220 <memchr>
 8009a16:	2800      	cmp	r0, #0
 8009a18:	d03f      	beq.n	8009a9a <_vfiprintf_r+0x20a>
 8009a1a:	4b26      	ldr	r3, [pc, #152]	@ (8009ab4 <_vfiprintf_r+0x224>)
 8009a1c:	bb1b      	cbnz	r3, 8009a66 <_vfiprintf_r+0x1d6>
 8009a1e:	9b03      	ldr	r3, [sp, #12]
 8009a20:	3307      	adds	r3, #7
 8009a22:	f023 0307 	bic.w	r3, r3, #7
 8009a26:	3308      	adds	r3, #8
 8009a28:	9303      	str	r3, [sp, #12]
 8009a2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a2c:	443b      	add	r3, r7
 8009a2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a30:	e76a      	b.n	8009908 <_vfiprintf_r+0x78>
 8009a32:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a36:	460c      	mov	r4, r1
 8009a38:	2001      	movs	r0, #1
 8009a3a:	e7a8      	b.n	800998e <_vfiprintf_r+0xfe>
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	3401      	adds	r4, #1
 8009a40:	9305      	str	r3, [sp, #20]
 8009a42:	4619      	mov	r1, r3
 8009a44:	f04f 0c0a 	mov.w	ip, #10
 8009a48:	4620      	mov	r0, r4
 8009a4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a4e:	3a30      	subs	r2, #48	@ 0x30
 8009a50:	2a09      	cmp	r2, #9
 8009a52:	d903      	bls.n	8009a5c <_vfiprintf_r+0x1cc>
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d0c6      	beq.n	80099e6 <_vfiprintf_r+0x156>
 8009a58:	9105      	str	r1, [sp, #20]
 8009a5a:	e7c4      	b.n	80099e6 <_vfiprintf_r+0x156>
 8009a5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a60:	4604      	mov	r4, r0
 8009a62:	2301      	movs	r3, #1
 8009a64:	e7f0      	b.n	8009a48 <_vfiprintf_r+0x1b8>
 8009a66:	ab03      	add	r3, sp, #12
 8009a68:	9300      	str	r3, [sp, #0]
 8009a6a:	462a      	mov	r2, r5
 8009a6c:	4b12      	ldr	r3, [pc, #72]	@ (8009ab8 <_vfiprintf_r+0x228>)
 8009a6e:	a904      	add	r1, sp, #16
 8009a70:	4630      	mov	r0, r6
 8009a72:	f7fc fa71 	bl	8005f58 <_printf_float>
 8009a76:	4607      	mov	r7, r0
 8009a78:	1c78      	adds	r0, r7, #1
 8009a7a:	d1d6      	bne.n	8009a2a <_vfiprintf_r+0x19a>
 8009a7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a7e:	07d9      	lsls	r1, r3, #31
 8009a80:	d405      	bmi.n	8009a8e <_vfiprintf_r+0x1fe>
 8009a82:	89ab      	ldrh	r3, [r5, #12]
 8009a84:	059a      	lsls	r2, r3, #22
 8009a86:	d402      	bmi.n	8009a8e <_vfiprintf_r+0x1fe>
 8009a88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a8a:	f7fd fad3 	bl	8007034 <__retarget_lock_release_recursive>
 8009a8e:	89ab      	ldrh	r3, [r5, #12]
 8009a90:	065b      	lsls	r3, r3, #25
 8009a92:	f53f af1f 	bmi.w	80098d4 <_vfiprintf_r+0x44>
 8009a96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009a98:	e71e      	b.n	80098d8 <_vfiprintf_r+0x48>
 8009a9a:	ab03      	add	r3, sp, #12
 8009a9c:	9300      	str	r3, [sp, #0]
 8009a9e:	462a      	mov	r2, r5
 8009aa0:	4b05      	ldr	r3, [pc, #20]	@ (8009ab8 <_vfiprintf_r+0x228>)
 8009aa2:	a904      	add	r1, sp, #16
 8009aa4:	4630      	mov	r0, r6
 8009aa6:	f7fc fcef 	bl	8006488 <_printf_i>
 8009aaa:	e7e4      	b.n	8009a76 <_vfiprintf_r+0x1e6>
 8009aac:	0800aaa1 	.word	0x0800aaa1
 8009ab0:	0800aaab 	.word	0x0800aaab
 8009ab4:	08005f59 	.word	0x08005f59
 8009ab8:	0800986b 	.word	0x0800986b
 8009abc:	0800aaa7 	.word	0x0800aaa7

08009ac0 <__sflush_r>:
 8009ac0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ac8:	0716      	lsls	r6, r2, #28
 8009aca:	4605      	mov	r5, r0
 8009acc:	460c      	mov	r4, r1
 8009ace:	d454      	bmi.n	8009b7a <__sflush_r+0xba>
 8009ad0:	684b      	ldr	r3, [r1, #4]
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	dc02      	bgt.n	8009adc <__sflush_r+0x1c>
 8009ad6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	dd48      	ble.n	8009b6e <__sflush_r+0xae>
 8009adc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009ade:	2e00      	cmp	r6, #0
 8009ae0:	d045      	beq.n	8009b6e <__sflush_r+0xae>
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009ae8:	682f      	ldr	r7, [r5, #0]
 8009aea:	6a21      	ldr	r1, [r4, #32]
 8009aec:	602b      	str	r3, [r5, #0]
 8009aee:	d030      	beq.n	8009b52 <__sflush_r+0x92>
 8009af0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009af2:	89a3      	ldrh	r3, [r4, #12]
 8009af4:	0759      	lsls	r1, r3, #29
 8009af6:	d505      	bpl.n	8009b04 <__sflush_r+0x44>
 8009af8:	6863      	ldr	r3, [r4, #4]
 8009afa:	1ad2      	subs	r2, r2, r3
 8009afc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009afe:	b10b      	cbz	r3, 8009b04 <__sflush_r+0x44>
 8009b00:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009b02:	1ad2      	subs	r2, r2, r3
 8009b04:	2300      	movs	r3, #0
 8009b06:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009b08:	6a21      	ldr	r1, [r4, #32]
 8009b0a:	4628      	mov	r0, r5
 8009b0c:	47b0      	blx	r6
 8009b0e:	1c43      	adds	r3, r0, #1
 8009b10:	89a3      	ldrh	r3, [r4, #12]
 8009b12:	d106      	bne.n	8009b22 <__sflush_r+0x62>
 8009b14:	6829      	ldr	r1, [r5, #0]
 8009b16:	291d      	cmp	r1, #29
 8009b18:	d82b      	bhi.n	8009b72 <__sflush_r+0xb2>
 8009b1a:	4a2a      	ldr	r2, [pc, #168]	@ (8009bc4 <__sflush_r+0x104>)
 8009b1c:	40ca      	lsrs	r2, r1
 8009b1e:	07d6      	lsls	r6, r2, #31
 8009b20:	d527      	bpl.n	8009b72 <__sflush_r+0xb2>
 8009b22:	2200      	movs	r2, #0
 8009b24:	6062      	str	r2, [r4, #4]
 8009b26:	04d9      	lsls	r1, r3, #19
 8009b28:	6922      	ldr	r2, [r4, #16]
 8009b2a:	6022      	str	r2, [r4, #0]
 8009b2c:	d504      	bpl.n	8009b38 <__sflush_r+0x78>
 8009b2e:	1c42      	adds	r2, r0, #1
 8009b30:	d101      	bne.n	8009b36 <__sflush_r+0x76>
 8009b32:	682b      	ldr	r3, [r5, #0]
 8009b34:	b903      	cbnz	r3, 8009b38 <__sflush_r+0x78>
 8009b36:	6560      	str	r0, [r4, #84]	@ 0x54
 8009b38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b3a:	602f      	str	r7, [r5, #0]
 8009b3c:	b1b9      	cbz	r1, 8009b6e <__sflush_r+0xae>
 8009b3e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009b42:	4299      	cmp	r1, r3
 8009b44:	d002      	beq.n	8009b4c <__sflush_r+0x8c>
 8009b46:	4628      	mov	r0, r5
 8009b48:	f7fe f8f2 	bl	8007d30 <_free_r>
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009b50:	e00d      	b.n	8009b6e <__sflush_r+0xae>
 8009b52:	2301      	movs	r3, #1
 8009b54:	4628      	mov	r0, r5
 8009b56:	47b0      	blx	r6
 8009b58:	4602      	mov	r2, r0
 8009b5a:	1c50      	adds	r0, r2, #1
 8009b5c:	d1c9      	bne.n	8009af2 <__sflush_r+0x32>
 8009b5e:	682b      	ldr	r3, [r5, #0]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d0c6      	beq.n	8009af2 <__sflush_r+0x32>
 8009b64:	2b1d      	cmp	r3, #29
 8009b66:	d001      	beq.n	8009b6c <__sflush_r+0xac>
 8009b68:	2b16      	cmp	r3, #22
 8009b6a:	d11e      	bne.n	8009baa <__sflush_r+0xea>
 8009b6c:	602f      	str	r7, [r5, #0]
 8009b6e:	2000      	movs	r0, #0
 8009b70:	e022      	b.n	8009bb8 <__sflush_r+0xf8>
 8009b72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b76:	b21b      	sxth	r3, r3
 8009b78:	e01b      	b.n	8009bb2 <__sflush_r+0xf2>
 8009b7a:	690f      	ldr	r7, [r1, #16]
 8009b7c:	2f00      	cmp	r7, #0
 8009b7e:	d0f6      	beq.n	8009b6e <__sflush_r+0xae>
 8009b80:	0793      	lsls	r3, r2, #30
 8009b82:	680e      	ldr	r6, [r1, #0]
 8009b84:	bf08      	it	eq
 8009b86:	694b      	ldreq	r3, [r1, #20]
 8009b88:	600f      	str	r7, [r1, #0]
 8009b8a:	bf18      	it	ne
 8009b8c:	2300      	movne	r3, #0
 8009b8e:	eba6 0807 	sub.w	r8, r6, r7
 8009b92:	608b      	str	r3, [r1, #8]
 8009b94:	f1b8 0f00 	cmp.w	r8, #0
 8009b98:	dde9      	ble.n	8009b6e <__sflush_r+0xae>
 8009b9a:	6a21      	ldr	r1, [r4, #32]
 8009b9c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009b9e:	4643      	mov	r3, r8
 8009ba0:	463a      	mov	r2, r7
 8009ba2:	4628      	mov	r0, r5
 8009ba4:	47b0      	blx	r6
 8009ba6:	2800      	cmp	r0, #0
 8009ba8:	dc08      	bgt.n	8009bbc <__sflush_r+0xfc>
 8009baa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009bb2:	81a3      	strh	r3, [r4, #12]
 8009bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8009bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bbc:	4407      	add	r7, r0
 8009bbe:	eba8 0800 	sub.w	r8, r8, r0
 8009bc2:	e7e7      	b.n	8009b94 <__sflush_r+0xd4>
 8009bc4:	20400001 	.word	0x20400001

08009bc8 <_fflush_r>:
 8009bc8:	b538      	push	{r3, r4, r5, lr}
 8009bca:	690b      	ldr	r3, [r1, #16]
 8009bcc:	4605      	mov	r5, r0
 8009bce:	460c      	mov	r4, r1
 8009bd0:	b913      	cbnz	r3, 8009bd8 <_fflush_r+0x10>
 8009bd2:	2500      	movs	r5, #0
 8009bd4:	4628      	mov	r0, r5
 8009bd6:	bd38      	pop	{r3, r4, r5, pc}
 8009bd8:	b118      	cbz	r0, 8009be2 <_fflush_r+0x1a>
 8009bda:	6a03      	ldr	r3, [r0, #32]
 8009bdc:	b90b      	cbnz	r3, 8009be2 <_fflush_r+0x1a>
 8009bde:	f7fd f80b 	bl	8006bf8 <__sinit>
 8009be2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d0f3      	beq.n	8009bd2 <_fflush_r+0xa>
 8009bea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009bec:	07d0      	lsls	r0, r2, #31
 8009bee:	d404      	bmi.n	8009bfa <_fflush_r+0x32>
 8009bf0:	0599      	lsls	r1, r3, #22
 8009bf2:	d402      	bmi.n	8009bfa <_fflush_r+0x32>
 8009bf4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009bf6:	f7fd fa1c 	bl	8007032 <__retarget_lock_acquire_recursive>
 8009bfa:	4628      	mov	r0, r5
 8009bfc:	4621      	mov	r1, r4
 8009bfe:	f7ff ff5f 	bl	8009ac0 <__sflush_r>
 8009c02:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009c04:	07da      	lsls	r2, r3, #31
 8009c06:	4605      	mov	r5, r0
 8009c08:	d4e4      	bmi.n	8009bd4 <_fflush_r+0xc>
 8009c0a:	89a3      	ldrh	r3, [r4, #12]
 8009c0c:	059b      	lsls	r3, r3, #22
 8009c0e:	d4e1      	bmi.n	8009bd4 <_fflush_r+0xc>
 8009c10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009c12:	f7fd fa0f 	bl	8007034 <__retarget_lock_release_recursive>
 8009c16:	e7dd      	b.n	8009bd4 <_fflush_r+0xc>

08009c18 <fiprintf>:
 8009c18:	b40e      	push	{r1, r2, r3}
 8009c1a:	b503      	push	{r0, r1, lr}
 8009c1c:	4601      	mov	r1, r0
 8009c1e:	ab03      	add	r3, sp, #12
 8009c20:	4805      	ldr	r0, [pc, #20]	@ (8009c38 <fiprintf+0x20>)
 8009c22:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c26:	6800      	ldr	r0, [r0, #0]
 8009c28:	9301      	str	r3, [sp, #4]
 8009c2a:	f7ff fe31 	bl	8009890 <_vfiprintf_r>
 8009c2e:	b002      	add	sp, #8
 8009c30:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c34:	b003      	add	sp, #12
 8009c36:	4770      	bx	lr
 8009c38:	20000048 	.word	0x20000048

08009c3c <__swhatbuf_r>:
 8009c3c:	b570      	push	{r4, r5, r6, lr}
 8009c3e:	460c      	mov	r4, r1
 8009c40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c44:	2900      	cmp	r1, #0
 8009c46:	b096      	sub	sp, #88	@ 0x58
 8009c48:	4615      	mov	r5, r2
 8009c4a:	461e      	mov	r6, r3
 8009c4c:	da0d      	bge.n	8009c6a <__swhatbuf_r+0x2e>
 8009c4e:	89a3      	ldrh	r3, [r4, #12]
 8009c50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009c54:	f04f 0100 	mov.w	r1, #0
 8009c58:	bf14      	ite	ne
 8009c5a:	2340      	movne	r3, #64	@ 0x40
 8009c5c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009c60:	2000      	movs	r0, #0
 8009c62:	6031      	str	r1, [r6, #0]
 8009c64:	602b      	str	r3, [r5, #0]
 8009c66:	b016      	add	sp, #88	@ 0x58
 8009c68:	bd70      	pop	{r4, r5, r6, pc}
 8009c6a:	466a      	mov	r2, sp
 8009c6c:	f000 f874 	bl	8009d58 <_fstat_r>
 8009c70:	2800      	cmp	r0, #0
 8009c72:	dbec      	blt.n	8009c4e <__swhatbuf_r+0x12>
 8009c74:	9901      	ldr	r1, [sp, #4]
 8009c76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009c7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009c7e:	4259      	negs	r1, r3
 8009c80:	4159      	adcs	r1, r3
 8009c82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009c86:	e7eb      	b.n	8009c60 <__swhatbuf_r+0x24>

08009c88 <__smakebuf_r>:
 8009c88:	898b      	ldrh	r3, [r1, #12]
 8009c8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c8c:	079d      	lsls	r5, r3, #30
 8009c8e:	4606      	mov	r6, r0
 8009c90:	460c      	mov	r4, r1
 8009c92:	d507      	bpl.n	8009ca4 <__smakebuf_r+0x1c>
 8009c94:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009c98:	6023      	str	r3, [r4, #0]
 8009c9a:	6123      	str	r3, [r4, #16]
 8009c9c:	2301      	movs	r3, #1
 8009c9e:	6163      	str	r3, [r4, #20]
 8009ca0:	b003      	add	sp, #12
 8009ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ca4:	ab01      	add	r3, sp, #4
 8009ca6:	466a      	mov	r2, sp
 8009ca8:	f7ff ffc8 	bl	8009c3c <__swhatbuf_r>
 8009cac:	9f00      	ldr	r7, [sp, #0]
 8009cae:	4605      	mov	r5, r0
 8009cb0:	4639      	mov	r1, r7
 8009cb2:	4630      	mov	r0, r6
 8009cb4:	f7fe f8b0 	bl	8007e18 <_malloc_r>
 8009cb8:	b948      	cbnz	r0, 8009cce <__smakebuf_r+0x46>
 8009cba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cbe:	059a      	lsls	r2, r3, #22
 8009cc0:	d4ee      	bmi.n	8009ca0 <__smakebuf_r+0x18>
 8009cc2:	f023 0303 	bic.w	r3, r3, #3
 8009cc6:	f043 0302 	orr.w	r3, r3, #2
 8009cca:	81a3      	strh	r3, [r4, #12]
 8009ccc:	e7e2      	b.n	8009c94 <__smakebuf_r+0xc>
 8009cce:	89a3      	ldrh	r3, [r4, #12]
 8009cd0:	6020      	str	r0, [r4, #0]
 8009cd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cd6:	81a3      	strh	r3, [r4, #12]
 8009cd8:	9b01      	ldr	r3, [sp, #4]
 8009cda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009cde:	b15b      	cbz	r3, 8009cf8 <__smakebuf_r+0x70>
 8009ce0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ce4:	4630      	mov	r0, r6
 8009ce6:	f000 f849 	bl	8009d7c <_isatty_r>
 8009cea:	b128      	cbz	r0, 8009cf8 <__smakebuf_r+0x70>
 8009cec:	89a3      	ldrh	r3, [r4, #12]
 8009cee:	f023 0303 	bic.w	r3, r3, #3
 8009cf2:	f043 0301 	orr.w	r3, r3, #1
 8009cf6:	81a3      	strh	r3, [r4, #12]
 8009cf8:	89a3      	ldrh	r3, [r4, #12]
 8009cfa:	431d      	orrs	r5, r3
 8009cfc:	81a5      	strh	r5, [r4, #12]
 8009cfe:	e7cf      	b.n	8009ca0 <__smakebuf_r+0x18>

08009d00 <memmove>:
 8009d00:	4288      	cmp	r0, r1
 8009d02:	b510      	push	{r4, lr}
 8009d04:	eb01 0402 	add.w	r4, r1, r2
 8009d08:	d902      	bls.n	8009d10 <memmove+0x10>
 8009d0a:	4284      	cmp	r4, r0
 8009d0c:	4623      	mov	r3, r4
 8009d0e:	d807      	bhi.n	8009d20 <memmove+0x20>
 8009d10:	1e43      	subs	r3, r0, #1
 8009d12:	42a1      	cmp	r1, r4
 8009d14:	d008      	beq.n	8009d28 <memmove+0x28>
 8009d16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d1e:	e7f8      	b.n	8009d12 <memmove+0x12>
 8009d20:	4402      	add	r2, r0
 8009d22:	4601      	mov	r1, r0
 8009d24:	428a      	cmp	r2, r1
 8009d26:	d100      	bne.n	8009d2a <memmove+0x2a>
 8009d28:	bd10      	pop	{r4, pc}
 8009d2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d32:	e7f7      	b.n	8009d24 <memmove+0x24>

08009d34 <strncmp>:
 8009d34:	b510      	push	{r4, lr}
 8009d36:	b16a      	cbz	r2, 8009d54 <strncmp+0x20>
 8009d38:	3901      	subs	r1, #1
 8009d3a:	1884      	adds	r4, r0, r2
 8009d3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d40:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d103      	bne.n	8009d50 <strncmp+0x1c>
 8009d48:	42a0      	cmp	r0, r4
 8009d4a:	d001      	beq.n	8009d50 <strncmp+0x1c>
 8009d4c:	2a00      	cmp	r2, #0
 8009d4e:	d1f5      	bne.n	8009d3c <strncmp+0x8>
 8009d50:	1ad0      	subs	r0, r2, r3
 8009d52:	bd10      	pop	{r4, pc}
 8009d54:	4610      	mov	r0, r2
 8009d56:	e7fc      	b.n	8009d52 <strncmp+0x1e>

08009d58 <_fstat_r>:
 8009d58:	b538      	push	{r3, r4, r5, lr}
 8009d5a:	4d07      	ldr	r5, [pc, #28]	@ (8009d78 <_fstat_r+0x20>)
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	4604      	mov	r4, r0
 8009d60:	4608      	mov	r0, r1
 8009d62:	4611      	mov	r1, r2
 8009d64:	602b      	str	r3, [r5, #0]
 8009d66:	f7f7 fc0c 	bl	8001582 <_fstat>
 8009d6a:	1c43      	adds	r3, r0, #1
 8009d6c:	d102      	bne.n	8009d74 <_fstat_r+0x1c>
 8009d6e:	682b      	ldr	r3, [r5, #0]
 8009d70:	b103      	cbz	r3, 8009d74 <_fstat_r+0x1c>
 8009d72:	6023      	str	r3, [r4, #0]
 8009d74:	bd38      	pop	{r3, r4, r5, pc}
 8009d76:	bf00      	nop
 8009d78:	20000e14 	.word	0x20000e14

08009d7c <_isatty_r>:
 8009d7c:	b538      	push	{r3, r4, r5, lr}
 8009d7e:	4d06      	ldr	r5, [pc, #24]	@ (8009d98 <_isatty_r+0x1c>)
 8009d80:	2300      	movs	r3, #0
 8009d82:	4604      	mov	r4, r0
 8009d84:	4608      	mov	r0, r1
 8009d86:	602b      	str	r3, [r5, #0]
 8009d88:	f7f7 fc0b 	bl	80015a2 <_isatty>
 8009d8c:	1c43      	adds	r3, r0, #1
 8009d8e:	d102      	bne.n	8009d96 <_isatty_r+0x1a>
 8009d90:	682b      	ldr	r3, [r5, #0]
 8009d92:	b103      	cbz	r3, 8009d96 <_isatty_r+0x1a>
 8009d94:	6023      	str	r3, [r4, #0]
 8009d96:	bd38      	pop	{r3, r4, r5, pc}
 8009d98:	20000e14 	.word	0x20000e14

08009d9c <_sbrk_r>:
 8009d9c:	b538      	push	{r3, r4, r5, lr}
 8009d9e:	4d06      	ldr	r5, [pc, #24]	@ (8009db8 <_sbrk_r+0x1c>)
 8009da0:	2300      	movs	r3, #0
 8009da2:	4604      	mov	r4, r0
 8009da4:	4608      	mov	r0, r1
 8009da6:	602b      	str	r3, [r5, #0]
 8009da8:	f7f7 fc14 	bl	80015d4 <_sbrk>
 8009dac:	1c43      	adds	r3, r0, #1
 8009dae:	d102      	bne.n	8009db6 <_sbrk_r+0x1a>
 8009db0:	682b      	ldr	r3, [r5, #0]
 8009db2:	b103      	cbz	r3, 8009db6 <_sbrk_r+0x1a>
 8009db4:	6023      	str	r3, [r4, #0]
 8009db6:	bd38      	pop	{r3, r4, r5, pc}
 8009db8:	20000e14 	.word	0x20000e14

08009dbc <memcpy>:
 8009dbc:	440a      	add	r2, r1
 8009dbe:	4291      	cmp	r1, r2
 8009dc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009dc4:	d100      	bne.n	8009dc8 <memcpy+0xc>
 8009dc6:	4770      	bx	lr
 8009dc8:	b510      	push	{r4, lr}
 8009dca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009dce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009dd2:	4291      	cmp	r1, r2
 8009dd4:	d1f9      	bne.n	8009dca <memcpy+0xe>
 8009dd6:	bd10      	pop	{r4, pc}

08009dd8 <nan>:
 8009dd8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009de0 <nan+0x8>
 8009ddc:	4770      	bx	lr
 8009dde:	bf00      	nop
 8009de0:	00000000 	.word	0x00000000
 8009de4:	7ff80000 	.word	0x7ff80000

08009de8 <abort>:
 8009de8:	b508      	push	{r3, lr}
 8009dea:	2006      	movs	r0, #6
 8009dec:	f000 fbc4 	bl	800a578 <raise>
 8009df0:	2001      	movs	r0, #1
 8009df2:	f7f7 fb76 	bl	80014e2 <_exit>

08009df6 <_calloc_r>:
 8009df6:	b570      	push	{r4, r5, r6, lr}
 8009df8:	fba1 5402 	umull	r5, r4, r1, r2
 8009dfc:	b934      	cbnz	r4, 8009e0c <_calloc_r+0x16>
 8009dfe:	4629      	mov	r1, r5
 8009e00:	f7fe f80a 	bl	8007e18 <_malloc_r>
 8009e04:	4606      	mov	r6, r0
 8009e06:	b928      	cbnz	r0, 8009e14 <_calloc_r+0x1e>
 8009e08:	4630      	mov	r0, r6
 8009e0a:	bd70      	pop	{r4, r5, r6, pc}
 8009e0c:	220c      	movs	r2, #12
 8009e0e:	6002      	str	r2, [r0, #0]
 8009e10:	2600      	movs	r6, #0
 8009e12:	e7f9      	b.n	8009e08 <_calloc_r+0x12>
 8009e14:	462a      	mov	r2, r5
 8009e16:	4621      	mov	r1, r4
 8009e18:	f7fd f88e 	bl	8006f38 <memset>
 8009e1c:	e7f4      	b.n	8009e08 <_calloc_r+0x12>

08009e1e <rshift>:
 8009e1e:	6903      	ldr	r3, [r0, #16]
 8009e20:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009e24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e28:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009e2c:	f100 0414 	add.w	r4, r0, #20
 8009e30:	dd45      	ble.n	8009ebe <rshift+0xa0>
 8009e32:	f011 011f 	ands.w	r1, r1, #31
 8009e36:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009e3a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009e3e:	d10c      	bne.n	8009e5a <rshift+0x3c>
 8009e40:	f100 0710 	add.w	r7, r0, #16
 8009e44:	4629      	mov	r1, r5
 8009e46:	42b1      	cmp	r1, r6
 8009e48:	d334      	bcc.n	8009eb4 <rshift+0x96>
 8009e4a:	1a9b      	subs	r3, r3, r2
 8009e4c:	009b      	lsls	r3, r3, #2
 8009e4e:	1eea      	subs	r2, r5, #3
 8009e50:	4296      	cmp	r6, r2
 8009e52:	bf38      	it	cc
 8009e54:	2300      	movcc	r3, #0
 8009e56:	4423      	add	r3, r4
 8009e58:	e015      	b.n	8009e86 <rshift+0x68>
 8009e5a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009e5e:	f1c1 0820 	rsb	r8, r1, #32
 8009e62:	40cf      	lsrs	r7, r1
 8009e64:	f105 0e04 	add.w	lr, r5, #4
 8009e68:	46a1      	mov	r9, r4
 8009e6a:	4576      	cmp	r6, lr
 8009e6c:	46f4      	mov	ip, lr
 8009e6e:	d815      	bhi.n	8009e9c <rshift+0x7e>
 8009e70:	1a9a      	subs	r2, r3, r2
 8009e72:	0092      	lsls	r2, r2, #2
 8009e74:	3a04      	subs	r2, #4
 8009e76:	3501      	adds	r5, #1
 8009e78:	42ae      	cmp	r6, r5
 8009e7a:	bf38      	it	cc
 8009e7c:	2200      	movcc	r2, #0
 8009e7e:	18a3      	adds	r3, r4, r2
 8009e80:	50a7      	str	r7, [r4, r2]
 8009e82:	b107      	cbz	r7, 8009e86 <rshift+0x68>
 8009e84:	3304      	adds	r3, #4
 8009e86:	1b1a      	subs	r2, r3, r4
 8009e88:	42a3      	cmp	r3, r4
 8009e8a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009e8e:	bf08      	it	eq
 8009e90:	2300      	moveq	r3, #0
 8009e92:	6102      	str	r2, [r0, #16]
 8009e94:	bf08      	it	eq
 8009e96:	6143      	streq	r3, [r0, #20]
 8009e98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e9c:	f8dc c000 	ldr.w	ip, [ip]
 8009ea0:	fa0c fc08 	lsl.w	ip, ip, r8
 8009ea4:	ea4c 0707 	orr.w	r7, ip, r7
 8009ea8:	f849 7b04 	str.w	r7, [r9], #4
 8009eac:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009eb0:	40cf      	lsrs	r7, r1
 8009eb2:	e7da      	b.n	8009e6a <rshift+0x4c>
 8009eb4:	f851 cb04 	ldr.w	ip, [r1], #4
 8009eb8:	f847 cf04 	str.w	ip, [r7, #4]!
 8009ebc:	e7c3      	b.n	8009e46 <rshift+0x28>
 8009ebe:	4623      	mov	r3, r4
 8009ec0:	e7e1      	b.n	8009e86 <rshift+0x68>

08009ec2 <__hexdig_fun>:
 8009ec2:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009ec6:	2b09      	cmp	r3, #9
 8009ec8:	d802      	bhi.n	8009ed0 <__hexdig_fun+0xe>
 8009eca:	3820      	subs	r0, #32
 8009ecc:	b2c0      	uxtb	r0, r0
 8009ece:	4770      	bx	lr
 8009ed0:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009ed4:	2b05      	cmp	r3, #5
 8009ed6:	d801      	bhi.n	8009edc <__hexdig_fun+0x1a>
 8009ed8:	3847      	subs	r0, #71	@ 0x47
 8009eda:	e7f7      	b.n	8009ecc <__hexdig_fun+0xa>
 8009edc:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009ee0:	2b05      	cmp	r3, #5
 8009ee2:	d801      	bhi.n	8009ee8 <__hexdig_fun+0x26>
 8009ee4:	3827      	subs	r0, #39	@ 0x27
 8009ee6:	e7f1      	b.n	8009ecc <__hexdig_fun+0xa>
 8009ee8:	2000      	movs	r0, #0
 8009eea:	4770      	bx	lr

08009eec <__gethex>:
 8009eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef0:	b085      	sub	sp, #20
 8009ef2:	468a      	mov	sl, r1
 8009ef4:	9302      	str	r3, [sp, #8]
 8009ef6:	680b      	ldr	r3, [r1, #0]
 8009ef8:	9001      	str	r0, [sp, #4]
 8009efa:	4690      	mov	r8, r2
 8009efc:	1c9c      	adds	r4, r3, #2
 8009efe:	46a1      	mov	r9, r4
 8009f00:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009f04:	2830      	cmp	r0, #48	@ 0x30
 8009f06:	d0fa      	beq.n	8009efe <__gethex+0x12>
 8009f08:	eba9 0303 	sub.w	r3, r9, r3
 8009f0c:	f1a3 0b02 	sub.w	fp, r3, #2
 8009f10:	f7ff ffd7 	bl	8009ec2 <__hexdig_fun>
 8009f14:	4605      	mov	r5, r0
 8009f16:	2800      	cmp	r0, #0
 8009f18:	d168      	bne.n	8009fec <__gethex+0x100>
 8009f1a:	49a0      	ldr	r1, [pc, #640]	@ (800a19c <__gethex+0x2b0>)
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	4648      	mov	r0, r9
 8009f20:	f7ff ff08 	bl	8009d34 <strncmp>
 8009f24:	4607      	mov	r7, r0
 8009f26:	2800      	cmp	r0, #0
 8009f28:	d167      	bne.n	8009ffa <__gethex+0x10e>
 8009f2a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009f2e:	4626      	mov	r6, r4
 8009f30:	f7ff ffc7 	bl	8009ec2 <__hexdig_fun>
 8009f34:	2800      	cmp	r0, #0
 8009f36:	d062      	beq.n	8009ffe <__gethex+0x112>
 8009f38:	4623      	mov	r3, r4
 8009f3a:	7818      	ldrb	r0, [r3, #0]
 8009f3c:	2830      	cmp	r0, #48	@ 0x30
 8009f3e:	4699      	mov	r9, r3
 8009f40:	f103 0301 	add.w	r3, r3, #1
 8009f44:	d0f9      	beq.n	8009f3a <__gethex+0x4e>
 8009f46:	f7ff ffbc 	bl	8009ec2 <__hexdig_fun>
 8009f4a:	fab0 f580 	clz	r5, r0
 8009f4e:	096d      	lsrs	r5, r5, #5
 8009f50:	f04f 0b01 	mov.w	fp, #1
 8009f54:	464a      	mov	r2, r9
 8009f56:	4616      	mov	r6, r2
 8009f58:	3201      	adds	r2, #1
 8009f5a:	7830      	ldrb	r0, [r6, #0]
 8009f5c:	f7ff ffb1 	bl	8009ec2 <__hexdig_fun>
 8009f60:	2800      	cmp	r0, #0
 8009f62:	d1f8      	bne.n	8009f56 <__gethex+0x6a>
 8009f64:	498d      	ldr	r1, [pc, #564]	@ (800a19c <__gethex+0x2b0>)
 8009f66:	2201      	movs	r2, #1
 8009f68:	4630      	mov	r0, r6
 8009f6a:	f7ff fee3 	bl	8009d34 <strncmp>
 8009f6e:	2800      	cmp	r0, #0
 8009f70:	d13f      	bne.n	8009ff2 <__gethex+0x106>
 8009f72:	b944      	cbnz	r4, 8009f86 <__gethex+0x9a>
 8009f74:	1c74      	adds	r4, r6, #1
 8009f76:	4622      	mov	r2, r4
 8009f78:	4616      	mov	r6, r2
 8009f7a:	3201      	adds	r2, #1
 8009f7c:	7830      	ldrb	r0, [r6, #0]
 8009f7e:	f7ff ffa0 	bl	8009ec2 <__hexdig_fun>
 8009f82:	2800      	cmp	r0, #0
 8009f84:	d1f8      	bne.n	8009f78 <__gethex+0x8c>
 8009f86:	1ba4      	subs	r4, r4, r6
 8009f88:	00a7      	lsls	r7, r4, #2
 8009f8a:	7833      	ldrb	r3, [r6, #0]
 8009f8c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009f90:	2b50      	cmp	r3, #80	@ 0x50
 8009f92:	d13e      	bne.n	800a012 <__gethex+0x126>
 8009f94:	7873      	ldrb	r3, [r6, #1]
 8009f96:	2b2b      	cmp	r3, #43	@ 0x2b
 8009f98:	d033      	beq.n	800a002 <__gethex+0x116>
 8009f9a:	2b2d      	cmp	r3, #45	@ 0x2d
 8009f9c:	d034      	beq.n	800a008 <__gethex+0x11c>
 8009f9e:	1c71      	adds	r1, r6, #1
 8009fa0:	2400      	movs	r4, #0
 8009fa2:	7808      	ldrb	r0, [r1, #0]
 8009fa4:	f7ff ff8d 	bl	8009ec2 <__hexdig_fun>
 8009fa8:	1e43      	subs	r3, r0, #1
 8009faa:	b2db      	uxtb	r3, r3
 8009fac:	2b18      	cmp	r3, #24
 8009fae:	d830      	bhi.n	800a012 <__gethex+0x126>
 8009fb0:	f1a0 0210 	sub.w	r2, r0, #16
 8009fb4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009fb8:	f7ff ff83 	bl	8009ec2 <__hexdig_fun>
 8009fbc:	f100 3cff 	add.w	ip, r0, #4294967295
 8009fc0:	fa5f fc8c 	uxtb.w	ip, ip
 8009fc4:	f1bc 0f18 	cmp.w	ip, #24
 8009fc8:	f04f 030a 	mov.w	r3, #10
 8009fcc:	d91e      	bls.n	800a00c <__gethex+0x120>
 8009fce:	b104      	cbz	r4, 8009fd2 <__gethex+0xe6>
 8009fd0:	4252      	negs	r2, r2
 8009fd2:	4417      	add	r7, r2
 8009fd4:	f8ca 1000 	str.w	r1, [sl]
 8009fd8:	b1ed      	cbz	r5, 800a016 <__gethex+0x12a>
 8009fda:	f1bb 0f00 	cmp.w	fp, #0
 8009fde:	bf0c      	ite	eq
 8009fe0:	2506      	moveq	r5, #6
 8009fe2:	2500      	movne	r5, #0
 8009fe4:	4628      	mov	r0, r5
 8009fe6:	b005      	add	sp, #20
 8009fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fec:	2500      	movs	r5, #0
 8009fee:	462c      	mov	r4, r5
 8009ff0:	e7b0      	b.n	8009f54 <__gethex+0x68>
 8009ff2:	2c00      	cmp	r4, #0
 8009ff4:	d1c7      	bne.n	8009f86 <__gethex+0x9a>
 8009ff6:	4627      	mov	r7, r4
 8009ff8:	e7c7      	b.n	8009f8a <__gethex+0x9e>
 8009ffa:	464e      	mov	r6, r9
 8009ffc:	462f      	mov	r7, r5
 8009ffe:	2501      	movs	r5, #1
 800a000:	e7c3      	b.n	8009f8a <__gethex+0x9e>
 800a002:	2400      	movs	r4, #0
 800a004:	1cb1      	adds	r1, r6, #2
 800a006:	e7cc      	b.n	8009fa2 <__gethex+0xb6>
 800a008:	2401      	movs	r4, #1
 800a00a:	e7fb      	b.n	800a004 <__gethex+0x118>
 800a00c:	fb03 0002 	mla	r0, r3, r2, r0
 800a010:	e7ce      	b.n	8009fb0 <__gethex+0xc4>
 800a012:	4631      	mov	r1, r6
 800a014:	e7de      	b.n	8009fd4 <__gethex+0xe8>
 800a016:	eba6 0309 	sub.w	r3, r6, r9
 800a01a:	3b01      	subs	r3, #1
 800a01c:	4629      	mov	r1, r5
 800a01e:	2b07      	cmp	r3, #7
 800a020:	dc0a      	bgt.n	800a038 <__gethex+0x14c>
 800a022:	9801      	ldr	r0, [sp, #4]
 800a024:	f7fd ff84 	bl	8007f30 <_Balloc>
 800a028:	4604      	mov	r4, r0
 800a02a:	b940      	cbnz	r0, 800a03e <__gethex+0x152>
 800a02c:	4b5c      	ldr	r3, [pc, #368]	@ (800a1a0 <__gethex+0x2b4>)
 800a02e:	4602      	mov	r2, r0
 800a030:	21e4      	movs	r1, #228	@ 0xe4
 800a032:	485c      	ldr	r0, [pc, #368]	@ (800a1a4 <__gethex+0x2b8>)
 800a034:	f7fd f806 	bl	8007044 <__assert_func>
 800a038:	3101      	adds	r1, #1
 800a03a:	105b      	asrs	r3, r3, #1
 800a03c:	e7ef      	b.n	800a01e <__gethex+0x132>
 800a03e:	f100 0a14 	add.w	sl, r0, #20
 800a042:	2300      	movs	r3, #0
 800a044:	4655      	mov	r5, sl
 800a046:	469b      	mov	fp, r3
 800a048:	45b1      	cmp	r9, r6
 800a04a:	d337      	bcc.n	800a0bc <__gethex+0x1d0>
 800a04c:	f845 bb04 	str.w	fp, [r5], #4
 800a050:	eba5 050a 	sub.w	r5, r5, sl
 800a054:	10ad      	asrs	r5, r5, #2
 800a056:	6125      	str	r5, [r4, #16]
 800a058:	4658      	mov	r0, fp
 800a05a:	f7fe f85b 	bl	8008114 <__hi0bits>
 800a05e:	016d      	lsls	r5, r5, #5
 800a060:	f8d8 6000 	ldr.w	r6, [r8]
 800a064:	1a2d      	subs	r5, r5, r0
 800a066:	42b5      	cmp	r5, r6
 800a068:	dd54      	ble.n	800a114 <__gethex+0x228>
 800a06a:	1bad      	subs	r5, r5, r6
 800a06c:	4629      	mov	r1, r5
 800a06e:	4620      	mov	r0, r4
 800a070:	f7fe fbe7 	bl	8008842 <__any_on>
 800a074:	4681      	mov	r9, r0
 800a076:	b178      	cbz	r0, 800a098 <__gethex+0x1ac>
 800a078:	1e6b      	subs	r3, r5, #1
 800a07a:	1159      	asrs	r1, r3, #5
 800a07c:	f003 021f 	and.w	r2, r3, #31
 800a080:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a084:	f04f 0901 	mov.w	r9, #1
 800a088:	fa09 f202 	lsl.w	r2, r9, r2
 800a08c:	420a      	tst	r2, r1
 800a08e:	d003      	beq.n	800a098 <__gethex+0x1ac>
 800a090:	454b      	cmp	r3, r9
 800a092:	dc36      	bgt.n	800a102 <__gethex+0x216>
 800a094:	f04f 0902 	mov.w	r9, #2
 800a098:	4629      	mov	r1, r5
 800a09a:	4620      	mov	r0, r4
 800a09c:	f7ff febf 	bl	8009e1e <rshift>
 800a0a0:	442f      	add	r7, r5
 800a0a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a0a6:	42bb      	cmp	r3, r7
 800a0a8:	da42      	bge.n	800a130 <__gethex+0x244>
 800a0aa:	9801      	ldr	r0, [sp, #4]
 800a0ac:	4621      	mov	r1, r4
 800a0ae:	f7fd ff7f 	bl	8007fb0 <_Bfree>
 800a0b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	6013      	str	r3, [r2, #0]
 800a0b8:	25a3      	movs	r5, #163	@ 0xa3
 800a0ba:	e793      	b.n	8009fe4 <__gethex+0xf8>
 800a0bc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a0c0:	2a2e      	cmp	r2, #46	@ 0x2e
 800a0c2:	d012      	beq.n	800a0ea <__gethex+0x1fe>
 800a0c4:	2b20      	cmp	r3, #32
 800a0c6:	d104      	bne.n	800a0d2 <__gethex+0x1e6>
 800a0c8:	f845 bb04 	str.w	fp, [r5], #4
 800a0cc:	f04f 0b00 	mov.w	fp, #0
 800a0d0:	465b      	mov	r3, fp
 800a0d2:	7830      	ldrb	r0, [r6, #0]
 800a0d4:	9303      	str	r3, [sp, #12]
 800a0d6:	f7ff fef4 	bl	8009ec2 <__hexdig_fun>
 800a0da:	9b03      	ldr	r3, [sp, #12]
 800a0dc:	f000 000f 	and.w	r0, r0, #15
 800a0e0:	4098      	lsls	r0, r3
 800a0e2:	ea4b 0b00 	orr.w	fp, fp, r0
 800a0e6:	3304      	adds	r3, #4
 800a0e8:	e7ae      	b.n	800a048 <__gethex+0x15c>
 800a0ea:	45b1      	cmp	r9, r6
 800a0ec:	d8ea      	bhi.n	800a0c4 <__gethex+0x1d8>
 800a0ee:	492b      	ldr	r1, [pc, #172]	@ (800a19c <__gethex+0x2b0>)
 800a0f0:	9303      	str	r3, [sp, #12]
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	4630      	mov	r0, r6
 800a0f6:	f7ff fe1d 	bl	8009d34 <strncmp>
 800a0fa:	9b03      	ldr	r3, [sp, #12]
 800a0fc:	2800      	cmp	r0, #0
 800a0fe:	d1e1      	bne.n	800a0c4 <__gethex+0x1d8>
 800a100:	e7a2      	b.n	800a048 <__gethex+0x15c>
 800a102:	1ea9      	subs	r1, r5, #2
 800a104:	4620      	mov	r0, r4
 800a106:	f7fe fb9c 	bl	8008842 <__any_on>
 800a10a:	2800      	cmp	r0, #0
 800a10c:	d0c2      	beq.n	800a094 <__gethex+0x1a8>
 800a10e:	f04f 0903 	mov.w	r9, #3
 800a112:	e7c1      	b.n	800a098 <__gethex+0x1ac>
 800a114:	da09      	bge.n	800a12a <__gethex+0x23e>
 800a116:	1b75      	subs	r5, r6, r5
 800a118:	4621      	mov	r1, r4
 800a11a:	9801      	ldr	r0, [sp, #4]
 800a11c:	462a      	mov	r2, r5
 800a11e:	f7fe f957 	bl	80083d0 <__lshift>
 800a122:	1b7f      	subs	r7, r7, r5
 800a124:	4604      	mov	r4, r0
 800a126:	f100 0a14 	add.w	sl, r0, #20
 800a12a:	f04f 0900 	mov.w	r9, #0
 800a12e:	e7b8      	b.n	800a0a2 <__gethex+0x1b6>
 800a130:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a134:	42bd      	cmp	r5, r7
 800a136:	dd6f      	ble.n	800a218 <__gethex+0x32c>
 800a138:	1bed      	subs	r5, r5, r7
 800a13a:	42ae      	cmp	r6, r5
 800a13c:	dc34      	bgt.n	800a1a8 <__gethex+0x2bc>
 800a13e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a142:	2b02      	cmp	r3, #2
 800a144:	d022      	beq.n	800a18c <__gethex+0x2a0>
 800a146:	2b03      	cmp	r3, #3
 800a148:	d024      	beq.n	800a194 <__gethex+0x2a8>
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d115      	bne.n	800a17a <__gethex+0x28e>
 800a14e:	42ae      	cmp	r6, r5
 800a150:	d113      	bne.n	800a17a <__gethex+0x28e>
 800a152:	2e01      	cmp	r6, #1
 800a154:	d10b      	bne.n	800a16e <__gethex+0x282>
 800a156:	9a02      	ldr	r2, [sp, #8]
 800a158:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a15c:	6013      	str	r3, [r2, #0]
 800a15e:	2301      	movs	r3, #1
 800a160:	6123      	str	r3, [r4, #16]
 800a162:	f8ca 3000 	str.w	r3, [sl]
 800a166:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a168:	2562      	movs	r5, #98	@ 0x62
 800a16a:	601c      	str	r4, [r3, #0]
 800a16c:	e73a      	b.n	8009fe4 <__gethex+0xf8>
 800a16e:	1e71      	subs	r1, r6, #1
 800a170:	4620      	mov	r0, r4
 800a172:	f7fe fb66 	bl	8008842 <__any_on>
 800a176:	2800      	cmp	r0, #0
 800a178:	d1ed      	bne.n	800a156 <__gethex+0x26a>
 800a17a:	9801      	ldr	r0, [sp, #4]
 800a17c:	4621      	mov	r1, r4
 800a17e:	f7fd ff17 	bl	8007fb0 <_Bfree>
 800a182:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a184:	2300      	movs	r3, #0
 800a186:	6013      	str	r3, [r2, #0]
 800a188:	2550      	movs	r5, #80	@ 0x50
 800a18a:	e72b      	b.n	8009fe4 <__gethex+0xf8>
 800a18c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d1f3      	bne.n	800a17a <__gethex+0x28e>
 800a192:	e7e0      	b.n	800a156 <__gethex+0x26a>
 800a194:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a196:	2b00      	cmp	r3, #0
 800a198:	d1dd      	bne.n	800a156 <__gethex+0x26a>
 800a19a:	e7ee      	b.n	800a17a <__gethex+0x28e>
 800a19c:	0800aa9f 	.word	0x0800aa9f
 800a1a0:	0800aa35 	.word	0x0800aa35
 800a1a4:	0800aaba 	.word	0x0800aaba
 800a1a8:	1e6f      	subs	r7, r5, #1
 800a1aa:	f1b9 0f00 	cmp.w	r9, #0
 800a1ae:	d130      	bne.n	800a212 <__gethex+0x326>
 800a1b0:	b127      	cbz	r7, 800a1bc <__gethex+0x2d0>
 800a1b2:	4639      	mov	r1, r7
 800a1b4:	4620      	mov	r0, r4
 800a1b6:	f7fe fb44 	bl	8008842 <__any_on>
 800a1ba:	4681      	mov	r9, r0
 800a1bc:	117a      	asrs	r2, r7, #5
 800a1be:	2301      	movs	r3, #1
 800a1c0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a1c4:	f007 071f 	and.w	r7, r7, #31
 800a1c8:	40bb      	lsls	r3, r7
 800a1ca:	4213      	tst	r3, r2
 800a1cc:	4629      	mov	r1, r5
 800a1ce:	4620      	mov	r0, r4
 800a1d0:	bf18      	it	ne
 800a1d2:	f049 0902 	orrne.w	r9, r9, #2
 800a1d6:	f7ff fe22 	bl	8009e1e <rshift>
 800a1da:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a1de:	1b76      	subs	r6, r6, r5
 800a1e0:	2502      	movs	r5, #2
 800a1e2:	f1b9 0f00 	cmp.w	r9, #0
 800a1e6:	d047      	beq.n	800a278 <__gethex+0x38c>
 800a1e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a1ec:	2b02      	cmp	r3, #2
 800a1ee:	d015      	beq.n	800a21c <__gethex+0x330>
 800a1f0:	2b03      	cmp	r3, #3
 800a1f2:	d017      	beq.n	800a224 <__gethex+0x338>
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d109      	bne.n	800a20c <__gethex+0x320>
 800a1f8:	f019 0f02 	tst.w	r9, #2
 800a1fc:	d006      	beq.n	800a20c <__gethex+0x320>
 800a1fe:	f8da 3000 	ldr.w	r3, [sl]
 800a202:	ea49 0903 	orr.w	r9, r9, r3
 800a206:	f019 0f01 	tst.w	r9, #1
 800a20a:	d10e      	bne.n	800a22a <__gethex+0x33e>
 800a20c:	f045 0510 	orr.w	r5, r5, #16
 800a210:	e032      	b.n	800a278 <__gethex+0x38c>
 800a212:	f04f 0901 	mov.w	r9, #1
 800a216:	e7d1      	b.n	800a1bc <__gethex+0x2d0>
 800a218:	2501      	movs	r5, #1
 800a21a:	e7e2      	b.n	800a1e2 <__gethex+0x2f6>
 800a21c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a21e:	f1c3 0301 	rsb	r3, r3, #1
 800a222:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a224:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a226:	2b00      	cmp	r3, #0
 800a228:	d0f0      	beq.n	800a20c <__gethex+0x320>
 800a22a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a22e:	f104 0314 	add.w	r3, r4, #20
 800a232:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a236:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a23a:	f04f 0c00 	mov.w	ip, #0
 800a23e:	4618      	mov	r0, r3
 800a240:	f853 2b04 	ldr.w	r2, [r3], #4
 800a244:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a248:	d01b      	beq.n	800a282 <__gethex+0x396>
 800a24a:	3201      	adds	r2, #1
 800a24c:	6002      	str	r2, [r0, #0]
 800a24e:	2d02      	cmp	r5, #2
 800a250:	f104 0314 	add.w	r3, r4, #20
 800a254:	d13c      	bne.n	800a2d0 <__gethex+0x3e4>
 800a256:	f8d8 2000 	ldr.w	r2, [r8]
 800a25a:	3a01      	subs	r2, #1
 800a25c:	42b2      	cmp	r2, r6
 800a25e:	d109      	bne.n	800a274 <__gethex+0x388>
 800a260:	1171      	asrs	r1, r6, #5
 800a262:	2201      	movs	r2, #1
 800a264:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a268:	f006 061f 	and.w	r6, r6, #31
 800a26c:	fa02 f606 	lsl.w	r6, r2, r6
 800a270:	421e      	tst	r6, r3
 800a272:	d13a      	bne.n	800a2ea <__gethex+0x3fe>
 800a274:	f045 0520 	orr.w	r5, r5, #32
 800a278:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a27a:	601c      	str	r4, [r3, #0]
 800a27c:	9b02      	ldr	r3, [sp, #8]
 800a27e:	601f      	str	r7, [r3, #0]
 800a280:	e6b0      	b.n	8009fe4 <__gethex+0xf8>
 800a282:	4299      	cmp	r1, r3
 800a284:	f843 cc04 	str.w	ip, [r3, #-4]
 800a288:	d8d9      	bhi.n	800a23e <__gethex+0x352>
 800a28a:	68a3      	ldr	r3, [r4, #8]
 800a28c:	459b      	cmp	fp, r3
 800a28e:	db17      	blt.n	800a2c0 <__gethex+0x3d4>
 800a290:	6861      	ldr	r1, [r4, #4]
 800a292:	9801      	ldr	r0, [sp, #4]
 800a294:	3101      	adds	r1, #1
 800a296:	f7fd fe4b 	bl	8007f30 <_Balloc>
 800a29a:	4681      	mov	r9, r0
 800a29c:	b918      	cbnz	r0, 800a2a6 <__gethex+0x3ba>
 800a29e:	4b1a      	ldr	r3, [pc, #104]	@ (800a308 <__gethex+0x41c>)
 800a2a0:	4602      	mov	r2, r0
 800a2a2:	2184      	movs	r1, #132	@ 0x84
 800a2a4:	e6c5      	b.n	800a032 <__gethex+0x146>
 800a2a6:	6922      	ldr	r2, [r4, #16]
 800a2a8:	3202      	adds	r2, #2
 800a2aa:	f104 010c 	add.w	r1, r4, #12
 800a2ae:	0092      	lsls	r2, r2, #2
 800a2b0:	300c      	adds	r0, #12
 800a2b2:	f7ff fd83 	bl	8009dbc <memcpy>
 800a2b6:	4621      	mov	r1, r4
 800a2b8:	9801      	ldr	r0, [sp, #4]
 800a2ba:	f7fd fe79 	bl	8007fb0 <_Bfree>
 800a2be:	464c      	mov	r4, r9
 800a2c0:	6923      	ldr	r3, [r4, #16]
 800a2c2:	1c5a      	adds	r2, r3, #1
 800a2c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a2c8:	6122      	str	r2, [r4, #16]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	615a      	str	r2, [r3, #20]
 800a2ce:	e7be      	b.n	800a24e <__gethex+0x362>
 800a2d0:	6922      	ldr	r2, [r4, #16]
 800a2d2:	455a      	cmp	r2, fp
 800a2d4:	dd0b      	ble.n	800a2ee <__gethex+0x402>
 800a2d6:	2101      	movs	r1, #1
 800a2d8:	4620      	mov	r0, r4
 800a2da:	f7ff fda0 	bl	8009e1e <rshift>
 800a2de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a2e2:	3701      	adds	r7, #1
 800a2e4:	42bb      	cmp	r3, r7
 800a2e6:	f6ff aee0 	blt.w	800a0aa <__gethex+0x1be>
 800a2ea:	2501      	movs	r5, #1
 800a2ec:	e7c2      	b.n	800a274 <__gethex+0x388>
 800a2ee:	f016 061f 	ands.w	r6, r6, #31
 800a2f2:	d0fa      	beq.n	800a2ea <__gethex+0x3fe>
 800a2f4:	4453      	add	r3, sl
 800a2f6:	f1c6 0620 	rsb	r6, r6, #32
 800a2fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a2fe:	f7fd ff09 	bl	8008114 <__hi0bits>
 800a302:	42b0      	cmp	r0, r6
 800a304:	dbe7      	blt.n	800a2d6 <__gethex+0x3ea>
 800a306:	e7f0      	b.n	800a2ea <__gethex+0x3fe>
 800a308:	0800aa35 	.word	0x0800aa35

0800a30c <L_shift>:
 800a30c:	f1c2 0208 	rsb	r2, r2, #8
 800a310:	0092      	lsls	r2, r2, #2
 800a312:	b570      	push	{r4, r5, r6, lr}
 800a314:	f1c2 0620 	rsb	r6, r2, #32
 800a318:	6843      	ldr	r3, [r0, #4]
 800a31a:	6804      	ldr	r4, [r0, #0]
 800a31c:	fa03 f506 	lsl.w	r5, r3, r6
 800a320:	432c      	orrs	r4, r5
 800a322:	40d3      	lsrs	r3, r2
 800a324:	6004      	str	r4, [r0, #0]
 800a326:	f840 3f04 	str.w	r3, [r0, #4]!
 800a32a:	4288      	cmp	r0, r1
 800a32c:	d3f4      	bcc.n	800a318 <L_shift+0xc>
 800a32e:	bd70      	pop	{r4, r5, r6, pc}

0800a330 <__match>:
 800a330:	b530      	push	{r4, r5, lr}
 800a332:	6803      	ldr	r3, [r0, #0]
 800a334:	3301      	adds	r3, #1
 800a336:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a33a:	b914      	cbnz	r4, 800a342 <__match+0x12>
 800a33c:	6003      	str	r3, [r0, #0]
 800a33e:	2001      	movs	r0, #1
 800a340:	bd30      	pop	{r4, r5, pc}
 800a342:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a346:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a34a:	2d19      	cmp	r5, #25
 800a34c:	bf98      	it	ls
 800a34e:	3220      	addls	r2, #32
 800a350:	42a2      	cmp	r2, r4
 800a352:	d0f0      	beq.n	800a336 <__match+0x6>
 800a354:	2000      	movs	r0, #0
 800a356:	e7f3      	b.n	800a340 <__match+0x10>

0800a358 <__hexnan>:
 800a358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a35c:	680b      	ldr	r3, [r1, #0]
 800a35e:	6801      	ldr	r1, [r0, #0]
 800a360:	115e      	asrs	r6, r3, #5
 800a362:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a366:	f013 031f 	ands.w	r3, r3, #31
 800a36a:	b087      	sub	sp, #28
 800a36c:	bf18      	it	ne
 800a36e:	3604      	addne	r6, #4
 800a370:	2500      	movs	r5, #0
 800a372:	1f37      	subs	r7, r6, #4
 800a374:	4682      	mov	sl, r0
 800a376:	4690      	mov	r8, r2
 800a378:	9301      	str	r3, [sp, #4]
 800a37a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a37e:	46b9      	mov	r9, r7
 800a380:	463c      	mov	r4, r7
 800a382:	9502      	str	r5, [sp, #8]
 800a384:	46ab      	mov	fp, r5
 800a386:	784a      	ldrb	r2, [r1, #1]
 800a388:	1c4b      	adds	r3, r1, #1
 800a38a:	9303      	str	r3, [sp, #12]
 800a38c:	b342      	cbz	r2, 800a3e0 <__hexnan+0x88>
 800a38e:	4610      	mov	r0, r2
 800a390:	9105      	str	r1, [sp, #20]
 800a392:	9204      	str	r2, [sp, #16]
 800a394:	f7ff fd95 	bl	8009ec2 <__hexdig_fun>
 800a398:	2800      	cmp	r0, #0
 800a39a:	d151      	bne.n	800a440 <__hexnan+0xe8>
 800a39c:	9a04      	ldr	r2, [sp, #16]
 800a39e:	9905      	ldr	r1, [sp, #20]
 800a3a0:	2a20      	cmp	r2, #32
 800a3a2:	d818      	bhi.n	800a3d6 <__hexnan+0x7e>
 800a3a4:	9b02      	ldr	r3, [sp, #8]
 800a3a6:	459b      	cmp	fp, r3
 800a3a8:	dd13      	ble.n	800a3d2 <__hexnan+0x7a>
 800a3aa:	454c      	cmp	r4, r9
 800a3ac:	d206      	bcs.n	800a3bc <__hexnan+0x64>
 800a3ae:	2d07      	cmp	r5, #7
 800a3b0:	dc04      	bgt.n	800a3bc <__hexnan+0x64>
 800a3b2:	462a      	mov	r2, r5
 800a3b4:	4649      	mov	r1, r9
 800a3b6:	4620      	mov	r0, r4
 800a3b8:	f7ff ffa8 	bl	800a30c <L_shift>
 800a3bc:	4544      	cmp	r4, r8
 800a3be:	d952      	bls.n	800a466 <__hexnan+0x10e>
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	f1a4 0904 	sub.w	r9, r4, #4
 800a3c6:	f844 3c04 	str.w	r3, [r4, #-4]
 800a3ca:	f8cd b008 	str.w	fp, [sp, #8]
 800a3ce:	464c      	mov	r4, r9
 800a3d0:	461d      	mov	r5, r3
 800a3d2:	9903      	ldr	r1, [sp, #12]
 800a3d4:	e7d7      	b.n	800a386 <__hexnan+0x2e>
 800a3d6:	2a29      	cmp	r2, #41	@ 0x29
 800a3d8:	d157      	bne.n	800a48a <__hexnan+0x132>
 800a3da:	3102      	adds	r1, #2
 800a3dc:	f8ca 1000 	str.w	r1, [sl]
 800a3e0:	f1bb 0f00 	cmp.w	fp, #0
 800a3e4:	d051      	beq.n	800a48a <__hexnan+0x132>
 800a3e6:	454c      	cmp	r4, r9
 800a3e8:	d206      	bcs.n	800a3f8 <__hexnan+0xa0>
 800a3ea:	2d07      	cmp	r5, #7
 800a3ec:	dc04      	bgt.n	800a3f8 <__hexnan+0xa0>
 800a3ee:	462a      	mov	r2, r5
 800a3f0:	4649      	mov	r1, r9
 800a3f2:	4620      	mov	r0, r4
 800a3f4:	f7ff ff8a 	bl	800a30c <L_shift>
 800a3f8:	4544      	cmp	r4, r8
 800a3fa:	d936      	bls.n	800a46a <__hexnan+0x112>
 800a3fc:	f1a8 0204 	sub.w	r2, r8, #4
 800a400:	4623      	mov	r3, r4
 800a402:	f853 1b04 	ldr.w	r1, [r3], #4
 800a406:	f842 1f04 	str.w	r1, [r2, #4]!
 800a40a:	429f      	cmp	r7, r3
 800a40c:	d2f9      	bcs.n	800a402 <__hexnan+0xaa>
 800a40e:	1b3b      	subs	r3, r7, r4
 800a410:	f023 0303 	bic.w	r3, r3, #3
 800a414:	3304      	adds	r3, #4
 800a416:	3401      	adds	r4, #1
 800a418:	3e03      	subs	r6, #3
 800a41a:	42b4      	cmp	r4, r6
 800a41c:	bf88      	it	hi
 800a41e:	2304      	movhi	r3, #4
 800a420:	4443      	add	r3, r8
 800a422:	2200      	movs	r2, #0
 800a424:	f843 2b04 	str.w	r2, [r3], #4
 800a428:	429f      	cmp	r7, r3
 800a42a:	d2fb      	bcs.n	800a424 <__hexnan+0xcc>
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	b91b      	cbnz	r3, 800a438 <__hexnan+0xe0>
 800a430:	4547      	cmp	r7, r8
 800a432:	d128      	bne.n	800a486 <__hexnan+0x12e>
 800a434:	2301      	movs	r3, #1
 800a436:	603b      	str	r3, [r7, #0]
 800a438:	2005      	movs	r0, #5
 800a43a:	b007      	add	sp, #28
 800a43c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a440:	3501      	adds	r5, #1
 800a442:	2d08      	cmp	r5, #8
 800a444:	f10b 0b01 	add.w	fp, fp, #1
 800a448:	dd06      	ble.n	800a458 <__hexnan+0x100>
 800a44a:	4544      	cmp	r4, r8
 800a44c:	d9c1      	bls.n	800a3d2 <__hexnan+0x7a>
 800a44e:	2300      	movs	r3, #0
 800a450:	f844 3c04 	str.w	r3, [r4, #-4]
 800a454:	2501      	movs	r5, #1
 800a456:	3c04      	subs	r4, #4
 800a458:	6822      	ldr	r2, [r4, #0]
 800a45a:	f000 000f 	and.w	r0, r0, #15
 800a45e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a462:	6020      	str	r0, [r4, #0]
 800a464:	e7b5      	b.n	800a3d2 <__hexnan+0x7a>
 800a466:	2508      	movs	r5, #8
 800a468:	e7b3      	b.n	800a3d2 <__hexnan+0x7a>
 800a46a:	9b01      	ldr	r3, [sp, #4]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d0dd      	beq.n	800a42c <__hexnan+0xd4>
 800a470:	f1c3 0320 	rsb	r3, r3, #32
 800a474:	f04f 32ff 	mov.w	r2, #4294967295
 800a478:	40da      	lsrs	r2, r3
 800a47a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a47e:	4013      	ands	r3, r2
 800a480:	f846 3c04 	str.w	r3, [r6, #-4]
 800a484:	e7d2      	b.n	800a42c <__hexnan+0xd4>
 800a486:	3f04      	subs	r7, #4
 800a488:	e7d0      	b.n	800a42c <__hexnan+0xd4>
 800a48a:	2004      	movs	r0, #4
 800a48c:	e7d5      	b.n	800a43a <__hexnan+0xe2>

0800a48e <__ascii_mbtowc>:
 800a48e:	b082      	sub	sp, #8
 800a490:	b901      	cbnz	r1, 800a494 <__ascii_mbtowc+0x6>
 800a492:	a901      	add	r1, sp, #4
 800a494:	b142      	cbz	r2, 800a4a8 <__ascii_mbtowc+0x1a>
 800a496:	b14b      	cbz	r3, 800a4ac <__ascii_mbtowc+0x1e>
 800a498:	7813      	ldrb	r3, [r2, #0]
 800a49a:	600b      	str	r3, [r1, #0]
 800a49c:	7812      	ldrb	r2, [r2, #0]
 800a49e:	1e10      	subs	r0, r2, #0
 800a4a0:	bf18      	it	ne
 800a4a2:	2001      	movne	r0, #1
 800a4a4:	b002      	add	sp, #8
 800a4a6:	4770      	bx	lr
 800a4a8:	4610      	mov	r0, r2
 800a4aa:	e7fb      	b.n	800a4a4 <__ascii_mbtowc+0x16>
 800a4ac:	f06f 0001 	mvn.w	r0, #1
 800a4b0:	e7f8      	b.n	800a4a4 <__ascii_mbtowc+0x16>

0800a4b2 <_realloc_r>:
 800a4b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4b6:	4607      	mov	r7, r0
 800a4b8:	4614      	mov	r4, r2
 800a4ba:	460d      	mov	r5, r1
 800a4bc:	b921      	cbnz	r1, 800a4c8 <_realloc_r+0x16>
 800a4be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4c2:	4611      	mov	r1, r2
 800a4c4:	f7fd bca8 	b.w	8007e18 <_malloc_r>
 800a4c8:	b92a      	cbnz	r2, 800a4d6 <_realloc_r+0x24>
 800a4ca:	f7fd fc31 	bl	8007d30 <_free_r>
 800a4ce:	4625      	mov	r5, r4
 800a4d0:	4628      	mov	r0, r5
 800a4d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4d6:	f000 f86b 	bl	800a5b0 <_malloc_usable_size_r>
 800a4da:	4284      	cmp	r4, r0
 800a4dc:	4606      	mov	r6, r0
 800a4de:	d802      	bhi.n	800a4e6 <_realloc_r+0x34>
 800a4e0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a4e4:	d8f4      	bhi.n	800a4d0 <_realloc_r+0x1e>
 800a4e6:	4621      	mov	r1, r4
 800a4e8:	4638      	mov	r0, r7
 800a4ea:	f7fd fc95 	bl	8007e18 <_malloc_r>
 800a4ee:	4680      	mov	r8, r0
 800a4f0:	b908      	cbnz	r0, 800a4f6 <_realloc_r+0x44>
 800a4f2:	4645      	mov	r5, r8
 800a4f4:	e7ec      	b.n	800a4d0 <_realloc_r+0x1e>
 800a4f6:	42b4      	cmp	r4, r6
 800a4f8:	4622      	mov	r2, r4
 800a4fa:	4629      	mov	r1, r5
 800a4fc:	bf28      	it	cs
 800a4fe:	4632      	movcs	r2, r6
 800a500:	f7ff fc5c 	bl	8009dbc <memcpy>
 800a504:	4629      	mov	r1, r5
 800a506:	4638      	mov	r0, r7
 800a508:	f7fd fc12 	bl	8007d30 <_free_r>
 800a50c:	e7f1      	b.n	800a4f2 <_realloc_r+0x40>

0800a50e <__ascii_wctomb>:
 800a50e:	4603      	mov	r3, r0
 800a510:	4608      	mov	r0, r1
 800a512:	b141      	cbz	r1, 800a526 <__ascii_wctomb+0x18>
 800a514:	2aff      	cmp	r2, #255	@ 0xff
 800a516:	d904      	bls.n	800a522 <__ascii_wctomb+0x14>
 800a518:	228a      	movs	r2, #138	@ 0x8a
 800a51a:	601a      	str	r2, [r3, #0]
 800a51c:	f04f 30ff 	mov.w	r0, #4294967295
 800a520:	4770      	bx	lr
 800a522:	700a      	strb	r2, [r1, #0]
 800a524:	2001      	movs	r0, #1
 800a526:	4770      	bx	lr

0800a528 <_raise_r>:
 800a528:	291f      	cmp	r1, #31
 800a52a:	b538      	push	{r3, r4, r5, lr}
 800a52c:	4605      	mov	r5, r0
 800a52e:	460c      	mov	r4, r1
 800a530:	d904      	bls.n	800a53c <_raise_r+0x14>
 800a532:	2316      	movs	r3, #22
 800a534:	6003      	str	r3, [r0, #0]
 800a536:	f04f 30ff 	mov.w	r0, #4294967295
 800a53a:	bd38      	pop	{r3, r4, r5, pc}
 800a53c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a53e:	b112      	cbz	r2, 800a546 <_raise_r+0x1e>
 800a540:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a544:	b94b      	cbnz	r3, 800a55a <_raise_r+0x32>
 800a546:	4628      	mov	r0, r5
 800a548:	f000 f830 	bl	800a5ac <_getpid_r>
 800a54c:	4622      	mov	r2, r4
 800a54e:	4601      	mov	r1, r0
 800a550:	4628      	mov	r0, r5
 800a552:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a556:	f000 b817 	b.w	800a588 <_kill_r>
 800a55a:	2b01      	cmp	r3, #1
 800a55c:	d00a      	beq.n	800a574 <_raise_r+0x4c>
 800a55e:	1c59      	adds	r1, r3, #1
 800a560:	d103      	bne.n	800a56a <_raise_r+0x42>
 800a562:	2316      	movs	r3, #22
 800a564:	6003      	str	r3, [r0, #0]
 800a566:	2001      	movs	r0, #1
 800a568:	e7e7      	b.n	800a53a <_raise_r+0x12>
 800a56a:	2100      	movs	r1, #0
 800a56c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a570:	4620      	mov	r0, r4
 800a572:	4798      	blx	r3
 800a574:	2000      	movs	r0, #0
 800a576:	e7e0      	b.n	800a53a <_raise_r+0x12>

0800a578 <raise>:
 800a578:	4b02      	ldr	r3, [pc, #8]	@ (800a584 <raise+0xc>)
 800a57a:	4601      	mov	r1, r0
 800a57c:	6818      	ldr	r0, [r3, #0]
 800a57e:	f7ff bfd3 	b.w	800a528 <_raise_r>
 800a582:	bf00      	nop
 800a584:	20000048 	.word	0x20000048

0800a588 <_kill_r>:
 800a588:	b538      	push	{r3, r4, r5, lr}
 800a58a:	4d07      	ldr	r5, [pc, #28]	@ (800a5a8 <_kill_r+0x20>)
 800a58c:	2300      	movs	r3, #0
 800a58e:	4604      	mov	r4, r0
 800a590:	4608      	mov	r0, r1
 800a592:	4611      	mov	r1, r2
 800a594:	602b      	str	r3, [r5, #0]
 800a596:	f7f6 ff94 	bl	80014c2 <_kill>
 800a59a:	1c43      	adds	r3, r0, #1
 800a59c:	d102      	bne.n	800a5a4 <_kill_r+0x1c>
 800a59e:	682b      	ldr	r3, [r5, #0]
 800a5a0:	b103      	cbz	r3, 800a5a4 <_kill_r+0x1c>
 800a5a2:	6023      	str	r3, [r4, #0]
 800a5a4:	bd38      	pop	{r3, r4, r5, pc}
 800a5a6:	bf00      	nop
 800a5a8:	20000e14 	.word	0x20000e14

0800a5ac <_getpid_r>:
 800a5ac:	f7f6 bf81 	b.w	80014b2 <_getpid>

0800a5b0 <_malloc_usable_size_r>:
 800a5b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5b4:	1f18      	subs	r0, r3, #4
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	bfbc      	itt	lt
 800a5ba:	580b      	ldrlt	r3, [r1, r0]
 800a5bc:	18c0      	addlt	r0, r0, r3
 800a5be:	4770      	bx	lr

0800a5c0 <fmodf>:
 800a5c0:	b508      	push	{r3, lr}
 800a5c2:	ed2d 8b02 	vpush	{d8}
 800a5c6:	eef0 8a40 	vmov.f32	s17, s0
 800a5ca:	eeb0 8a60 	vmov.f32	s16, s1
 800a5ce:	f000 f8bb 	bl	800a748 <__ieee754_fmodf>
 800a5d2:	eef4 8a48 	vcmp.f32	s17, s16
 800a5d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5da:	d60c      	bvs.n	800a5f6 <fmodf+0x36>
 800a5dc:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800a5fc <fmodf+0x3c>
 800a5e0:	eeb4 8a68 	vcmp.f32	s16, s17
 800a5e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5e8:	d105      	bne.n	800a5f6 <fmodf+0x36>
 800a5ea:	f7fc fcf7 	bl	8006fdc <__errno>
 800a5ee:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800a5f2:	2321      	movs	r3, #33	@ 0x21
 800a5f4:	6003      	str	r3, [r0, #0]
 800a5f6:	ecbd 8b02 	vpop	{d8}
 800a5fa:	bd08      	pop	{r3, pc}
 800a5fc:	00000000 	.word	0x00000000

0800a600 <fmax>:
 800a600:	b508      	push	{r3, lr}
 800a602:	ed2d 8b04 	vpush	{d8-d9}
 800a606:	eeb0 8a40 	vmov.f32	s16, s0
 800a60a:	eef0 8a60 	vmov.f32	s17, s1
 800a60e:	eeb0 9a41 	vmov.f32	s18, s2
 800a612:	eef0 9a61 	vmov.f32	s19, s3
 800a616:	f000 f81d 	bl	800a654 <__fpclassifyd>
 800a61a:	b950      	cbnz	r0, 800a632 <fmax+0x32>
 800a61c:	eeb0 8a49 	vmov.f32	s16, s18
 800a620:	eef0 8a69 	vmov.f32	s17, s19
 800a624:	eeb0 0a48 	vmov.f32	s0, s16
 800a628:	eef0 0a68 	vmov.f32	s1, s17
 800a62c:	ecbd 8b04 	vpop	{d8-d9}
 800a630:	bd08      	pop	{r3, pc}
 800a632:	eeb0 0a49 	vmov.f32	s0, s18
 800a636:	eef0 0a69 	vmov.f32	s1, s19
 800a63a:	f000 f80b 	bl	800a654 <__fpclassifyd>
 800a63e:	2800      	cmp	r0, #0
 800a640:	d0f0      	beq.n	800a624 <fmax+0x24>
 800a642:	ec53 2b19 	vmov	r2, r3, d9
 800a646:	ec51 0b18 	vmov	r0, r1, d8
 800a64a:	f7f6 fa8d 	bl	8000b68 <__aeabi_dcmpgt>
 800a64e:	2800      	cmp	r0, #0
 800a650:	d0e4      	beq.n	800a61c <fmax+0x1c>
 800a652:	e7e7      	b.n	800a624 <fmax+0x24>

0800a654 <__fpclassifyd>:
 800a654:	ec51 0b10 	vmov	r0, r1, d0
 800a658:	460b      	mov	r3, r1
 800a65a:	f031 4100 	bics.w	r1, r1, #2147483648	@ 0x80000000
 800a65e:	b510      	push	{r4, lr}
 800a660:	d104      	bne.n	800a66c <__fpclassifyd+0x18>
 800a662:	2800      	cmp	r0, #0
 800a664:	bf0c      	ite	eq
 800a666:	2002      	moveq	r0, #2
 800a668:	2003      	movne	r0, #3
 800a66a:	bd10      	pop	{r4, pc}
 800a66c:	4a09      	ldr	r2, [pc, #36]	@ (800a694 <__fpclassifyd+0x40>)
 800a66e:	f5a1 1480 	sub.w	r4, r1, #1048576	@ 0x100000
 800a672:	4294      	cmp	r4, r2
 800a674:	d908      	bls.n	800a688 <__fpclassifyd+0x34>
 800a676:	4a08      	ldr	r2, [pc, #32]	@ (800a698 <__fpclassifyd+0x44>)
 800a678:	4213      	tst	r3, r2
 800a67a:	d007      	beq.n	800a68c <__fpclassifyd+0x38>
 800a67c:	4291      	cmp	r1, r2
 800a67e:	d107      	bne.n	800a690 <__fpclassifyd+0x3c>
 800a680:	fab0 f080 	clz	r0, r0
 800a684:	0940      	lsrs	r0, r0, #5
 800a686:	e7f0      	b.n	800a66a <__fpclassifyd+0x16>
 800a688:	2004      	movs	r0, #4
 800a68a:	e7ee      	b.n	800a66a <__fpclassifyd+0x16>
 800a68c:	2003      	movs	r0, #3
 800a68e:	e7ec      	b.n	800a66a <__fpclassifyd+0x16>
 800a690:	2000      	movs	r0, #0
 800a692:	e7ea      	b.n	800a66a <__fpclassifyd+0x16>
 800a694:	7fdfffff 	.word	0x7fdfffff
 800a698:	7ff00000 	.word	0x7ff00000

0800a69c <fmaxf>:
 800a69c:	b508      	push	{r3, lr}
 800a69e:	ed2d 8b02 	vpush	{d8}
 800a6a2:	eeb0 8a40 	vmov.f32	s16, s0
 800a6a6:	eef0 8a60 	vmov.f32	s17, s1
 800a6aa:	f000 f831 	bl	800a710 <__fpclassifyf>
 800a6ae:	b930      	cbnz	r0, 800a6be <fmaxf+0x22>
 800a6b0:	eeb0 8a68 	vmov.f32	s16, s17
 800a6b4:	eeb0 0a48 	vmov.f32	s0, s16
 800a6b8:	ecbd 8b02 	vpop	{d8}
 800a6bc:	bd08      	pop	{r3, pc}
 800a6be:	eeb0 0a68 	vmov.f32	s0, s17
 800a6c2:	f000 f825 	bl	800a710 <__fpclassifyf>
 800a6c6:	2800      	cmp	r0, #0
 800a6c8:	d0f4      	beq.n	800a6b4 <fmaxf+0x18>
 800a6ca:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a6ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6d2:	dded      	ble.n	800a6b0 <fmaxf+0x14>
 800a6d4:	e7ee      	b.n	800a6b4 <fmaxf+0x18>

0800a6d6 <fminf>:
 800a6d6:	b508      	push	{r3, lr}
 800a6d8:	ed2d 8b02 	vpush	{d8}
 800a6dc:	eeb0 8a40 	vmov.f32	s16, s0
 800a6e0:	eef0 8a60 	vmov.f32	s17, s1
 800a6e4:	f000 f814 	bl	800a710 <__fpclassifyf>
 800a6e8:	b930      	cbnz	r0, 800a6f8 <fminf+0x22>
 800a6ea:	eeb0 8a68 	vmov.f32	s16, s17
 800a6ee:	eeb0 0a48 	vmov.f32	s0, s16
 800a6f2:	ecbd 8b02 	vpop	{d8}
 800a6f6:	bd08      	pop	{r3, pc}
 800a6f8:	eeb0 0a68 	vmov.f32	s0, s17
 800a6fc:	f000 f808 	bl	800a710 <__fpclassifyf>
 800a700:	2800      	cmp	r0, #0
 800a702:	d0f4      	beq.n	800a6ee <fminf+0x18>
 800a704:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800a708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a70c:	d5ed      	bpl.n	800a6ea <fminf+0x14>
 800a70e:	e7ee      	b.n	800a6ee <fminf+0x18>

0800a710 <__fpclassifyf>:
 800a710:	ee10 3a10 	vmov	r3, s0
 800a714:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 800a718:	d00d      	beq.n	800a736 <__fpclassifyf+0x26>
 800a71a:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800a71e:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 800a722:	d30a      	bcc.n	800a73a <__fpclassifyf+0x2a>
 800a724:	4b07      	ldr	r3, [pc, #28]	@ (800a744 <__fpclassifyf+0x34>)
 800a726:	1e42      	subs	r2, r0, #1
 800a728:	429a      	cmp	r2, r3
 800a72a:	d908      	bls.n	800a73e <__fpclassifyf+0x2e>
 800a72c:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 800a730:	4258      	negs	r0, r3
 800a732:	4158      	adcs	r0, r3
 800a734:	4770      	bx	lr
 800a736:	2002      	movs	r0, #2
 800a738:	4770      	bx	lr
 800a73a:	2004      	movs	r0, #4
 800a73c:	4770      	bx	lr
 800a73e:	2003      	movs	r0, #3
 800a740:	4770      	bx	lr
 800a742:	bf00      	nop
 800a744:	007ffffe 	.word	0x007ffffe

0800a748 <__ieee754_fmodf>:
 800a748:	b570      	push	{r4, r5, r6, lr}
 800a74a:	ee10 6a90 	vmov	r6, s1
 800a74e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800a752:	1e5a      	subs	r2, r3, #1
 800a754:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800a758:	d206      	bcs.n	800a768 <__ieee754_fmodf+0x20>
 800a75a:	ee10 4a10 	vmov	r4, s0
 800a75e:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 800a762:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800a766:	d304      	bcc.n	800a772 <__ieee754_fmodf+0x2a>
 800a768:	ee60 0a20 	vmul.f32	s1, s0, s1
 800a76c:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800a770:	bd70      	pop	{r4, r5, r6, pc}
 800a772:	4299      	cmp	r1, r3
 800a774:	dbfc      	blt.n	800a770 <__ieee754_fmodf+0x28>
 800a776:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 800a77a:	d105      	bne.n	800a788 <__ieee754_fmodf+0x40>
 800a77c:	4b32      	ldr	r3, [pc, #200]	@ (800a848 <__ieee754_fmodf+0x100>)
 800a77e:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 800a782:	ed93 0a00 	vldr	s0, [r3]
 800a786:	e7f3      	b.n	800a770 <__ieee754_fmodf+0x28>
 800a788:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 800a78c:	d146      	bne.n	800a81c <__ieee754_fmodf+0xd4>
 800a78e:	020a      	lsls	r2, r1, #8
 800a790:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 800a794:	2a00      	cmp	r2, #0
 800a796:	dc3e      	bgt.n	800a816 <__ieee754_fmodf+0xce>
 800a798:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800a79c:	bf01      	itttt	eq
 800a79e:	021a      	lsleq	r2, r3, #8
 800a7a0:	fab2 f282 	clzeq	r2, r2
 800a7a4:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 800a7a8:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 800a7ac:	bf16      	itet	ne
 800a7ae:	15da      	asrne	r2, r3, #23
 800a7b0:	3282      	addeq	r2, #130	@ 0x82
 800a7b2:	3a7f      	subne	r2, #127	@ 0x7f
 800a7b4:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 800a7b8:	bfbb      	ittet	lt
 800a7ba:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800a7be:	1a24      	sublt	r4, r4, r0
 800a7c0:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 800a7c4:	40a1      	lsllt	r1, r4
 800a7c6:	bfa8      	it	ge
 800a7c8:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 800a7cc:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800a7d0:	bfb5      	itete	lt
 800a7d2:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800a7d6:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 800a7da:	1aa4      	sublt	r4, r4, r2
 800a7dc:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 800a7e0:	bfb8      	it	lt
 800a7e2:	fa03 f404 	lsllt.w	r4, r3, r4
 800a7e6:	1a80      	subs	r0, r0, r2
 800a7e8:	1b0b      	subs	r3, r1, r4
 800a7ea:	b9d0      	cbnz	r0, 800a822 <__ieee754_fmodf+0xda>
 800a7ec:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 800a7f0:	bf28      	it	cs
 800a7f2:	460b      	movcs	r3, r1
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d0c1      	beq.n	800a77c <__ieee754_fmodf+0x34>
 800a7f8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a7fc:	db19      	blt.n	800a832 <__ieee754_fmodf+0xea>
 800a7fe:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800a802:	db19      	blt.n	800a838 <__ieee754_fmodf+0xf0>
 800a804:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800a808:	327f      	adds	r2, #127	@ 0x7f
 800a80a:	432b      	orrs	r3, r5
 800a80c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800a810:	ee00 3a10 	vmov	s0, r3
 800a814:	e7ac      	b.n	800a770 <__ieee754_fmodf+0x28>
 800a816:	3801      	subs	r0, #1
 800a818:	0052      	lsls	r2, r2, #1
 800a81a:	e7bb      	b.n	800a794 <__ieee754_fmodf+0x4c>
 800a81c:	15c8      	asrs	r0, r1, #23
 800a81e:	387f      	subs	r0, #127	@ 0x7f
 800a820:	e7ba      	b.n	800a798 <__ieee754_fmodf+0x50>
 800a822:	2b00      	cmp	r3, #0
 800a824:	da02      	bge.n	800a82c <__ieee754_fmodf+0xe4>
 800a826:	0049      	lsls	r1, r1, #1
 800a828:	3801      	subs	r0, #1
 800a82a:	e7dd      	b.n	800a7e8 <__ieee754_fmodf+0xa0>
 800a82c:	d0a6      	beq.n	800a77c <__ieee754_fmodf+0x34>
 800a82e:	0059      	lsls	r1, r3, #1
 800a830:	e7fa      	b.n	800a828 <__ieee754_fmodf+0xe0>
 800a832:	005b      	lsls	r3, r3, #1
 800a834:	3a01      	subs	r2, #1
 800a836:	e7df      	b.n	800a7f8 <__ieee754_fmodf+0xb0>
 800a838:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 800a83c:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800a840:	3282      	adds	r2, #130	@ 0x82
 800a842:	4113      	asrs	r3, r2
 800a844:	432b      	orrs	r3, r5
 800a846:	e7e3      	b.n	800a810 <__ieee754_fmodf+0xc8>
 800a848:	0800ad6c 	.word	0x0800ad6c

0800a84c <_init>:
 800a84c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a84e:	bf00      	nop
 800a850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a852:	bc08      	pop	{r3}
 800a854:	469e      	mov	lr, r3
 800a856:	4770      	bx	lr

0800a858 <_fini>:
 800a858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a85a:	bf00      	nop
 800a85c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a85e:	bc08      	pop	{r3}
 800a860:	469e      	mov	lr, r3
 800a862:	4770      	bx	lr
